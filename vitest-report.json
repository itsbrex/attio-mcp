
> attio-mcp@0.2.0 test:ci
> E2E_MODE=true vitest --run --reporter=verbose --reporter=json


 RUN  v3.2.4 /Users/kesslerio/GDrive/Projects/attio-mcp-server

stdout | test/e2e/suites/record-management.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

stdout | test/e2e/suites/core-workflows.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  override existing env vars with { override: true }

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  write to custom object with { processEnv: myObject }

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a company record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a person record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a list record and convert format
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a records object record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a deals object record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a task record and convert to AttioRecord
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should handle performance tracking correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return true when record exists
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return false when record is cached as 404
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return false when record throws not found error
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should retrieve multiple records successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should handle mixed success and failure results
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should apply field filtering to multiple records
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordWithMetrics > should return record with performance metrics
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a company record 3ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a person record 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a list record and convert format 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a records object record 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a deals object record 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should retrieve a task record and convert to AttioRecord 59ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordDetails > should handle performance tracking correctly 1ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return true when record exists 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return false when record is cached as 404 1ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > recordExists > should return false when record throws not found error 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should retrieve multiple records successfully 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should handle mixed success and failure results 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getMultipleRecords > should apply field filtering to multiple records 0ms
 ✓ test/services/UniversalRetrievalService-core-operations.test.ts > UniversalRetrievalService > getRecordWithMetrics > should return record with performance metrics 0ms
stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getObjectAttributeMetadata > should fetch and cache attribute metadata for an object
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getObjectAttributeMetadata > should handle API errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect string type for text fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect array type for multi-value fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect number type for numeric fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect boolean type for checkbox fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should default to string for unknown attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getAttributeTypeInfo > should return comprehensive type information
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getAttributeTypeInfo > should handle missing metadata gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for email fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for URL fields
[MockState] Cleared 0 mock companies from storage

stdout | test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for select fields with options
[MockState] Cleared 0 mock companies from storage

 × test/api/attribute-types.test.ts > Attribute Type Detection > getObjectAttributeMetadata > should fetch and cache attribute metadata for an object 5ms
   → expected "spy" to be called with arguments: [ '/objects/companies/attributes' ][90m

Number of calls: [1m0[22m
[39m
 ✓ test/api/attribute-types.test.ts > Attribute Type Detection > getObjectAttributeMetadata > should handle API errors gracefully 0ms
 ✓ test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect string type for text fields 0ms
 × test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect array type for multi-value fields 2ms
   → expected 'string' to be 'array' // Object.is equality
 × test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect number type for numeric fields 1ms
   → expected 'string' to be 'number' // Object.is equality
 × test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should detect boolean type for checkbox fields 1ms
   → expected 'string' to be 'boolean' // Object.is equality
 ✓ test/api/attribute-types.test.ts > Attribute Type Detection > detectFieldType > should default to string for unknown attributes 0ms
 × test/api/attribute-types.test.ts > Attribute Type Detection > getAttributeTypeInfo > should return comprehensive type information 2ms
   → expected { fieldType: 'string', …(5) } to deeply equal { fieldType: 'string', …(5) }
 ✓ test/api/attribute-types.test.ts > Attribute Type Detection > getAttributeTypeInfo > should handle missing metadata gracefully 1ms
 × test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for email fields 1ms
   → expected { type: 'string', …(3) } to deeply equal { Object (type, required, ...) }
 × test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for URL fields 1ms
   → expected { type: 'string', …(3) } to have property "pattern" with value '^https?://'
 × test/api/attribute-types.test.ts > Attribute Type Detection > getFieldValidationRules > should generate validation rules for select fields with options 0ms
   → expected { type: 'string', …(3) } to have property "enum" with value [ 'active', 'inactive', 'pending' ]
stdout | test/api/advanced-search.test.ts > Advanced Search API Tests
Running API integration tests with provided API key

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should return companies matching a simple name filter
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should handle OR logic with multiple conditions
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should handle company-specific attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should throw appropriate error for invalid filter structure
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should throw appropriate error for invalid condition
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should throw error for unsupported resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle cached 404 responses
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle 404 errors and cache them
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle task retrieval errors and cache 404s
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Auth Error Handling > should re-throw auth errors without caching
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Rate Limit Error Handling > should re-throw rate limit errors without caching
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Legitimate 404 Error Handling > should cache legitimate 404 errors and convert to structured response
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Non-HTTP Error Handling > should handle TypeError exceptions without masking as 404
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should throw error for unsupported resource type 2ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle cached 404 responses 1ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle 404 errors and cache them 0ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > getRecordDetails - error cases > should handle task retrieval errors and cache 404s 2ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Auth Error Handling > should re-throw auth errors without caching 1ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Rate Limit Error Handling > should re-throw rate limit errors without caching 0ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Legitimate 404 Error Handling > should cache legitimate 404 errors and convert to structured response 0ms
 ✓ test/services/UniversalRetrievalService-validation.test.ts > UniversalRetrievalService > Non-HTTP Error Handling > should handle TypeError exceptions without masking as 404 0ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should return companies matching a simple name filter 3ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should handle OR logic with multiple conditions 0ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should handle company-specific attributes 0ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should throw appropriate error for invalid filter structure 1ms
stdout | test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should include Lists in the registered resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should handle ListResourcesRequest for Lists type
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should handle ReadResourceRequest for a specific list
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getLists > should retrieve all lists in the workspace
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getLists > should filter lists by object type
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getListDetails > should retrieve details for a specific list
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > createList > should create a new list
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > createList > should require name and parent_object
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > updateList > should validate list ID
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > deleteList > should validate list ID
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > searchLists > should search lists by query
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getListAttributes > should retrieve list attributes schema
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > search-records with object="lists" > should work with lists as object type
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > get-record-details for lists > should retrieve list details using record tools
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > create-record for lists > should accept lists as object type
[MockState] Cleared 0 mock companies from storage

 ✓ test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should include Lists in the registered resource types 1ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should handle ListResourcesRequest for Lists type 1ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Resource Registration > should handle ReadResourceRequest for a specific list 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getLists > should retrieve all lists in the workspace 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getLists > should filter lists by object type 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getListDetails > should retrieve details for a specific list 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > createList > should create a new list 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > createList > should require name and parent_object 1ms
 ↓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > updateList > should update an existing list
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > updateList > should validate list ID 1ms
 ↓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > deleteList > should delete a list
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > deleteList > should validate list ID 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > searchLists > should search lists by query 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Lists CRUD Operations > getListAttributes > should retrieve list attributes schema 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > search-records with object="lists" > should work with lists as object type 0ms
 ✓ test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > get-record-details for lists > should retrieve list details using record tools 0ms
stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > System Health Checks > should validate test environment setup
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should create records across different resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > System Health Checks > should validate basic API connectivity
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test companies for task and note testing
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should load E2E configuration successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should validate critical configuration fields
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should generate unique test identifiers
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should create valid test company data
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should create valid test person data
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should validate test data integrity
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > E2E Assertions Smoke Tests > should validate assertion utilities
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Infrastructure Integration > should validate end-to-end test pipeline readiness
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Infrastructure Integration > should validate minimal tool integration
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate basic API connectivity
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate test environment setup
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate core resource types accessibility
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > System Health Checks > should validate test environment setup 13ms
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > System Health Checks > should validate basic API connectivity 4ms
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should load E2E configuration successfully 0ms
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should validate critical configuration fields 0ms
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Configuration Smoke Tests > should generate unique test identifiers 0ms
 × test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should create valid test company data 1ms
   → expected undefined to be defined
 × test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should create valid test person data 2ms
   → expected 'e2e_test_person_1756513007720_1ybo7r.…' to contain '@e2e-test.example.com'
 × test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Test Data Factory Validation > should validate test data integrity 0ms
   → E2ETestDataValidator.validateCompany is not a function
 × test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > E2E Assertions Smoke Tests > should validate assertion utilities 2ms
   → expected [Function] to not throw an error but 'AssertionError: Expected MCP tool res…' was thrown
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Infrastructure Integration > should validate end-to-end test pipeline readiness 5ms
 ✓ test/e2e/suites/infrastructure-validation.e2e.test.ts > Infrastructure Validation - Smoke Tests > Infrastructure Integration > should validate minimal tool integration 24ms
stdout | test/e2e/suites/record-management-search.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 📡 auto-backup env with Radar: https://dotenvx.com/radar

stdout | test/e2e/suites/record-management-relationships.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

stdout | test/performance/regression.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  override existing env vars with { override: true }
Performance regression testing with LOCAL budgets (multiplier: 1x)

stdout | test/e2e/suites/record-management-search.e2e.test.ts > Record Management E2E – Search > searches records across resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should handle concurrent cross-resource operations
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates record relationships across types
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should create records across different resource types
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513008563_nbwa5d",
          "full_name": "Test TEST_person_1756513008563_nbwa5d"
        }
      ],
      "email_addresses": [
        "test_person_1756513008563_t9zim7.1756513008563nwwpua@example.com"
      ]
    }
  }
}

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513008598_48enj4",
          "full_name": "Test TEST_person_1756513008598_48enj4"
        }
      ],
      "email_addresses": [
        "test_person_1756513008598_ea6r3k.175651300859804ncj1@example.com"
      ]
    }
  }
}

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "E2E_TEST_person_1756513008625_t8gwrd",
          "full_name": "Test E2E_TEST_person_1756513008625_t8gwrd"
        }
      ],
      "email_addresses": [
        "e2e_test_person_1756513008625_bvau2u.1756513008625i1hzx3@example.com"
      ]
    }
  }
}

stdout | test/performance/regression.test.ts > Performance Regression Tests
Created test record: 92d40a7c-61da-43fa-a1d4-38a689fec4cb

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for invalid ID format within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for invalid ID format within budget
404 (invalid format) response time: 1ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for non-existent valid ID within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for non-existent valid ID within budget
404 (non-existent) response time: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should cache 404 responses for faster subsequent requests
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should cache 404 responses for faster subsequent requests
404 cache performance: First: 0ms, Second: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should complete search within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should complete search within budget
Search operation time: 0ms (2 results)

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should handle pagination efficiently
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should handle pagination efficiently
Paginated search time: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should validate parameters quickly
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should validate parameters quickly
Parameter validation time: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should get record details within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should get record details within budget
Get details time: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should update record within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should update record within budget
Update operation time: 1ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should create record within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates record relationships across types
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513008869_2r2ol2",
          "full_name": "Test TEST_person_1756513008869_2r2ol2"
        }
      ],
      "email_addresses": [
        "test_person_1756513008869_x5xern.17565130088694lc4j1@example.com"
      ]
    }
  }
}

 ✓ test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for invalid ID format within budget 2ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should return 404 for non-existent valid ID within budget 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > 404 Response Performance > should cache 404 responses for faster subsequent requests 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should complete search within budget 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should handle pagination efficiently 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > Search Operation Performance > should validate parameters quickly 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should get record details within budget 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should update record within budget 1ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should create records across different resource types 1463ms
stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should retrieve record details across resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should retrieve record details across resource types
[MockState] Retrieved mock company: 6c4c801d-b1c2-4027-bf00-57ed98c6a205 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should retrieve record details across resource types
[MockState] Retrieved mock company: 6cbe4dab-7c8c-40e3-b7a9-21849b162701 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should update records with universal patterns
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should update records with universal patterns
[MockState] Stored mock company: 6c4c801d-b1c2-4027-bf00-57ed98c6a205 {
  storedValues: { description: [32m'Updated via universal record management'[39m },
  totalStoredCompanies: [33m1[39m
}

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should handle bulk record operations
[MockState] Cleared 1 mock companies from storage

 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test companies for task and note testing 1502ms
stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test people for task assignment and note management
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test people for task assignment and note management
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513009219_hvg2tr",
          "full_name": "Test TEST_person_1756513009219_hvg2tr"
        }
      ],
      "email_addresses": [
        "test_person_1756513009219_hhhloz.1756513009219r56ekq@example.com"
      ]
    }
  }
}

 × test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should retrieve record details across resource types 12ms
   → Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should update records with universal patterns 5ms
stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle missing required parameters gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate resource_type parameter values
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle invalid record IDs gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle invalid record IDs gracefully
[MockState] Retrieved mock company: 00000000-0000-0000-0000-000000000000 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate limit parameters
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle malformed filter objects
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate email format in person creation
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle extremely long text values
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle missing required parameters gracefully 4ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate resource_type parameter values 1ms
 × test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle invalid record IDs gracefully 6ms
   → Expected MCP tool response to indicate error: expected false to be true // Object.is equality
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate limit parameters 1ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle malformed filter objects 2ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should validate email format in person creation 5ms
stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle notes with special characters
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates record relationships across types 1321ms
stdout | test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates data consistency across operations
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle notes with Unicode and emoji
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle long content notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle HTML formatted content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle minimal content notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create a complete sales process note set
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create customer success journey notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create project management notes with markdown
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle invalid company ID gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle invalid person ID gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should validate required fields for company notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle notes retrieval for non-existent records
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle empty content gracefully
[MockState] Cleared 0 mock companies from storage

 × test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle notes with special characters 15ms
   → expected 'Note with special characters: áéíóú ñ…' to contain 'Cupcake chocolate bear claw chocolate…'
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle notes with Unicode and emoji 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle long content notes 1ms
 × test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle HTML formatted content 1ms
   → expected 'HTML Content Test This note contains …' to contain '<h2>HTML Content Test</h2>'
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Note Content and Format Validation > should handle minimal content notes 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create a complete sales process note set 2ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create customer success journey notes 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Complex Note Scenarios > should create project management notes with markdown 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle invalid company ID gracefully 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle invalid person ID gracefully 0ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should validate required fields for company notes 5ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle notes retrieval for non-existent records 1ms
 ✓ test/e2e/suites/notes-management/notes-validation.e2e.test.ts > Notes Validation and Complex Scenarios E2E Tests > Error Handling and Validation > should handle empty content gracefully 1ms
stdout | test/e2e/suites/error-handling-data-recovery.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should create record within budget
Create response: {
  id: {
    workspace_id: [32m'fa02d59a-674a-4e08-9fbe-4c82cbbe80d7'[39m,
    object_id: [32m'acb37e8a-bed6-4895-934a-a9e1b2cbfdbe'[39m,
    record_id: [32m'fff177f0-4194-4d1f-9718-23e7f37508fa'[39m
  },
  created_at: [32m'2025-08-30T00:16:49.279000000Z'[39m,
  web_url: [32m'https://app.attio.com/shapescale/company/fff177f0-4194-4d1f-9718-23e7f37508fa'[39m,
  values: {
    name: [ [36m[Object][39m ],
    typpe: [],
    type_persona: [],
    referrer: [],
    channel: [],
    outbound_category: [],
    trade_show_event_7: [],
    referrer_notes: [],
    record_id: [ [36m[Object][39m ],
    regions: [],
    domains: [],
    facilities: [],
    about: [],
    description: [],
    website: [],
    lead_score: [],
    services: [],
    has_weight_loss_program: [],
    has_body_contouring: [],
    body_contouring: [],
    uses_body_composition: [],
    has_before_after_photos: [],
    body_composition_technologies: [],
    uses_competitor_products: [],
    competitor_use: [],
    notes: [],
    team: [],
    main_contact: [],
    company_phone_5: [],
    categories: [],
    primary_location: [],
    logo_url: [],
    angellist: [],
    facebook: [],
    instagram: [],
    linkedin: [],
    twitter: [],
    twitter_follower_count: [],
    estimated_arr_usd: [],
    funding_raised_usd: [],
    foundation_date: [],
    employee_range: [],
    street_address: [],
    street_address_2: [],
    city: [],
    postal_code: [],
    state: [],
    country: [],
    first_calendar_interaction: [],
    last_calendar_interaction: [],
    next_calendar_interaction: [],
    first_email_interaction: [],
    last_email_interaction: [],
    first_interaction: [],
    last_interaction: [],
    next_interaction: [],
    strongest_connection_strength_legacy: [],
    strongest_connection_strength: [],
    strongest_connection_user: [],
    associated_deals: [],
    associated_workspaces: [],
    created_at: [ [36m[Object][39m ],
    created_by: [ [36m[Object][39m ],
    matching_id: [],
    google_business_name: [],
    google_website: [],
    google_review_count_7: [],
    google_rating_1: [],
    google_business_status: [],
    google_credibility_score: [],
    google_price_level: [],
    domain_confidence: [],
    google_maps_url: [],
    sequence_name: [],
    last_stage_before_won_lost: [],
    type_persona_5: []
  }
}
Create operation time: 837ms

 ✓ test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should create record within budget 838ms
stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should delete record within budget
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test people for task assignment and note management
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513009907_k2epn1",
          "full_name": "Test TEST_person_1756513009907_k2epn1"
        }
      ],
      "email_addresses": [
        "test_person_1756513009907_mi10u4.1756513009907txskk0@example.com"
      ]
    }
  }
}

 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Parameter Validation and Data Format Errors > should handle extremely long text values 565ms
stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle company not found errors
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle company not found errors
[MockState] Retrieved mock company: 11111111-1111-1111-1111-111111111111 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle person not found errors
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle task not found errors
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle list not found errors
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle note not found errors
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle errors when linking non-existent records
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle cascading tool failures
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle concurrent operation conflicts
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle concurrent operation conflicts
[MockState] Retrieved mock company: 2a706bdc-21d8-4a4f-8dd9-a033b0b3b837 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle concurrent operation conflicts
[MockState] Stored mock company: 2a706bdc-21d8-4a4f-8dd9-a033b0b3b837 { storedValues: { name: [32m'Updated Name 1'[39m }, totalStoredCompanies: [33m1[39m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle concurrent operation conflicts
[MockState] Stored mock company: 2a706bdc-21d8-4a4f-8dd9-a033b0b3b837 { storedValues: { name: [32m'Updated Name 2'[39m }, totalStoredCompanies: [33m1[39m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle batch operation partial failures
[MockState] Cleared 1 mock companies from storage

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle batch operation partial failures
[MockState] Retrieved mock company: 00000000-0000-0000-0000-000000000000 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests
Test cleanup: 2 record(s) tracked for cleanup: 2a706bdc-21d8-4a4f-8dd9-a033b0b3b837, f15a3067-f446-4bfe-943a-c14409d22025

 × test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle company not found errors 3ms
   → Expected MCP tool response to indicate error: expected false to be true // Object.is equality
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle person not found errors 1ms
 × test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle task not found errors 2ms
   → expected 'Error executing tool \'update-record\…' to match /(not found|does not exist|invalid|ca…/i
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle list not found errors 2ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Resource Not Found Scenarios > should handle note not found errors 1ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle errors when linking non-existent records 1ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle cascading tool failures 1ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle concurrent operation conflicts 8ms
 ✓ test/e2e/suites/error-handling-critical.e2e.test.ts > Critical Error Handling E2E Tests > Cross-Tool Error Propagation > should handle batch operation partial failures 2ms
stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  write to custom object with { processEnv: myObject }

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Test Data Setup > should create test companies for note testing
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates data consistency across operations
[MockState] Retrieved mock company: 41d7b922-a891-4f4c-86e2-ee72fdd5a8e1 { found: [33mfalse[39m, values: [1mnull[22m }

 ✓ test/e2e/suites/record-management-relationships.e2e.test.ts > Record Management E2E – Relationships > validates data consistency across operations 914ms
stdout | test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should delete record within budget
Delete operation time: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should track timing splits correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should track timing splits correctly
Performance Statistics: {
  operations: [33m6[39m,
  avgTotal: [32m'0ms'[39m,
  p95Total: [32m'0ms'[39m,
  avgAPI: [32m'0ms'[39m,
  avgOverhead: [32m'0ms'[39m
}

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should have acceptable p95 and p99 latencies
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should have acceptable p95 and p99 latencies
Latency percentiles - P50: 0ms, P95: 0ms, P99: 0ms

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Alerts > should generate alerts for operations exceeding budget
[MockState] Cleared 0 mock companies from storage

stdout | test/performance/regression.test.ts > Performance Regression Tests > Performance Alerts > should generate alerts for operations exceeding budget
Performance alerts check: [33mtrue[39m

 ✓ test/performance/regression.test.ts > Performance Regression Tests > CRUD Operation Performance > should delete record within budget 691ms
stdout | test/performance/regression.test.ts > Performance Regression Tests
Cleaned up test record: 92d40a7c-61da-43fa-a1d4-38a689fec4cb

Performance Report
==================
Total Operations: 6
Success Rate: 33.3%
Cache Hit Rate: 0.0%

Timing Statistics (ms)
----------------------
Average: 0
Min: 0
Max: 0
P50: 0
P95: 0
P99: 0

API vs MCP Overhead (ms)
------------------------
API Average: 0
API P95: 0
API P99: 0
MCP Average: 0
MCP P95: 0
MCP P99: 0

Budget Violations: 0

Recent Alerts
-------------

 ✓ test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should track timing splits correctly 1ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > Performance Statistics > should have acceptable p95 and p99 latencies 0ms
 ✓ test/performance/regression.test.ts > Performance Regression Tests > Performance Alerts > should generate alerts for operations exceeding budget 0ms
stdout | test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery > should handle incomplete transaction scenarios
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-crud.e2e.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Shared Test Data Setup > should create test people for task assignment and note management 1334ms
stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create a basic task
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create task with assignee
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create task linked to company record
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create high priority task
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update task status
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update task assignee
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update multiple task fields simultaneously
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Deletion and Cleanup > should delete individual tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Deletion and Cleanup > should handle deletion of non-existent task gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should create a company note with basic content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should retrieve company notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should create company note with markdown content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should handle company note creation with URI format
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create a person note with basic content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should retrieve person notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create person note with technical content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create person note with markdown formatting
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Cross-Resource Integration Workflows > should create task and note for the same company record
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Cross-Resource Integration Workflows > should demonstrate task-note workflow integration
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create a basic task 2ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create task with assignee 2ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create task linked to company record 2ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Creation and Basic Operations > should create high priority task 4ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update task status 3ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update task assignee 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Updates and Modifications > should update multiple task fields simultaneously 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Deletion and Cleanup > should delete individual tasks 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Tasks Management - Core Operations > Task Deletion and Cleanup > should handle deletion of non-existent task gracefully 7ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should create a company note with basic content 1ms
 × test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should retrieve company notes 7ms
   → Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should create company note with markdown content 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Company Notes Management > should handle company note creation with URI format 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create a person note with basic content 0ms
 × test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should retrieve person notes 1ms
   → Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create person note with technical content 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Notes Management - CRUD Operations > Person Notes Management > should create person note with markdown formatting 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Cross-Resource Integration Workflows > should create task and note for the same company record 1ms
 ✓ test/e2e/suites/core-workflows.e2e.test.ts > Core Workflows E2E Tests - Tasks & Notes > Cross-Resource Integration Workflows > should demonstrate task-note workflow integration 1ms
stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves core CRUD workflow integrity
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-crud.e2e.test.ts > Record Management E2E – CRUD > creates company and person records
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch create operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch update operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch delete operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch get operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch search operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should validate batch size limits
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should format batch results correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should format batch search results correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle missing records/record_ids for batch operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Error handling and edge cases > should handle validation errors in batch operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Error handling and edge cases > should handle empty results gracefully for batch operations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Concurrency and performance > should handle batch operations with controlled concurrency
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Test Data Setup > should create test companies for note testing 737ms
stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Test Data Setup > should create test people for note testing
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Test Data Setup > should create test people for note testing
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513010975_nglgm3",
          "full_name": "Test TEST_person_1756513010975_nglgm3"
        }
      ],
      "email_addresses": [
        "test_person_1756513010975_mvz8wn.1756513010975clohqb@example.com"
      ]
    }
  }
}

stdout | test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Concurrency and performance > should add delays between batch chunks
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch create operations 2ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch update operations 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch delete operations 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch get operations 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle batch search operations 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should validate batch size limits 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should format batch results correctly 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should format batch search results correctly 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > batch-operations tool > should handle missing records/record_ids for batch operations 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Error handling and edge cases > should handle validation errors in batch operations 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Error handling and edge cases > should handle empty results gracefully for batch operations 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Concurrency and performance > should handle batch operations with controlled concurrency 124ms
 ✓ test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery > should handle incomplete transaction scenarios 765ms
stdout | test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery > should handle error recovery gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery > should handle error recovery gracefully
[MockState] Retrieved mock company: a8154cea-c6bd-4ee8-9987-e7d871a46133 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery
Test cleanup: 1 record(s) tracked for cleanup: a8154cea-c6bd-4ee8-9987-e7d871a46133

 ✓ test/e2e/suites/error-handling-data-recovery.e2e.test.ts > Critical Error Handling E2E – Data Consistency and Recovery > should handle error recovery gracefully 15ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-batch.test.ts > Universal Advanced Operations - Batch Tests > Concurrency and performance > should add delays between batch chunks 202ms
stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should handle bulk record operations
[MockState] Retrieved mock company: bfc72ce7-b457-4b61-a62b-d3bbd235ba3c { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should handle bulk record operations
[MockState] Retrieved mock company: 8fd07ce0-e896-4f0a-b6e6-3866fb2ed0be { found: [33mfalse[39m, values: [1mnull[22m }

 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Universal Record Operations > should handle bulk record operations 2182ms
stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should filter tasks with pagination
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should cache and retrieve tasks with default TTL
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should respect custom TTL
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management-crud.e2e.test.ts > Record Management E2E – CRUD > creates company and person records
🔍 EXACT API PAYLOAD: {
  "data": {
    "values": {
      "name": [
        {
          "first_name": "Test",
          "last_name": "TEST_person_1756513011453_2iexda",
          "full_name": "Test TEST_person_1756513011453_2iexda"
        }
      ],
      "email_addresses": [
        "test_person_1756513011453_bspl1b.1756513011453dt6uvr@example.com"
      ]
    }
  }
}

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' }

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should perform advanced search successfully
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Test Data Setup > should create test people for note testing 553ms
stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should create a company note with basic content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should retrieve company notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should create company note with markdown content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should handle company note creation with URI format
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should handle pagination for company notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create a person note with basic content
[MockState] Cleared 0 mock companies from storage

 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should cache and retrieve tasks with default TTL 2ms
stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should retrieve person notes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create person note with technical content
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create person note with markdown formatting
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should create a company note with basic content 2ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should retrieve company notes 4ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should create company note with markdown content 1ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should handle company note creation with URI format 2ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Company Notes Management > should handle pagination for company notes 1ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create a person note with basic content 3ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should retrieve person notes 2ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create person note with technical content 2ms
 ✓ test/e2e/suites/notes-management/notes-crud.e2e.test.ts > Notes CRUD Operations E2E Tests > Person Notes Management > should create person note with markdown formatting 1ms
stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should generate consistent cache keys
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should clear all tasks cache
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should clear only expired cache entries
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves core CRUD workflow integrity
[MockState] Retrieved mock company: 5a6a8939-afd5-457d-b9da-8b808acb1f9c { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves core CRUD workflow integrity
[MockState] Stored mock company: 5a6a8939-afd5-457d-b9da-8b808acb1f9c {
  storedValues: { description: [32m'Updated for CRUD workflow test'[39m },
  totalStoredCompanies: [33m1[39m
}

stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves core CRUD workflow integrity
[MockState] Retrieved mock company: 5a6a8939-afd5-457d-b9da-8b808acb1f9c {
  found: [33mtrue[39m,
  values: { description: [32m'Updated for CRUD workflow test'[39m }
}

 ✓ test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves core CRUD workflow integrity 817ms
stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves cross-resource relationship integrity
[MockState] Cleared 1 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should format advanced search results with context
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should handle advanced search errors
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should search company to people relationships
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should search people to company relationships
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should handle unsupported task relationships with helpful error
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should format relationship results correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > Search tool validation and edge cases > should handle validation errors in search tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > Search tool validation and edge cases > should handle empty search results gracefully
[MockState] Cleared 0 mock companies from storage

 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should respect custom TTL 112ms
 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should generate consistent cache keys 1ms
 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should clear all tasks cache 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should perform advanced search successfully 126ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should format advanced search results with context 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > advanced-search tool > should handle advanced search errors 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should search company to people relationships 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should search people to company relationships 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should handle unsupported task relationships with helpful error 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > search-by-relationship tool > should format relationship results correctly 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > Search tool validation and edge cases > should handle validation errors in search tools 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-search.test.ts > Universal Advanced Operations - Search Tests > Search tool validation and edge cases > should handle empty search results gracefully 4ms
stdout | src/services/CachingService.test.ts > CachingService > Task Caching > should provide cache statistics
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > 404 Response Caching > should check for cached 404 responses
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with default TTL
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with custom TTL
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should load data when cache is empty
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should return cached data when available
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should handle data loader errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should use custom cache key and TTL
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should reload data when cache expires
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Edge Cases > should handle empty arrays in cache
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Edge Cases > should handle undefined cache keys gracefully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Edge Cases > should handle concurrent cache operations
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Performance Characteristics > should handle large datasets efficiently
[MockState] Cleared 0 mock companies from storage

stdout | src/services/CachingService.test.ts > CachingService > Performance Characteristics > should maintain performance with multiple cache keys
[MockState] Cleared 0 mock companies from storage

 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should clear only expired cache entries 101ms
 ✓ src/services/CachingService.test.ts > CachingService > Task Caching > should provide cache statistics 0ms
 ✓ src/services/CachingService.test.ts > CachingService > 404 Response Caching > should check for cached 404 responses 0ms
 ✓ src/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with default TTL 1ms
 ✓ src/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with custom TTL 1ms
 ✓ src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should load data when cache is empty 0ms
 ✓ src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should return cached data when available 0ms
 ✓ src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should handle data loader errors gracefully 1ms
 ✓ src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should use custom cache key and TTL 0ms
 ✓ src/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should reload data when cache expires 61ms
 ✓ src/services/CachingService.test.ts > CachingService > Edge Cases > should handle empty arrays in cache 0ms
 ✓ src/services/CachingService.test.ts > CachingService > Edge Cases > should handle undefined cache keys gracefully 0ms
 ✓ src/services/CachingService.test.ts > CachingService > Edge Cases > should handle concurrent cache operations 0ms
 ✓ src/services/CachingService.test.ts > CachingService > Performance Characteristics > should handle large datasets efficiently 0ms
 ✓ src/services/CachingService.test.ts > CachingService > Performance Characteristics > should maintain performance with multiple cache keys 0ms
stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should cache and retrieve tasks with default TTL
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should respect custom TTL
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should cache and retrieve tasks with default TTL 2ms
stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should generate consistent cache keys
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should clear all tasks cache
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should clear only expired cache entries
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search companies by notes content
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should respect custom TTL 110ms
 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should generate consistent cache keys 1ms
 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should clear all tasks cache 0ms
stdout | test/services/CachingService.test.ts > CachingService > Task Caching > should provide cache statistics
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > 404 Response Caching > should check for cached 404 responses
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with default TTL
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with custom TTL
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should load data when cache is empty
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should return cached data when available
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should handle data loader errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should use custom cache key and TTL
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should reload data when cache expires
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > Schema Validation with Real API > should validate against real company attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > Schema Validation with Real API > should detect invalid fields against real schema
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > Performance Monitoring with Real Operations > should track real API call performance
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Edge Cases > should handle empty arrays in cache
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Edge Cases > should handle undefined cache keys gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Edge Cases > should handle concurrent cache operations
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Performance Characteristics > should handle large datasets efficiently
[MockState] Cleared 0 mock companies from storage

stdout | test/services/CachingService.test.ts > CachingService > Performance Characteristics > should maintain performance with multiple cache keys
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should clear only expired cache entries 103ms
 ✓ test/services/CachingService.test.ts > CachingService > Task Caching > should provide cache statistics 0ms
 ✓ test/services/CachingService.test.ts > CachingService > 404 Response Caching > should check for cached 404 responses 1ms
 ✓ test/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with default TTL 1ms
 ✓ test/services/CachingService.test.ts > CachingService > 404 Response Caching > should cache 404 responses with custom TTL 1ms
 ✓ test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should load data when cache is empty 1ms
 ✓ test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should return cached data when available 0ms
 ✓ test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should handle data loader errors gracefully 1ms
 ✓ test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should use custom cache key and TTL 0ms
 ✓ test/services/CachingService.test.ts > CachingService > getOrLoadTasks Integration > should reload data when cache expires 61ms
 ✓ test/services/CachingService.test.ts > CachingService > Edge Cases > should handle empty arrays in cache 0ms
 ✓ test/services/CachingService.test.ts > CachingService > Edge Cases > should handle undefined cache keys gracefully 0ms
 ✓ test/services/CachingService.test.ts > CachingService > Edge Cases > should handle concurrent cache operations 0ms
 ✓ test/services/CachingService.test.ts > CachingService > Performance Characteristics > should handle large datasets efficiently 0ms
 ✓ test/services/CachingService.test.ts > CachingService > Performance Characteristics > should maintain performance with multiple cache keys 0ms
stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search people by notes content
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search people by activity content
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should handle unsupported interaction content search
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should format content search results correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should handle invalid resource types in content search
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by creation date
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by modification date
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by last interaction with date validation
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should handle missing date range for last interaction
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should handle unsupported timeframe for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should format timeframe results with date info
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > Content and Timeframe validation and edge cases > should handle validation errors in content and timeframe tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > Content and Timeframe validation and edge cases > should handle empty results gracefully
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search companies by notes content 117ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search people by notes content 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should search people by activity content 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should handle unsupported interaction content search 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should format content search results correctly 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-content tool > should handle invalid resource types in content search 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by creation date 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by modification date 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should search people by last interaction with date validation 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should handle missing date range for last interaction 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should handle unsupported timeframe for companies 0ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > search-by-timeframe tool > should format timeframe results with date info 28ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > Content and Timeframe validation and edge cases > should handle validation errors in content and timeframe tools 1ms
 ✓ test/handlers/tool-configs/universal/advanced-operations-content.test.ts > Universal Advanced Operations - Content & Timeframe Tests > Content and Timeframe validation and edge cases > should handle empty results gracefully 0ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Schema Validation with Real API > should validate against real company attributes 2ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Schema Validation with Real API > should detect invalid fields against real schema 1ms
stdout | test/real-api-validation.test.ts > Real API Validation Tests > Performance Monitoring with Real Operations > should detect slow operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > basic filter creation > should create a correct path-based filter structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map equals condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map contains condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map starts_with condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map ends_with condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map greater_than condition
[MockState] Cleared 0 mock companies from storage

 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Performance Monitoring with Real Operations > should track real API call performance 101ms
stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map less_than condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map is_empty condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map is_not_empty condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map in condition with array value
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map in condition with single value (converted to array)
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should create special filter for record_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should create special filter for id attribute
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle name attribute with equals condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle name attribute with contains condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle email_addresses attribute with contains condition
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > basic filter creation > should create a correct path-based filter structure 6ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map equals condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map contains condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map starts_with condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map ends_with condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map greater_than condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map less_than condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map is_empty condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map is_not_empty condition 1ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map in condition with array value 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > condition mapping > should correctly map in condition with single value (converted to array) 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should create special filter for record_id 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should create special filter for id attribute 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle name attribute with equals condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle name attribute with contains condition 0ms
 ✓ test/utils/path-based-filter.test.ts > createPathBasedFilter > special attribute handling > should handle email_addresses attribute with contains condition 0ms
 ✓ test/e2e/suites/record-management-crud.e2e.test.ts > Record Management E2E – CRUD > creates company and person records 1451ms
stdout | test/real-api-validation.test.ts > Real API Validation Tests > Resource Mapping with Real Resources > should generate correct paths for all resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > Resource Mapping with Real Resources > should handle custom object types correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should normalize real-world name formats
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should normalize email formats correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should validate complex email formats
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > End-to-End Validation Flow > should validate a complete company creation request
[MockState] Cleared 0 mock companies from storage

stdout | test/real-api-validation.test.ts > Real API Validation Tests > End-to-End Validation Flow > should validate a complete people creation request with normalization
[MockState] Cleared 0 mock companies from storage

 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Performance Monitoring with Real Operations > should detect slow operations 153ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Resource Mapping with Real Resources > should generate correct paths for all resource types 1ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > Resource Mapping with Real Resources > should handle custom object types correctly 2ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should normalize real-world name formats 1ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should normalize email formats correctly 1ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > People Normalization with Various Formats > should validate complex email formats 2ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > End-to-End Validation Flow > should validate a complete company creation request 1ms
 ✓ test/real-api-validation.test.ts > Real API Validation Tests > End-to-End Validation Flow > should validate a complete people creation request with normalization 1ms
stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Basic Operations > should track operation timing
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Basic Operations > should track timing splits
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > 404 Caching > should cache 404 responses
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > 404 Caching > should expire cached 404 responses
[MockState] Cleared 0 mock companies from storage

 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Basic Operations > should track operation timing 14ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Basic Operations > should track timing splits 40ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > 404 Caching > should cache 404 responses 1ms
stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Performance Budgets > should detect budget violations
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Statistics > should calculate performance statistics
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Statistics > should calculate percentiles correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Report Generation > should generate a performance report
[MockState] Cleared 0 mock companies from storage

stdout | test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Report Generation > should export metrics as JSON
[MockState] Cleared 0 mock companies from storage

 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > 404 Caching > should expire cached 404 responses 62ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Performance Budgets > should detect budget violations 0ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Statistics > should calculate performance statistics 0ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Statistics > should calculate percentiles correctly 0ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Report Generation > should generate a performance report 1ms
 ✓ test/middleware/performance-enhanced.test.ts > Enhanced Performance Tracker > Report Generation > should export metrics as JSON 1ms
stdout | test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should create a records object record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field validation errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field mapping errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field validation errors 5ms
 ✓ test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should create a records object record 131ms
 ✓ test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should create a deals record with defaults validation 1ms
 ✓ test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should create a task record with field transformation 1ms
 ✓ test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should handle deals with stage validation failure and retry 0ms
 ✓ test/services/UniversalCreateService-objects-deals-tasks.test.ts > UniversalCreateService > createRecord - objects/deals/tasks > should handle task creation with empty content (E2E mode) 1ms
stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle enhanced validation when enabled
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle company creation with null result
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle company creation with invalid ID structure
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle attribute not found errors with suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle uniqueness constraint errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle unsupported resource type with correction
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle unsupported resource type without correction
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle task creation errors with enhanced error handling
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field validation warnings and suggestions logging
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field mapping errors 122ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle enhanced validation when enabled 1ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle company creation with null result 1ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle company creation with invalid ID structure 0ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle attribute not found errors with suggestions 0ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle uniqueness constraint errors 0ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle unsupported resource type with correction 1ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle unsupported resource type without correction 1ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle task creation errors with enhanced error handling 3ms
 ✓ test/services/UniversalCreateService-validation-errors.test.ts > UniversalCreateService > createRecord - validation/errors > should handle field validation warnings and suggestions logging 0ms
stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles malformed JSON-like queries gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles boundary value conditions for search safely
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > prevents infinite loops and long-running searches
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles resource exhaustion gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > maintains system stability under error conditions
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > maintains system stability under error conditions
[MockState] Stored mock company: non-existent-id { storedValues: { name: [32m'Update test'[39m }, totalStoredCompanies: [33m1[39m }

stdout | test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > preserves API contract consistency (search + details)
[MockState] Cleared 1 mock companies from storage

 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles malformed JSON-like queries gracefully 14ms
 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles boundary value conditions for search safely 10ms
 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > prevents infinite loops and long-running searches 7ms
 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > handles resource exhaustion gracefully 29ms
 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > maintains system stability under error conditions 17ms
 ✓ test/e2e/suites/regression-prevention-search-stability.e2e.test.ts > Regression Prevention – Search & Stability > preserves API contract consistency (search + details) 2ms
stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should pass for valid limit values
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should pass for undefined limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for non-integer limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for zero or negative limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for limit exceeding maximum
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should respect custom maximum limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should call performance tracker on error when perfId provided
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should pass for valid offset values
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should pass for undefined offset
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for non-integer offset
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for negative offset
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for offset exceeding maximum
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should respect custom maximum offset
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should validate both limit and offset together
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should throw if either parameter is invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should pass for empty parameters
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should create validation error with default resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should create validation error with custom resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should include valid ISO timestamp
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should return suggestions unchanged when under limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should truncate suggestions when over default limit
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should respect custom max count
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > validateUniversalOperation > should return valid for successful validation
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should handle empty strings gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should handle very large suggestion arrays efficiently
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should preserve original arrays when truncating
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should pass for valid limit values 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should pass for undefined limit 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for non-integer limit 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for zero or negative limit 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should throw for limit exceeding maximum 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should respect custom maximum limit 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateLimitParameter > should call performance tracker on error when perfId provided 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should pass for valid offset values 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should pass for undefined offset 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for non-integer offset 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for negative offset 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should throw for offset exceeding maximum 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateOffsetParameter > should respect custom maximum offset 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should validate both limit and offset together 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should throw if either parameter is invalid 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validatePaginationParameters > should pass for empty parameters 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should create validation error with default resource type 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should create validation error with custom resource type 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > createValidationError > should include valid ISO timestamp 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should return suggestions unchanged when under limit 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should truncate suggestions when over default limit 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > truncateSuggestions > should respect custom max count 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > validateUniversalOperation > should return valid for successful validation 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should handle empty strings gracefully 0ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should handle very large suggestion arrays efficiently 1ms
 ✓ test/services/ValidationService-parameters.test.ts > ValidationService > Edge Cases and Error Handling > should preserve original arrays when truncating 0ms
stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in development environment
[UNIT] Created mock company: 5e3e72c4-dec4-4a88-83a6-812e39c9b0e7 {
  name: [32m'Mock Company 5'[39m,
  domain: [32m'mock-company-5.example.com'[39m,
  industry: [ { value: [32m'Media & Entertainment'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in development environment
[UNIT] Created mock company: a5fbd18e-211c-46d1-8b34-be43e6d6f539 {
  name: [32m'Mock Company 5'[39m,
  domain: [32m'mock-company-5.example.com'[39m,
  industry: [ { value: [32m'Healthcare'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in development environment
[UNIT] Created mock company: 4356ef66-bc28-42ce-9497-c516c9ad5fc7 {
  name: [32m'Mock Company 4356'[39m,
  domain: [32m'mock-company-4356.example.com'[39m,
  industry: [ { value: [32m'Media & Entertainment'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in development environment
[UNIT] Created mock company: 9cfedf0b-2803-4a2f-9d79-460f1038d8d4 {
  name: [32m'Mock Company 9'[39m,
  domain: [32m'mock-company-9.example.com'[39m,
  industry: [ { value: [32m'Media & Entertainment'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in development environment
[UNIT] Created mock company: c17b4f4b-c2ad-4910-b630-810fe6329f81 {
  name: [32m'Mock Company 17'[39m,
  domain: [32m'mock-company-17.example.com'[39m,
  industry: [ { value: [32m'Real Estate'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in development environment
[UNIT] Created mock company: eda6e66a-2eb2-4949-ac7f-2f14af0539a9 {
  name: [32m'Mock Company 6'[39m,
  domain: [32m'mock-company-6.example.com'[39m,
  industry: [ { value: [32m'Transportation'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in development environment
[UNIT] Created mock company: f6fc839c-9d1e-4d56-bc35-a59fa19db39d {
  name: [32m'Mock Company 6'[39m,
  domain: [32m'mock-company-6.example.com'[39m,
  industry: [ { value: [32m'Manufacturing'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in development environment
[UNIT] Created mock company: 310c9828-be72-49b8-b986-772a265d8057 {
  name: [32m'Mock Company 310'[39m,
  domain: [32m'mock-company-310.example.com'[39m,
  industry: [ { value: [32m'Energy'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in development environment
[UNIT] Created mock company: 97311380-2025-4bc0-a8d5-d1ad31c52866 {
  name: [32m'Mock Company 1380'[39m,
  domain: [32m'mock-company-1380.example.com'[39m,
  industry: [ { value: [32m'Transportation'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in development environment
[UNIT] Created mock company: a6dce371-c3bb-4d43-ae58-79d345a6ad39 {
  name: [32m'Mock Company 6'[39m,
  domain: [32m'mock-company-6.example.com'[39m,
  industry: [ { value: [32m'Transportation'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in development environment
[UNIT] Created mock company: bfe6c6a7-e982-44ac-ba30-9147d21c268d {
  name: [32m'Mock Company 6'[39m,
  domain: [32m'mock-company-6.example.com'[39m,
  industry: [ { value: [32m'Healthcare'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in development environment
[UNIT] Created mock company: 8a8c8feb-b999-45a9-bae6-a498319ccad6 {
  name: [32m'Mock Company 8'[39m,
  domain: [32m'mock-company-8.example.com'[39m,
  industry: [ { value: [32m'Manufacturing'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in development environment
[UNIT] Created mock company: d4cbc807-6c05-4a11-be60-0d15db13b706 {
  name: [32m'Mock Company 4'[39m,
  domain: [32m'mock-company-4.example.com'[39m,
  industry: [ { value: [32m'Technology'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in development environment
[UNIT] Created mock company: 70176556-201e-43fb-840a-6a05a7d2cab3 {
  name: [32m'Mock Company 6556'[39m,
  domain: [32m'mock-company-6556.example.com'[39m,
  industry: [ { value: [32m'Retail'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in development environment
[UNIT] Created mock company: 8b7b67a0-d88a-4217-873f-b9b28729b95b {
  name: [32m'Mock Company 8'[39m,
  domain: [32m'mock-company-8.example.com'[39m,
  industry: [ { value: [32m'Retail'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for people
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for lists
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for records
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for deals
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in production environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in development environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in development environment
[UNIT] Created mock company: 37c13e47-8ef5-465b-a686-321d2df61ff7 {
  name: [32m'Mock Company 37'[39m,
  domain: [32m'mock-company-37.example.com'[39m,
  industry: [ { value: [32m'Manufacturing'[39m } ]
}

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in undefined environment
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > search-records should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-record-details should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > create-record should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > update-record should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > delete-record should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-attributes should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-detailed-info should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > advanced-search should provide consistent output across environments
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > search-records should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > search-records should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-record-details should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-record-details should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > create-record should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > create-record should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > update-record should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > update-record should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > delete-record should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > delete-record should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-attributes should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-attributes should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-detailed-info should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-detailed-info should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > advanced-search should handle null/undefined data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > advanced-search should handle empty data gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > search-records should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-record-details should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > create-record should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > update-record should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > delete-record should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-attributes should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-detailed-info should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

stdout | test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > advanced-search should properly handle LISTS resource type added in Phase 2
[MockState] Cleared 0 mock companies from storage

 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for companies 7ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in development environment 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > search-records formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-record-details formatResult > should return string type in undefined environment 2ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for people 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for lists 2ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > create-record formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > update-record formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > delete-record formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in production environment 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-attributes formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > get-detailed-info formatResult > should return string type in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for people 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for lists 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for records 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should always return string type for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in development environment 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > String Return Type Contract > advanced-search formatResult > should return string type in undefined environment 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for lists 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > search-records formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in production environment 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-record-details formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > create-record formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > update-record formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > delete-record formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for records 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-attributes formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > get-detailed-info formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for companies 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for people 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for lists 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for records 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for tasks 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string for deals 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in test environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in production environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in development environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > JSON Output Prevention > advanced-search formatResult > should never return JSON string in undefined environment 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > search-records should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-record-details should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > create-record should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > update-record should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > delete-record should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-attributes should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > get-detailed-info should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Consistent Output Format > advanced-search should provide consistent output across environments 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > search-records should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > search-records should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-record-details should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-record-details should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > create-record should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > create-record should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > update-record should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > update-record should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > delete-record should handle null/undefined data gracefully 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > delete-record should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-attributes should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-attributes should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-detailed-info should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > get-detailed-info should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > advanced-search should handle null/undefined data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Error Handling Consistency > advanced-search should handle empty data gracefully 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support people resource type 3ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > search-records should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-record-details should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support companies resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support records resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > create-record should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > update-record should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > delete-record should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-attributes should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support companies resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support people resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support lists resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support records resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support tasks resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > get-detailed-info should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support companies resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support people resource type 7ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support lists resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support records resource type 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support tasks resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > All Resource Types Support > advanced-search should support deals resource type 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > search-records should properly handle LISTS resource type added in Phase 2 1ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-record-details should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > create-record should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > update-record should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > delete-record should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-attributes should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > get-detailed-info should properly handle LISTS resource type added in Phase 2 0ms
 ✓ test/formatResult-contract-regression.test.ts > formatResult Contract Regression Tests > Phase 2 LISTS Resource Type Regression > advanced-search should properly handle LISTS resource type added in Phase 2 0ms
stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should return unknown resource type as-is
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getSingularResourceType > should return singular form for all resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > isValidResourceType > should validate known resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > isValidResourceType > should reject unknown resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getPluralResourceType > should return plural form for all resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > supportsObjectRecordsApi > should return true for resource types that support object records API
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > supportsObjectRecordsApi > should return false for tasks (uses different API)
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getApiEndpoint > should return correct API endpoints for all resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getApiEndpoint > should throw error for unknown resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > requiresSpecialHandling > should return true for resource types that require special handling
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > requiresSpecialHandling > should return false for standard resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should normalize singular forms to plural UniversalResourceType
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should normalize plural forms to UniversalResourceType
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should handle case variations and whitespace
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should return existing valid UniversalResourceType
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should return null for unknown resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getResourceTypeDescription > should return appropriate descriptions for all resource types
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format companies resource type 1ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format people resource type 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format lists resource type 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format records resource type 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format deals resource type 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should format tasks resource type 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > formatResourceType > should return unknown resource type as-is 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getSingularResourceType > should return singular form for all resource types 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > isValidResourceType > should validate known resource types 1ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > isValidResourceType > should reject unknown resource types 1ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getPluralResourceType > should return plural form for all resource types 1ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > supportsObjectRecordsApi > should return true for resource types that support object records API 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > supportsObjectRecordsApi > should return false for tasks (uses different API) 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getApiEndpoint > should return correct API endpoints for all resource types 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getApiEndpoint > should throw error for unknown resource type 1ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > requiresSpecialHandling > should return true for resource types that require special handling 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > requiresSpecialHandling > should return false for standard resource types 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should normalize singular forms to plural UniversalResourceType 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should normalize plural forms to UniversalResourceType 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should handle case variations and whitespace 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should return existing valid UniversalResourceType 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > normalizeResourceType > should return null for unknown resource types 0ms
 ✓ test/services/UniversalUtilityService-resource-types.test.ts > UniversalUtilityService > getResourceTypeDescription > should return appropriate descriptions for all resource types 0ms
stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle properly wrapped arguments (standard MCP format) with universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle unwrapped arguments (Issue #344 format) with universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle tools with minimal arguments using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle multiple unwrapped arguments with universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should preserve properly wrapped arguments without modification using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should wrap loose arguments correctly using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should handle request with only name parameter using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should handle malformed requests gracefully using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should not wrap arguments if they already exist using universal tools
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should validate request structure
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should reject oversized arguments using universal tools
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle properly wrapped arguments (standard MCP format) with universal tools 1ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle unwrapped arguments (Issue #344 format) with universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle tools with minimal arguments using universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should handle multiple unwrapped arguments with universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should preserve properly wrapped arguments without modification using universal tools 1ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Argument Format Normalization > should wrap loose arguments correctly using universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should handle request with only name parameter using universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should handle malformed requests gracefully using universal tools 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should not wrap arguments if they already exist using universal tools 1ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should validate request structure 0ms
 ✓ test/handlers/tools/argument-compatibility.test.ts > MCP Tool Argument Compatibility (Issue #344) > Edge Cases > should reject oversized arguments using universal tools 11ms
stdout | test/e2e/suites/error-handling-message-consistency.e2e.test.ts > Critical Error Handling E2E – Error Message Consistency > should provide consistent error formats across tools
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should return false when user.json does not exist
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should return false when user.json has correct mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should detect outdated ZIP and Postal Code mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should detect only the outdated mappings in partially outdated config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should handle malformed JSON gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should handle missing attributes structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should create a timestamped backup successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should not create backup directory if it already exists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should handle backup creation errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should handle file copy errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should succeed when no user.json exists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should succeed when no migration is needed
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should successfully migrate outdated config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should fail when backup creation fails
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should handle write errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should pass validation when no user.json exists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should pass validation when config is up to date
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should fail validation when outdated mappings remain
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should perform dry run without making changes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should complete full migration workflow successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should detect validation failures after migration
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should handle config without common mappings section
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should handle completely empty config file
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should preserve other mappings during migration
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-message-consistency.e2e.test.ts > Critical Error Handling E2E – Error Message Consistency > should provide consistent error formats across tools
[MockState] Retrieved mock company: 00000000-0000-0000-0000-000000000000 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/error-handling-message-consistency.e2e.test.ts > Critical Error Handling E2E – Error Message Consistency > should provide helpful error messages
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should return false when user.json does not exist 3ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should return false when user.json has correct mappings 3ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should detect outdated ZIP and Postal Code mappings 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should detect only the outdated mappings in partially outdated config 8ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should handle malformed JSON gracefully 3ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > detectMigrationNeeds > should handle missing attributes structure 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should create a timestamped backup successfully 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should not create backup directory if it already exists 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should handle backup creation errors 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > createBackup > should handle file copy errors 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should succeed when no user.json exists 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should succeed when no migration is needed 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should successfully migrate outdated config 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should fail when backup creation fails 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > applyMigration > should handle write errors gracefully 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should pass validation when no user.json exists 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should pass validation when config is up to date 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > validateMigration > should fail validation when outdated mappings remain 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should perform dry run without making changes 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should complete full migration workflow successfully 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > migrateUserConfig > should detect validation failures after migration 1ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should handle config without common mappings section 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should handle completely empty config file 0ms
 ✓ test/utils/config-migration.test.ts > Config Migration Utility > edge cases and error handling > should preserve other mappings during migration 0ms
 ✓ test/e2e/suites/error-handling-message-consistency.e2e.test.ts > Critical Error Handling E2E – Error Message Consistency > should provide consistent error formats across tools 31ms
 ✓ test/e2e/suites/error-handling-message-consistency.e2e.test.ts > Critical Error Handling E2E – Error Message Consistency > should provide helpful error messages 4ms
stdout | test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a company record
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a company record 14ms
 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a person record with email validation 4ms
 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a list record and convert format 2ms
 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a records object record 4ms
 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a deals record with defaults validation 8ms
 ✓ test/services/UniversalUpdateService-core-operations.test.ts > UniversalUpdateService > updateRecord > should update a task record with field transformation (excluding immutable content) 3ms
stdout | test/e2e/suites/core-workflows-usability.e2e.test.ts > Core Workflows – Usability Validation > evaluates usability metrics with fresh-agent scenarios
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should return the matching slug from config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should handle case-insensitive matching
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should fall back to legacy map if not found in config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should return the original input if no mapping found
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should handle null or undefined input
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should map industry to categories via special case handling
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should prioritize object-specific mappings over common mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should return the matching object slug from config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should handle case-insensitive matching for objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should normalize unknown object names
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getListSlug > should return the matching list slug from config
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > getListSlug > should return the original input for unknown lists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should translate attribute names in a simple filter
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should use object context for translations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should handle nested filter structures
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should respect object-specific context in nested filters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should handle null or undefined filters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should process deeply nested object structures
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should return the matching slug from config 2ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should handle case-insensitive matching 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should fall back to legacy map if not found in config 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should return the original input if no mapping found 1ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should handle null or undefined input 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should map industry to categories via special case handling 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getAttributeSlug > should prioritize object-specific mappings over common mappings 1ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should return the matching object slug from config 1ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should handle case-insensitive matching for objects 1ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getObjectSlug > should normalize unknown object names 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getListSlug > should return the matching list slug from config 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > getListSlug > should return the original input for unknown lists 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should translate attribute names in a simple filter 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should use object context for translations 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should handle nested filter structures 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should respect object-specific context in nested filters 1ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should handle null or undefined filters 0ms
 ✓ test/utils/attribute-mapping.test.ts > Attribute Mapping > translateAttributeNamesInFilters > should process deeply nested object structures 1ms
stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should log warnings and suggestions when present
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle field mapping errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle enhanced validation when enabled
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle attribute not found errors with suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform is_completed to status
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform assignees to assigneeId
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform deadline_at to dueDate
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform linked_records array to recordIds
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should use mock data in E2E mode
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should convert task to record in normal mode
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should return 404 when task not found
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should return 404 when task existence check fails with generic error
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should validate immutability for existing task content updates
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Resource Type Edge Cases > should handle unsupported resource types gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Resource Type Edge Cases > should handle empty record data
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should log warnings and suggestions when present 7ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle field mapping errors 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle enhanced validation when enabled 0ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Field validation & suggestions > should handle attribute not found errors with suggestions 0ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform is_completed to status 2ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform assignees to assigneeId 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform deadline_at to dueDate 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Task-specific validation > should transform linked_records array to recordIds 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should use mock data in E2E mode 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should convert task to record in normal mode 0ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should return 404 when task not found 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should return 404 when task existence check fails with generic error 0ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Mock data handling & existence checks > should validate immutability for existing task content updates 1ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Resource Type Edge Cases > should handle unsupported resource types gracefully 0ms
 ✓ test/services/UniversalUpdateService-validation.test.ts > UniversalUpdateService > Resource Type Edge Cases > should handle empty record data 0ms
stdout | test/utils/date-utils.test.ts > Date Utils > resolveRelativeDate > should handle relative date calculations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveRelativeDate > should validate relative date inputs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should create ranges for standard presets
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should handle case-insensitive preset values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should validate preset inputs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with absolute dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with relative dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with preset
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should handle partial date ranges (only start or only end)
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should validate date ranges
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should prioritize preset over explicit dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > isValidISODateString > should validate ISO date strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > createRelativeDateRange > should create date ranges for different time units
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > createRelativeDateRange > should validate inputs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-utils.test.ts > Date Utils > formatDate > should format dates in different styles
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/date-utils.test.ts > Date Utils > resolveRelativeDate > should handle relative date calculations 2ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveRelativeDate > should validate relative date inputs 1ms
 ✓ test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should create ranges for standard presets 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should handle case-insensitive preset values 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > createDateRangeFromPreset > should validate preset inputs 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with absolute dates 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with relative dates 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should resolve a date range with preset 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should handle partial date ranges (only start or only end) 1ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should validate date ranges 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > resolveDateRange > should prioritize preset over explicit dates 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > isValidISODateString > should validate ISO date strings 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > createRelativeDateRange > should create date ranges for different time units 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > createRelativeDateRange > should validate inputs 0ms
 ✓ test/utils/date-utils.test.ts > Date Utils > formatDate > should format dates in different styles 12ms
stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove file paths
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove API keys and tokens
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove internal IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove stack traces
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove email addresses
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove IP addresses
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove URLs with parameters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should provide user-friendly messages for common errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should handle Error objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should include safe context when requested
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should return only user-friendly message in production
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should include sanitized dev info in development
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should create sanitized error object with correct properties
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should infer status code from error type
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should include safe metadata
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > withErrorSanitization > should wrap async function and sanitize errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > withErrorSanitization > should preserve successful results
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect emails
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect IPs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should return false for safe messages
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should return error type summary
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should include safe context in summary
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should handle unknown errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > Security Validation > should never expose sensitive patterns in production
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-sanitizer.test.ts > Error Sanitizer > Security Validation > should handle complex nested errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove file paths 2ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove API keys and tokens 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove internal IDs 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove stack traces 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove email addresses 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove IP addresses 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should remove URLs with parameters 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should provide user-friendly messages for common errors 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should handle Error objects 2ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should include safe context when requested 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should return only user-friendly message in production 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > sanitizeErrorMessage > should include sanitized dev info in development 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should create sanitized error object with correct properties 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should infer status code from error type 1ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > createSanitizedError > should include safe metadata 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > withErrorSanitization > should wrap async function and sanitize errors 2ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > withErrorSanitization > should preserve successful results 0ms
 ↓ test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect file paths
 ↓ test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect API keys
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect emails 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should detect IPs 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > containsSensitiveInfo > should return false for safe messages 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should return error type summary 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should include safe context in summary 1ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > getErrorSummary > should handle unknown errors 0ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > Security Validation > should never expose sensitive patterns in production 2ms
 ✓ test/utils/error-sanitizer.test.ts > Error Sanitizer > Security Validation > should handle complex nested errors 0ms
stdout | test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > debug logs with structured format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > info logs with structured format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > warn logs with structured format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > error logs with structured format and error object
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > setLogContext and getLogContext work correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > clearLogContext clears the context
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > generateCorrelationId generates unique IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > logs include context information
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > PerformanceTimer > tracks timing correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationStart returns PerformanceTimer and logs start
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationSuccess logs success with duration
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationFailure logs failure with error and duration
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Scoped Logger > createScopedLogger returns logger with pre-configured context
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Scoped Logger > scoped logger operationStart works correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > withLogging Utility > withLogging wraps successful operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > withLogging Utility > withLogging wraps failed operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > JSON Log Format > outputs JSON format when LOG_FORMAT=json
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Operation Types > all operation types are available
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/structured-logging.test.ts > Structured Logging System > Operation Types > logs include operation type when specified
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > debug logs with structured format 4ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > info logs with structured format 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > warn logs with structured format 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Basic Logging Functions > error logs with structured format and error object 3ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > setLogContext and getLogContext work correctly 1ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > clearLogContext clears the context 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > generateCorrelationId generates unique IDs 1ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Log Context Management > logs include context information 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > PerformanceTimer > tracks timing correctly 12ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationStart returns PerformanceTimer and logs start 1ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationSuccess logs success with duration 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Operation Logging Functions > operationFailure logs failure with error and duration 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Scoped Logger > createScopedLogger returns logger with pre-configured context 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Scoped Logger > scoped logger operationStart works correctly 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > withLogging Utility > withLogging wraps successful operations 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > withLogging Utility > withLogging wraps failed operations 1ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > JSON Log Format > outputs JSON format when LOG_FORMAT=json 1ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Operation Types > all operation types are available 0ms
 ✓ test/utils/structured-logging.test.ts > Structured Logging System > Operation Types > logs include operation type when specified 0ms
stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with both content and title fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with both content and title fields
Task validation: {
  hasContent: [33mtrue[39m,
  hasTitle: [33mfalse[39m,
  combinedValue: [32m'Mock Task Content'[39m,
  fieldCoverage: [33m0.5555555555555556[39m
}

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should include task_id in ID structure for E2E compatibility
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create high priority task without errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with assignee correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with linked records properly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create multiple tasks consistently
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should handle edge cases gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should create company with proper ID structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should include values object with proper structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should handle custom company data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Person Mock Factory Validation > should create person with proper ID structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Person Mock Factory Validation > should include values object for person data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > List Mock Factory Validation > should create list with basic structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Error Message Format Validation > should validate error messages match expected patterns
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Error Message Format Validation > should provide standardized error messages for mock responses
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should validate all mock factories meet minimum standards
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should validate all mock factories meet minimum standards
Manual Factory Validation: {
  overallScore: [33m0.5694444444444444[39m,
  taskCoverage: [33m0.5555555555555556[39m,
  companyCoverage: [33m0.75[39m,
  personCoverage: [33m0.75[39m,
  listCoverage: [33m0.4444444444444444[39m,
  taskValid: [33mtrue[39m,
  companyValid: [33mtrue[39m,
  personValid: [33mtrue[39m,
  criticalErrors: [33m0[39m
}

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should have no critical validation errors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should ensure Issue #480 compatibility across all factories
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should correctly detect test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should have functioning mock factory status
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should have functioning mock factory status
Factory Status: {
  taskWorks: [33mtrue[39m,
  companyWorks: [33mtrue[39m,
  personWorks: [33mtrue[39m,
  listWorks: [33mtrue[39m
}

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should provide actionable recommendations if issues exist
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > E2E Test Compatibility Regression Prevention > should prevent Task E2E test regressions
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > E2E Test Compatibility Regression Prevention > should maintain consistent mock data structure across versions
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with both content and title fields 1ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should include task_id in ID structure for E2E compatibility 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create high priority task without errors 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with assignee correctly 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create task with linked records properly 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should create multiple tasks consistently 1ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Task Mock Factory Validation - Issue #480 Compatibility > should handle edge cases gracefully 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should create company with proper ID structure 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should include values object with proper structure 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Company Mock Factory Validation > should handle custom company data 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Person Mock Factory Validation > should create person with proper ID structure 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Person Mock Factory Validation > should include values object for person data 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > List Mock Factory Validation > should create list with basic structure 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Error Message Format Validation > should validate error messages match expected patterns 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Error Message Format Validation > should provide standardized error messages for mock responses 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should validate all mock factories meet minimum standards 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should have no critical validation errors 1ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Mock Factory Integration Tests > should ensure Issue #480 compatibility across all factories 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should correctly detect test environment 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should have functioning mock factory status 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > Test Environment Diagnostics > should provide actionable recommendations if issues exist 1ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > E2E Test Compatibility Regression Prevention > should prevent Task E2E test regressions 0ms
 ✓ test/utils/mock-data-validation.test.ts > Mock Data Validation for E2E Test Compatibility > E2E Test Compatibility Regression Prevention > should maintain consistent mock data structure across versions 0ms
stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should correctly map B2B Segment special cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should handle special cases with different character cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should handle special cases with different spacing and formats
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should first check for special cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use case-insensitive lookup after special cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use normalized lookup when case-insensitive fails
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use aggressive normalization as a last resort
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should handle snake case conversion
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should map postal code fields without converting to zip
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Object-Specific Mappings > should prioritize object-specific mappings over common mappings
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should correctly map B2B Segment special cases 1ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should handle special cases with different character cases 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Special Case Handling > should handle special cases with different spacing and formats 4ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should first check for special cases 1ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use case-insensitive lookup after special cases 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use normalized lookup when case-insensitive fails 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should use aggressive normalization as a last resort 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should handle snake case conversion 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Tiered Matching Approach > should map postal code fields without converting to zip 0ms
 ✓ test/utils/attribute-mapping-enhancement.test.ts > Enhanced Attribute Mapping > Object-Specific Mappings > should prioritize object-specific mappings over common mappings 1ms
 ✓ test/e2e/suites/core-workflows-usability.e2e.test.ts > Core Workflows – Usability Validation > evaluates usability metrics with fresh-agent scenarios 592ms
stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "today"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "yesterday"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this week" (Monday to Sunday)
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last week"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this month"
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > contains mappings for all resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last month"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this year"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last year"
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > has proper structure per mapping
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common company field variations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common people field variations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 7 days"
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common task field variations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > returns original field when no mapping exists
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > maps incorrect field names
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 1 day"
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 2 weeks"
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > respects available attributes (keeps original if present)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > maps when original not present in attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > handles case-insensitive mapping
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > returns original when mapped field missing in attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 3 months"
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidResourceTypes() > returns string of valid resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidFields() > returns valid fields for resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidFields() > differs across resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should be case-insensitive
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should handle extra whitespace
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should throw error for unsupported expressions
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > isRelativeDate > should return true for valid relative dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > isRelativeDate > should return false for invalid expressions
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should return ISO dates unchanged
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should convert relative dates to ISO format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should parse various date formats
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should return null for invalid dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe single day ranges
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > contains mappings for all resource types 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > has proper structure per mapping 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common company field variations 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common people field variations 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > FIELD_MAPPINGS constant > maps common task field variations 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > returns original field when no mapping exists 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > maps incorrect field names 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > respects available attributes (keeps original if present) 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > maps when original not present in attributes 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > handles case-insensitive mapping 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > mapFieldName() > returns original when mapped field missing in attributes 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidResourceTypes() > returns string of valid resource types 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidFields() > returns valid fields for resource type 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts > field-mapper – mappings and basics > getValidFields() > differs across resource types 0ms
stdout | test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe multi-day ranges
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe cross-month ranges
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe cross-year ranges
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle leap year correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle non-leap year correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle year boundaries
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle week boundaries correctly
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "today" 4ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "yesterday" 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this week" (Monday to Sunday) 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last week" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this month" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last month" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "this year" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last year" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 7 days" 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 1 day" 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 2 weeks" 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should parse "last 3 months" 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should be case-insensitive 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should handle extra whitespace 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > parseRelativeDate > should throw error for unsupported expressions 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > isRelativeDate > should return true for valid relative dates 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > isRelativeDate > should return false for invalid expressions 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should return ISO dates unchanged 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should convert relative dates to ISO format 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should parse various date formats 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > normalizeDate > should return null for invalid dates 1ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe single day ranges 11ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe multi-day ranges 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe cross-month ranges 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > describeDateRange > should describe cross-year ranges 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle leap year correctly 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle non-leap year correctly 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle year boundaries 0ms
 ✓ test/utils/date-parser.test.ts > Date Parser Utilities > Edge cases > should handle week boundaries correctly 0ms
stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should discover attributes for non-task resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should handle task resource type with special discovery
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should handle API errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverTaskAttributes > should return task-specific attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverTaskAttributes > should create proper title to api_slug mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should get attributes for a specific record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should handle missing record data
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should handle API errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should return all attributes when no categories specified
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should filter array of attributes by category
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should filter object with attributes array
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should handle multiple category field names
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should get company attributes with record ID
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should discover company attributes without record ID
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should get list attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should apply category filtering
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should throw error for unsupported resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover company attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover list attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover task attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should throw error for unsupported resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle people resource type for getAttributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle records resource type for discovery
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should discover attributes for non-task resource types 3ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should handle task resource type with special discovery 1ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributesForResourceType > should handle API errors gracefully 4ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverTaskAttributes > should return task-specific attributes 1ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverTaskAttributes > should create proper title to api_slug mappings 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should get attributes for a specific record 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should handle missing record data 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributesForRecord > should handle API errors 1ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should return all attributes when no categories specified 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should filter array of attributes by category 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should filter object with attributes array 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > filterAttributesByCategory > should handle multiple category field names 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should get company attributes with record ID 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should discover company attributes without record ID 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should get list attributes 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should apply category filtering 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > getAttributes > should throw error for unsupported resource type 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover company attributes 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover list attributes 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should discover task attributes 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > discoverAttributes > should throw error for unsupported resource type 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle people resource type for getAttributes 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle records resource type for discovery 0ms
 ✓ test/services/UniversalMetadataService.test.ts > UniversalMetadataService > Integration with other resource types > should handle deals resource type 0ms
stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate single valid category string
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate array of valid categories
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should handle case-insensitive validation with canonical casing
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate all available categories from the valid list
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should provide fuzzy matching suggestions for close typos
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should handle multiple character errors with distance-based matching
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should provide multiple suggestions when multiple matches are close
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should handle completely invalid categories gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should auto-convert string to single-element array
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should not mark arrays as auto-converted
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should handle mixed case in array elements
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should reject non-string array elements
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should reject invalid input types
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should handle empty arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should handle empty strings
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Duplicate Handling > should remove duplicate suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Duplicate Handling > should handle duplicate categories in input array
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should process valid categories for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should handle invalid categories with helpful error messages
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should only process categories for companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should only process fields named "categories"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should handle array input with mixed validity
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should handle common business category combinations
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should provide helpful guidance for ambiguous terms
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should handle typos in common business terms
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle large arrays efficiently
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle very long category names
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should execute multiple operations and return results
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should handle operation failures with continueOnError=true
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should stop on first error when continueOnError=false
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle special characters in category names
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should process operations in chunks based on maxBatchSize
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate single valid category string 2ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate array of valid categories 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should handle case-insensitive validation with canonical casing 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Valid Categories > should validate all available categories from the valid list 1ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should provide fuzzy matching suggestions for close typos 3ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should handle multiple character errors with distance-based matching 1ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should provide multiple suggestions when multiple matches are close 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Invalid Categories with Fuzzy Matching > should handle completely invalid categories gracefully 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should auto-convert string to single-element array 1ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should not mark arrays as auto-converted 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Auto-Conversion Features > should handle mixed case in array elements 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should reject non-string array elements 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should reject invalid input types 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should handle empty arrays 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Error Handling > should handle empty strings 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Duplicate Handling > should remove duplicate suggestions 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > validateCategories() - Core Validation Logic > Duplicate Handling > should handle duplicate categories in input array 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should process valid categories for companies 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should handle invalid categories with helpful error messages 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should only process categories for companies resource type 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should only process fields named "categories" 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > processCategories() - Integration with Field Mapping > should handle array input with mixed validity 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should handle common business category combinations 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should provide helpful guidance for ambiguous terms 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Integration with Real-World Scenarios > should handle typos in common business terms 1ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle large arrays efficiently 0ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle very long category names 4ms
 ✓ test/unit/category-validation.test.ts > Category Validation System (Issues #220/#218) > Performance and Edge Cases > should handle special characters in category names 0ms
stdout | test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should perform batch search for people
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should perform batch search for companies
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should handle mixed success and failure in batch search
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should get details for multiple people
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should get details for multiple companies
[MockState] Cleared 0 mock companies from storage

stdout | test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should handle missing records in batch get
[MockState] Cleared 0 mock companies from storage

 ✓ test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should execute multiple operations and return results 2ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should handle operation failures with continueOnError=true 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should stop on first error when continueOnError=false 1ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > executeBatchOperations > should process operations in chunks based on maxBatchSize 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should perform batch search for people 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should perform batch search for companies 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchSearchObjects > should handle mixed success and failure in batch search 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should get details for multiple people 0ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should get details for multiple companies 1ms
 ✓ test/api/batch-operations.test.ts > Batch Operations > batchGetObjectDetails > should handle missing records in batch get 0ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should handle concurrent cross-resource operations 6420ms
stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should handle API rate limiting gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should validate cross-resource data consistency
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate basic API connectivity 5ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate test environment setup 21ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > System Health Smoke Tests > should validate core resource types accessibility 6881ms
stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate universal tool basic operations
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should handle API rate limiting gracefully 76ms
stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate task tool basic operations
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate notes tool basic operations
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic record creation workflow
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should validate native boolean values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert string representations to boolean values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert numeric values to boolean values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should reject unconvertible values with appropriate error messages
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should validate native number values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert numeric strings to numbers
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert boolean values to numbers
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should reject unconvertible values with appropriate error messages
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should validate native string values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert number values to strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert boolean values to strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert date objects to ISO strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should try to convert objects to JSON strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should validate date objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject invalid date objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert ISO date strings to dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert various date string formats
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert Unix timestamps (milliseconds) to date strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert Unix timestamps (seconds) to date strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject unconvertible values with appropriate error messages
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should validate native array values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should convert non-array values to single-item arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should validate plain object values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should reject non-object values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should validate string option values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should validate array of option values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should convert non-string values to strings in arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should validate string ID values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract record_id from objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract id from objects as fallback
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should handle arrays of record references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should reject invalid record references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null and undefined value handling > should treat null values as valid for any type
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null and undefined value handling > should treat undefined values as valid and convert to null
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Edge case handling > should handle empty strings appropriately by type
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Edge case handling > should handle whitespace strings appropriately
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate universal tool basic operations 50ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate task tool basic operations 7ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Core Tool Functionality Smoke Tests > should validate notes tool basic operations 2ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should validate native boolean values 3ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert string representations to boolean values 1ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert numeric values to boolean values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should reject unconvertible values with appropriate error messages 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should validate native number values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert numeric strings to numbers 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert boolean values to numbers 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should reject unconvertible values with appropriate error messages 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should validate native string values 1ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert number values to strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert boolean values to strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert date objects to ISO strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should try to convert objects to JSON strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should validate date objects 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject invalid date objects 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert ISO date strings to dates 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert various date string formats 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert Unix timestamps (milliseconds) to date strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert Unix timestamps (seconds) to date strings 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject unconvertible values with appropriate error messages 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should validate native array values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should convert non-array values to single-item arrays 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should validate plain object values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should reject non-object values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should validate string option values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should validate array of option values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should convert non-string values to strings in arrays 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should validate string ID values 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract record_id from objects 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract id from objects as fallback 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should handle arrays of record references 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should reject invalid record references 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null and undefined value handling > should treat null values as valid for any type 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null and undefined value handling > should treat undefined values as valid and convert to null 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Edge case handling > should handle empty strings appropriately by type 0ms
 ✓ test/utils/attribute-mapping/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Edge case handling > should handle whitespace strings appropriately 1ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchCompanies > should throw appropriate error for invalid condition 7795ms
stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should search companies with the lower-level API function
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should handle errors at the generic API level
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/error-handling-rate-limit.e2e.test.ts > Critical Error Handling E2E – Rate Limiting > handles rate limiting scenarios (graceful)
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/error-handling-rate-limit.e2e.test.ts > Critical Error Handling E2E – Rate Limiting > handles rate limiting scenarios (graceful) 46ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should search companies with the lower-level API function 4ms
stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > create-record for lists > should accept lists as object type
Lists may not be creatable via records API: Error: Invalid API response: empty data object
    at ensureAttioRecordStructure [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/crud.ts:79:11[90m)[39m
    at [90m/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/crud.ts:270:22
    at callWithRetry [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/retry.ts:112:14[90m)[39m
    at createObjectRecord [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/objects/records/index.ts:74:20[90m)[39m
    at [90m/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39mtest/lists-resource.test.ts:336:26
    at [90mfile:///Users/kesslerio/GDrive/Projects/attio-mcp-server/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

 ✓ test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > create-record for lists > should accept lists as object type 7714ms
stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > update-record for lists > should accept lists as object type for updates
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should reject duplicate email addresses
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should resolve company name to record id
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should throw error when company name not found
[MockState] Cleared 0 mock companies from storage

 ✓ test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should reject duplicate email addresses 16ms
 ✓ test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should resolve company name to record id 4ms
 ✓ test/validators/person-validator-enhanced.test.ts > PersonValidator.validateCreate > should throw error when company name not found 1ms
stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from EnhancedApiError (which has getContextualMessage)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from AttioApiError using message property (CRITICAL FIX)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from UniversalValidationError using message property (CRITICAL FIX)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from AuthenticationError using message property
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from ResourceNotFoundError using message property
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from generic Error using message property
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should fallback to string representation for unknown error types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should fallback to string representation when error has no message
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should handle null and undefined errors
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should NEVER CRASH when extracting error messages - CORE FIX FOR ISSUE #425
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should return already enhanced errors unchanged
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should convert AttioApiError to EnhancedApiError
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should convert generic error with status properties
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should handle error with alternative status property name
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should use defaults for minimal error objects
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should handle error without message
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should demonstrate the Issue #425 fix in action
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should handle non-existent record scenarios without crashes
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should properly enhance errors before throwing
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should handle mixed error types in batch scenarios
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should provide consistent error messages for the same error type
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should handle edge cases in error message extraction
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should preserve original error information during enhancement
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should prevent the original crash scenario from lines 776 and 788
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should handle all error types mentioned in the issue description
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should validate the fix works in the actual error handling pattern used
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from EnhancedApiError (which has getContextualMessage) 1ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from AttioApiError using message property (CRITICAL FIX) 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from UniversalValidationError using message property (CRITICAL FIX) 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from AuthenticationError using message property 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from ResourceNotFoundError using message property 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should extract message from generic Error using message property 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should fallback to string representation for unknown error types 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should fallback to string representation when error has no message 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should handle null and undefined errors 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.getErrorMessage() - The Core Fix > should NEVER CRASH when extracting error messages - CORE FIX FOR ISSUE #425 2ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should return already enhanced errors unchanged 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should convert AttioApiError to EnhancedApiError 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should convert generic error with status properties 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should handle error with alternative status property name 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should use defaults for minimal error objects 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > ErrorEnhancer.ensureEnhanced() - Error Conversion > should handle error without message 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should demonstrate the Issue #425 fix in action 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should handle non-existent record scenarios without crashes 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should properly enhance errors before throwing 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Real-world error handling scenarios > should handle mixed error types in batch scenarios 1ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should provide consistent error messages for the same error type 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should handle edge cases in error message extraction 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Error message consistency and reliability > should preserve original error information during enhancement 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should prevent the original crash scenario from lines 776 and 788 1ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should handle all error types mentioned in the issue description 0ms
 ✓ test/handlers/tool-configs/universal/error-handling.test.ts > Issue #425: Error Handling Fixes - Safe Error Message Extraction > Issue #425 Regression Prevention > should validate the fix works in the actual error handling pattern used 0ms
stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves cross-resource relationship integrity
[MockState] Retrieved mock company: 64c8127a-ba25-4cad-abe7-a8b8580dd495 { found: [33mfalse[39m, values: [1mnull[22m }

stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves data validation rules
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves cross-resource relationship integrity 3739ms
stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > All 7 Resource Types Enum Validation > should have exactly 7 resource types defined
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > All 7 Resource Types Enum Validation > should map correctly to ResourceType
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/record-management-search.e2e.test.ts > Record Management E2E – Search > searches records across resource types 7313ms
stdout | test/e2e/suites/record-management-search.e2e.test.ts > Record Management E2E – Search > filters tasks with pagination
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle companies resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle people resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle lists resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle records resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle tasks resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle deals resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle notes resource type
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Phase 2 LISTS Resource Type Validation > should properly support LISTS type in all formatResult functions
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Resource Type Mappings and Validation > should handle plural and special forms correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Resource Type Mappings and Validation > should have corresponding mock factories for all types
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Contract Consistency Across All Types > should return consistent string format across all resource types for search
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Contract Consistency Across All Types > should return consistent string format across all resource types for details
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows
Test cleanup: 2 record(s) tracked for cleanup: 5a6a8939-afd5-457d-b9da-8b808acb1f9c, 64c8127a-ba25-4cad-abe7-a8b8580dd495

 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > All 7 Resource Types Enum Validation > should have exactly 7 resource types defined 4ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > All 7 Resource Types Enum Validation > should map correctly to ResourceType 1ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle companies resource type 1ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > search-records formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-record-details formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > create-record formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > update-record formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > delete-record formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-attributes formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > get-detailed-info formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle companies resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle people resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle lists resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle records resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle tasks resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle deals resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > formatResult Functions Support All Resource Types > advanced-search formatResult > should handle notes resource type 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Phase 2 LISTS Resource Type Validation > should properly support LISTS type in all formatResult functions 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Resource Type Mappings and Validation > should handle plural and special forms correctly 1ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Resource Type Mappings and Validation > should have corresponding mock factories for all types 0ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Contract Consistency Across All Types > should return consistent string format across all resource types for search 1ms
 ✓ test/universal-resource-types-validation.test.ts > Universal Resource Types Validation > Contract Consistency Across All Types > should return consistent string format across all resource types for details 0ms
 ✓ test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts > Regression Prevention – Relationships & Workflows > preserves data validation rules 149ms
 ✓ test/e2e/suites/record-management-search.e2e.test.ts > Record Management E2E – Search > filters tasks with pagination 5ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Cross-System API Integration > should validate cross-resource data consistency 905ms
stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should handle malformed request recovery
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should handle resource type boundaries
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should validate tool boundary interactions
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should handle network timeout scenarios
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should validate API version compatibility
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalCreateService-core-resources.test.ts > UniversalCreateService > createRecord > should create a company record
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should handle service degradation gracefully
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should handle malformed request recovery 57ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should handle resource type boundaries 9ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > System Integration Edge Cases > should validate tool boundary interactions 15ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should handle network timeout scenarios 9ms
 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should validate API version compatibility 10ms
 ✓ test/services/UniversalCreateService-core-resources.test.ts > UniversalCreateService > createRecord > should create a company record 125ms
 ✓ test/services/UniversalCreateService-core-resources.test.ts > UniversalCreateService > createRecord > should create a person record with email validation 1ms
 ✓ test/services/UniversalCreateService-core-resources.test.ts > UniversalCreateService > createRecord > should create a list record and convert format 1ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic record creation workflow 1086ms
stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic search workflow
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Integration Recovery and Resilience > should demonstrate error recovery patterns
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic error handling workflow
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect API response structure regressions
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > External Dependency Handling > should handle service degradation gracefully 190ms
stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Integration Recovery and Resilience > should validate system state consistency after errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Integration Recovery and Resilience > should demonstrate error recovery patterns 36ms
stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect tool registration regressions
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect basic functionality regressions
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests
Test cleanup: 1 record(s) tracked for cleanup: ab68fdc9-b349-40c7-a34d-d8ee4e8f0e10

 ✓ test/e2e/suites/integration-boundaries.e2e.test.ts > Integration Boundaries E2E Tests > Integration Recovery and Resilience > should validate system state consistency after errors 12ms
stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Performance Smoke Tests > should validate acceptable response times
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Performance Smoke Tests > should validate system remains responsive under load
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic search workflow 42ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Essential Workflow Smoke Tests > should validate basic error handling workflow 5ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect API response structure regressions 17ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect tool registration regressions 5ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Quick Regression Detection > should detect basic functionality regressions 24ms
 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Performance Smoke Tests > should validate acceptable response times 15ms
stdout | test/objects/records.test.ts > Records API > createObjectRecord > should call createRecord to create a new record
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > createObjectRecord > should handle errors and use fallback implementation if needed
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > createObjectRecord > should handle errors and use fallback implementation if needed
[attio-client] POST /objects/companies/records { sampleKeys: [ [32m'name'[39m, [32m'description'[39m ] }

stdout | test/objects/records.test.ts > Records API > getObjectRecord > should call getRecord to get record details
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > getObjectRecord > should support attributes parameter
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > updateObjectRecord > should call updateRecord to update a record
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > deleteObjectRecord > should call deleteRecord to delete a record
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > listObjectRecords > should call listRecords to list records
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > listObjectRecords > should support filtering options
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > formatRecordAttribute > should correctly format Date values
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > formatRecordAttribute > should handle currency fields
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > formatRecordAttribute > should handle record ID links
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > formatRecordAttribute > should return null and undefined as is
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/records.test.ts > Records API > formatRecordAttributes > should format multiple attributes
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/smoke-test-suite.e2e.test.ts > Smoke Test Suite - Fast Validation > Performance Smoke Tests > should validate system remains responsive under load 126ms
 ✓ test/objects/records.test.ts > Records API > createObjectRecord > should call createRecord to create a new record 4ms
 ✓ test/objects/records.test.ts > Records API > createObjectRecord > should handle errors and use fallback implementation if needed 2ms
 ✓ test/objects/records.test.ts > Records API > getObjectRecord > should call getRecord to get record details 0ms
 ✓ test/objects/records.test.ts > Records API > getObjectRecord > should support attributes parameter 0ms
 ✓ test/objects/records.test.ts > Records API > updateObjectRecord > should call updateRecord to update a record 0ms
 ✓ test/objects/records.test.ts > Records API > deleteObjectRecord > should call deleteRecord to delete a record 0ms
 ✓ test/objects/records.test.ts > Records API > listObjectRecords > should call listRecords to list records 0ms
 ✓ test/objects/records.test.ts > Records API > listObjectRecords > should support filtering options 2ms
 ✓ test/objects/records.test.ts > Records API > formatRecordAttribute > should correctly format Date values 1ms
 ✓ test/objects/records.test.ts > Records API > formatRecordAttribute > should handle currency fields 0ms
 ✓ test/objects/records.test.ts > Records API > formatRecordAttribute > should handle record ID links 0ms
 ✓ test/objects/records.test.ts > Records API > formatRecordAttribute > should return null and undefined as is 0ms
 ✓ test/objects/records.test.ts > Records API > formatRecordAttributes > should format multiple attributes 0ms
stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories
[MockState] Cleared 0 mock companies from storage

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories
[MockState] Stored mock company: comp_1756513016113_d64kazjg9 {
  storedValues: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] },
  totalStoredCompanies: [33m1[39m
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories
DEBUG: About to call getCompanyDetails with ID: comp_1756513016113_d64kazjg9

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories
[MockState] Retrieved mock company: comp_1756513016113_d64kazjg9 { found: [33mtrue[39m, values: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] } }
[getCompanyDetails] Returning company from shared mock state: {
  companyId: [32m'comp_1756513016113_d64kazjg9'[39m,
  values: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] }
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories
DEBUG: getCompanyDetails returned: {
  id: {
    workspace_id: [32m'test-workspace'[39m,
    object_id: [32m'companies'[39m,
    record_id: [32m'comp_1756513016113_d64kazjg9'[39m
  },
  values: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] },
  created_at: [32m'2025-08-30T00:16:56.114Z'[39m,
  record_url: [32m'https://app.attio.com/workspace/test-workspace/object/companies/comp_1756513016113_d64kazjg9'[39m
}
DEBUG: getCompanyDetails returned: {
  companyDetails: {
    id: {
      workspace_id: [32m'test-workspace'[39m,
      object_id: [32m'companies'[39m,
      record_id: [32m'comp_1756513016113_d64kazjg9'[39m
    },
    values: { name: [36m[Array][39m, industry: [36m[Array][39m },
    created_at: [32m'2025-08-30T00:16:56.114Z'[39m,
    record_url: [32m'https://app.attio.com/workspace/test-workspace/object/companies/comp_1756513016113_d64kazjg9'[39m
  },
  hasValues: [33mtrue[39m,
  companyDetailsType: [32m'object'[39m,
  companyDetailsKeys: [ [32m'id'[39m, [32m'values'[39m, [32m'created_at'[39m, [32m'record_url'[39m ]
}
Created company with industry: {
  companyId: [32m'comp_1756513016113_d64kazjg9'[39m,
  industryValue: [
    {
      active_from: [32m'2025-08-30T00:16:56.114Z'[39m,
      active_until: [1mnull[22m,
      created_by_actor: [36m[Object][39m,
      value: [32m'Software & Technology'[39m,
      attribute_type: [32m'text'[39m
    }
  ],
  allValues: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] }
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping
[MockState] Cleared 1 mock companies from storage

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping
[MockState] Stored mock company: comp_1756513016129_gtmw8bhbg { storedValues: { name: [ [36m[Object][39m ] }, totalStoredCompanies: [33m1[39m }

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping
[MockState] Stored mock company: comp_1756513016129_gtmw8bhbg {
  storedValues: {
    categories: [32m'Healthcare & Medical'[39m,
    industry: [32m'Healthcare & Medical'[39m
  },
  totalStoredCompanies: [33m1[39m
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping
[MockState] Retrieved mock company: comp_1756513016129_gtmw8bhbg {
  found: [33mtrue[39m,
  values: {
    categories: [32m'Healthcare & Medical'[39m,
    industry: [32m'Healthcare & Medical'[39m
  }
}
[getCompanyDetails] Returning company from shared mock state: {
  companyId: [32m'comp_1756513016129_gtmw8bhbg'[39m,
  values: {
    categories: [32m'Healthcare & Medical'[39m,
    industry: [32m'Healthcare & Medical'[39m
  }
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping
Updated company industry: {
  companyId: [32m'comp_1756513016129_gtmw8bhbg'[39m,
  industryValue: [32m'Healthcare & Medical'[39m,
  updateIndustry: [32m'Healthcare & Medical'[39m
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should handle multiple industry values correctly
[MockState] Cleared 1 mock companies from storage

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should handle multiple industry values correctly
[MockState] Stored mock company: comp_1756513016148_7fuvdaz9o {
  storedValues: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] },
  totalStoredCompanies: [33m1[39m
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should handle multiple industry values correctly
[MockState] Retrieved mock company: comp_1756513016148_7fuvdaz9o { found: [33mtrue[39m, values: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] } }
[getCompanyDetails] Returning company from shared mock state: {
  companyId: [32m'comp_1756513016148_7fuvdaz9o'[39m,
  values: { name: [ [36m[Object][39m ], industry: [ [36m[Object][39m ] }
}

stdout | test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should handle multiple industry values correctly
Multi-industry company created: {
  companyId: [32m'comp_1756513016148_7fuvdaz9o'[39m,
  inputIndustries: [ [32m'Technology'[39m, [32m'Software'[39m, [32m'AI & Machine Learning'[39m ],
  resultIndustry: [
    {
      active_from: [32m'2025-08-30T00:16:56.148Z'[39m,
      active_until: [1mnull[22m,
      created_by_actor: [36m[Object][39m,
      value: [32m'Technology,Software,AI & Machine Learning'[39m,
      attribute_type: [32m'text'[39m
    }
  ]
}

 ✓ test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should create a company with industry field mapped to categories 50ms
 ✓ test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should update a company industry field and maintain categories mapping 20ms
 ✓ test/api/industry-categories-mapping.test.ts > Industry-Categories Mapping - E2E Tests > Company Creation with Industry Field > should handle multiple industry values correctly 14ms
stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

stdout | src/services/ValidationService.test.ts > ValidationService > createValidationError > should create validation error with default resource type
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > createValidationError > should create validation error with custom resource type
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > createValidationError > should include valid ISO timestamp
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should pass for valid limit values
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should pass for undefined limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for non-integer limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for zero or negative limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for limit exceeding maximum
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should respect custom maximum limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should call performance tracker on error when perfId provided
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should pass for valid offset values
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should pass for undefined offset
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for non-integer offset
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for negative offset
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for offset exceeding maximum
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should respect custom maximum offset
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should validate both limit and offset together
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should throw if either parameter is invalid
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should pass for empty parameters
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUUID > should pass for valid UUIDs in non-task resources
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should search companies successfully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUUID > should skip validation for tasks resource
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUUID > should throw for invalid UUIDs in non-task resources
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUUID > should track performance when perfId provided
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should return suggestions unchanged when under limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should truncate suggestions when over default limit
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should respect custom max count
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should handle empty arrays
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should pass for valid email addresses
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle different email field formats
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with email_address field
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with email field
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with value field (Issue #511)
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle mixed email formats including value objects (Issue #511)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should search people successfully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should validate rich email metadata objects with value field (Issue #511)
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should throw for invalid emails in value objects (Issue #511)
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should throw UniversalValidationError for invalid emails
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should provide helpful error message for invalid emails
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should skip invalid email formats gracefully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle null or undefined record data
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should pass for valid field validation
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should return error message for invalid validation when not throwing
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should throw UniversalValidationError for invalid validation when throwing enabled
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should truncate suggestions in error message
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should return true for valid UUIDs
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should fallback to generic ID validation when UUID fails
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should return false when both validations fail
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should skip generic validation when allowGeneric is false
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should return valid for successful validation
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should collect all validation errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should handle partial parameter validation
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should handle search errors properly
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should handle empty strings gracefully
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should handle very large suggestion arrays efficiently
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should preserve original arrays when truncating
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should format search results correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should handle empty search results
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should get company details successfully
[MockState] Cleared 0 mock companies from storage

 ✓ src/services/ValidationService.test.ts > ValidationService > createValidationError > should create validation error with default resource type 2ms
 ✓ src/services/ValidationService.test.ts > ValidationService > createValidationError > should create validation error with custom resource type 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > createValidationError > should include valid ISO timestamp 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should pass for valid limit values 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should pass for undefined limit 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for non-integer limit 1ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for zero or negative limit 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should throw for limit exceeding maximum 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should respect custom maximum limit 2ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateLimitParameter > should call performance tracker on error when perfId provided 1ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should pass for valid offset values 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should pass for undefined offset 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for non-integer offset 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for negative offset 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should throw for offset exceeding maximum 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateOffsetParameter > should respect custom maximum offset 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should validate both limit and offset together 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should throw if either parameter is invalid 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validatePaginationParameters > should pass for empty parameters 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUUID > should pass for valid UUIDs in non-task resources 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUUID > should skip validation for tasks resource 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUUID > should throw for invalid UUIDs in non-task resources 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUUID > should track performance when perfId provided 1ms
 ✓ src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should return suggestions unchanged when under limit 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should truncate suggestions when over default limit 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should respect custom max count 3ms
 ✓ src/services/ValidationService.test.ts > ValidationService > truncateSuggestions > should handle empty arrays 1ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should pass for valid email addresses 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle different email field formats 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with email_address field 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with email field 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle email objects with value field (Issue #511) 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle mixed email formats including value objects (Issue #511) 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should validate rich email metadata objects with value field (Issue #511) 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should throw for invalid emails in value objects (Issue #511) 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should throw UniversalValidationError for invalid emails 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should provide helpful error message for invalid emails 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should skip invalid email formats gracefully 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateEmailAddresses > should handle null or undefined record data 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should pass for valid field validation 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should return error message for invalid validation when not throwing 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should throw UniversalValidationError for invalid validation when throwing enabled 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateFieldsWithErrorHandling > should truncate suggestions in error message 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should return true for valid UUIDs 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should fallback to generic ID validation when UUID fails 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should return false when both validations fail 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > isValidRecordId > should skip generic validation when allowGeneric is false 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should return valid for successful validation 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should collect all validation errors 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > validateUniversalOperation > should handle partial parameter validation 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should handle empty strings gracefully 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should handle very large suggestion arrays efficiently 0ms
 ✓ src/services/ValidationService.test.ts > ValidationService > Edge Cases and Error Handling > should preserve original arrays when truncating 0ms
stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should get person details successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should format record details correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > Cross-resource type validation > should handle all resource types for search
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > Cross-resource type validation > should handle all resource types for CRUD operations
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should search companies successfully 15ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should search people successfully 2ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should handle search errors properly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should format search results correctly 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > search-records tool > should handle empty search results 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should get company details successfully 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should get person details successfully 3ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > get-record-details tool > should format record details correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > Cross-resource type validation > should handle all resource types for search 2ms
 ✓ test/handlers/tool-configs/universal/core-operations-search.test.ts > Universal Core Operations Search Tests > Cross-resource type validation > should handle all resource types for CRUD operations 0ms
stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should calculate correct distance for similar strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should return 0 for identical strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should handle case differences
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should find similar field names
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should find multiple suggestions sorted by similarity
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should respect max suggestions limit
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should handle substring matching when no close matches
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should return empty array for no matches
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should generate message with suggestions for similar field
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should include context when provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should show valid fields when no close matches
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should handle large field lists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateEnumSuggestionMessage > should generate message with all valid options for small sets
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateEnumSuggestionMessage > should truncate large option lists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateReadOnlyFieldMessage > should generate message for update operation
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateReadOnlyFieldMessage > should generate message for create operation
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateResourceTypeSuggestionMessage > should suggest similar resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateResourceTypeSuggestionMessage > should list all valid resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should map common field name mistakes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should handle different formats
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should return null for unknown fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should validate valid fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should suggest mapped field names
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should generate suggestions for unknown fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should detect read-only fields for update
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should detect read-only fields for create
[MockState] Cleared 0 mock companies from storage

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests
[MockState] Stored mock company: comp_1756513016372_3cuk7p1br {
  storedValues: {
    name: [ [36m[Object][39m ],
    is_active: [ [36m[Object][39m ],
    uses_body_composition: [ [36m[Object][39m ]
  },
  totalStoredCompanies: [33m1[39m
}

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests
Created test company: comp_1756513016372_3cuk7p1br

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "false"
[MockState] Cleared 1 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with task_id structure
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with id structure
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with string ID
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should handle task with empty workspace_id
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should throw error for unrecognized ID structure
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should handle missing id in task
[MockState] Cleared 0 mock companies from storage

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "false"
[MockState] Stored mock company: comp_1756513016372_3cuk7p1br { storedValues: { is_active: [32m'false'[39m }, totalStoredCompanies: [33m1[39m }

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "true"
[MockState] Cleared 1 mock companies from storage

 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with task_id structure 3ms
 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with id structure 1ms
 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should convert task with string ID 2ms
 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should handle task with empty workspace_id 0ms
 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should throw error for unrecognized ID structure 2ms
 ✓ test/services/UniversalUtilityService-conversion.test.ts > UniversalUtilityService > convertTaskToRecord > should handle missing id in task 0ms
stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "true"
[MockState] Stored mock company: comp_1756513016372_3cuk7p1br { storedValues: { is_active: [32m'true'[39m }, totalStoredCompanies: [33m1[39m }

 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should calculate correct distance for similar strings 7ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should return 0 for identical strings 1ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > levenshteinDistance > should handle case differences 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should find similar field names 1ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should find multiple suggestions sorted by similarity 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should respect max suggestions limit 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should handle substring matching when no close matches 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > findSimilarOptions > should return empty array for no matches 4ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should generate message with suggestions for similar field 3ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should include context when provided 1ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should show valid fields when no close matches 1ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateFieldSuggestionMessage > should handle large field lists 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateEnumSuggestionMessage > should generate message with all valid options for small sets 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateEnumSuggestionMessage > should truncate large option lists 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateReadOnlyFieldMessage > should generate message for update operation 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateReadOnlyFieldMessage > should generate message for create operation 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateResourceTypeSuggestionMessage > should suggest similar resource types 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > generateResourceTypeSuggestionMessage > should list all valid resource types 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should map common field name mistakes 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should handle different formats 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > getMappedFieldName > should return null for unknown fields 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should validate valid fields 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should suggest mapped field names 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should generate suggestions for unknown fields 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should detect read-only fields for update 0ms
 ✓ test/utils/field-suggestions.test.ts > Field Suggestions Utilities > validateFieldWithSuggestions > should detect read-only fields for create 0ms
stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates multiple boolean attributes with string values
[MockState] Cleared 1 mock companies from storage

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates multiple boolean attributes with string values
[MockState] Stored mock company: comp_1756513016372_3cuk7p1br {
  storedValues: { is_active: [32m'no'[39m, uses_body_composition: [32m'yes'[39m },
  totalStoredCompanies: [33m1[39m
}

stdout | test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests
Deleted test company: comp_1756513016372_3cuk7p1br

 ✓ test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "false" 8ms
 ✓ test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates boolean attribute with string "true" 4ms
 ✓ test/api/boolean-attribute-update.test.ts > Boolean Attribute API Tests > updates multiple boolean attributes with string values 2ms
stdout | test/errors/api-errors.test.ts > api-errors > AttioApiError > should create a base API error with all properties
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > AttioApiError > should format error message correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an AuthenticationError with correct defaults
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an AuthorizationError with correct defaults
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a ResourceNotFoundError with correct formatting
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an InvalidRequestError
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a RateLimitError with correct defaults
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a ServerError with status code in message
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > createApiErrorFromStatus > should create the correct error type based on status code
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should handle Axios error response format
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should correctly parse resource types from endpoints
[MockState] Cleared 0 mock companies from storage

stdout | test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should handle missing response data
[MockState] Cleared 0 mock companies from storage

 ✓ test/errors/api-errors.test.ts > api-errors > AttioApiError > should create a base API error with all properties 5ms
 ✓ test/errors/api-errors.test.ts > api-errors > AttioApiError > should format error message correctly 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an AuthenticationError with correct defaults 1ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an AuthorizationError with correct defaults 1ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a ResourceNotFoundError with correct formatting 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create an InvalidRequestError 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a RateLimitError with correct defaults 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > Specialized error classes > should create a ServerError with status code in message 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > createApiErrorFromStatus > should create the correct error type based on status code 2ms
 ✓ test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should handle Axios error response format 1ms
 ✓ test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should correctly parse resource types from endpoints 0ms
 ✓ test/errors/api-errors.test.ts > api-errors > createApiErrorFromAxiosError > should handle missing response data 0ms
stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should pass through UniversalValidationError unchanged
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should pass through EnhancedApiError unchanged
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should extract message from Error objects
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should extract message from objects with message property
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should handle string errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should handle unknown error types
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for not found messages
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for invalid messages
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for required messages
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for 400 status codes
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify API_ERROR for 500+ status codes
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should validate and convert attributes based on their types
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify API_ERROR for network errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should default to SYSTEM_ERROR for unclassified errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should include operation suggestion in error details
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > createUniversalError > should include original error as cause
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should reject invalid email formats during creation
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should return resource type suggestion for invalid resource
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide date format suggestions for date parsing errors
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should handle null values correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should throw an error for invalid attribute values
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide date range suggestions
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest simpler filters for unsupported filter combinations
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest batch size limits
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest rate limit handling
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should accept valid email formats during creation
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should proceed with original value if type info cannot be determined
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateCreate > should validate required fields and enhance with type validation
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for company_id error
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for deal_stage error
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should validate email format before checking for duplicates
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for deal_value error
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for invalid value format
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest field discovery for unknown attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateCreate > should throw MissingCompanyFieldError if name is missing
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateUpdate > should validate company ID and enhance with type validation
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should handle email addresses as array properly
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should convert single email string to array
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateUpdate > should throw InvalidCompanyDataError if company ID is invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should validate a single attribute and return converted value
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should throw InvalidCompanyDataError for an invalid company ID
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should throw InvalidCompanyDataError for an invalid attribute name
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateAttributeUpdate > should reject invalid email formats during attribute update
[MockState] Cleared 0 mock companies from storage

stdout | test/api/email-validation.test.ts > Email Validation > PersonValidator.validateAttributeUpdate > should accept valid email formats during attribute update
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide generic not found suggestions
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide authentication suggestions for unauthorized errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide duplicate record suggestions for create operations
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide uniqueness constraint suggestions
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should handle string errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should handle object errors with message property
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should return undefined for unknown error patterns
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for various field errors
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide field suggestions for deal attribute errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should validate and convert attributes based on their types 7ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should handle null values correctly 1ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should throw an error for invalid attribute values 1ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeTypes > should proceed with original value if type info cannot be determined 1ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateCreate > should validate required fields and enhance with type validation 1ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateCreate > should throw MissingCompanyFieldError if name is missing 0ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateUpdate > should validate company ID and enhance with type validation 0ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateUpdate > should throw InvalidCompanyDataError if company ID is invalid 0ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should validate a single attribute and return converted value 1ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should throw InvalidCompanyDataError for an invalid company ID 0ms
 ✓ test/validators/company-validator-enhanced.test.ts > Enhanced Company Validator > validateAttributeUpdate > should throw InvalidCompanyDataError for an invalid attribute name 0ms
stdout | src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide generic field suggestions for non-deal resources
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle null and undefined errors gracefully
[MockState] Cleared 0 mock companies from storage

 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should reject invalid email formats during creation 7ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should accept valid email formats during creation 2ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should validate email format before checking for duplicates 0ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should handle email addresses as array properly 0ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateCreate > should convert single email string to array 0ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateAttributeUpdate > should reject invalid email formats during attribute update 0ms
 ✓ test/api/email-validation.test.ts > Email Validation > PersonValidator.validateAttributeUpdate > should accept valid email formats during attribute update 0ms
stdout | src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle empty error messages
[MockState] Cleared 0 mock companies from storage

stdout | src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle malformed error objects
[MockState] Cleared 0 mock companies from storage

 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should pass through UniversalValidationError unchanged 5ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should pass through EnhancedApiError unchanged 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should extract message from Error objects 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should extract message from objects with message property 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should handle string errors 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should handle unknown error types 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for not found messages 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for invalid messages 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for required messages 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify USER_ERROR for 400 status codes 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify API_ERROR for 500+ status codes 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should classify API_ERROR for network errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should default to SYSTEM_ERROR for unclassified errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should include operation suggestion in error details 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > createUniversalError > should include original error as cause 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should return resource type suggestion for invalid resource 4ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide date format suggestions for date parsing errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide date range suggestions 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest simpler filters for unsupported filter combinations 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest batch size limits 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest rate limit handling 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for company_id error 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for deal_stage error 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for deal_value error 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for invalid value format 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should suggest field discovery for unknown attributes 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide generic not found suggestions 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide authentication suggestions for unauthorized errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide duplicate record suggestions for create operations 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide uniqueness constraint suggestions 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should handle string errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should handle object errors with message property 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should return undefined for unknown error patterns 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide deal-specific suggestions for various field errors 1ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide field suggestions for deal attribute errors 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > getOperationSuggestion > should provide generic field suggestions for non-deal resources 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle null and undefined errors gracefully 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle empty error messages 0ms
 ✓ src/services/ErrorService.test.ts > ErrorService > Edge Cases > should handle malformed error objects 0ms
stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle basic objects
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle nested circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle functions
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle undefined values
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle symbols
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle Error objects
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle deep objects without exceeding max depth
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should truncate very long strings
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should validate correct JSON strings
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should detect invalid JSON strings
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect direct circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect nested circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should return false for objects without circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > createSafeCopy > should create a safe copy of an object with circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should sanitize MCP responses with circular references
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should handle non-object responses
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/json-serializer.test.ts > JSON Serializer > Real-world MCP response scenarios > should handle complex nested response objects
[MockState] Cleared 0 mock companies from storage

 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle basic objects 3ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle circular references 1ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle nested circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle functions 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle undefined values 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle symbols 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle Error objects 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle deep objects without exceeding max depth 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should truncate very long strings 1ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should validate correct JSON strings 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should detect invalid JSON strings 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect direct circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect nested circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should return false for objects without circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > createSafeCopy > should create a safe copy of an object with circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should sanitize MCP responses with circular references 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should handle non-object responses 0ms
 ✓ src/utils/json-serializer.test.ts > JSON Serializer > Real-world MCP response scenarios > should handle complex nested response objects 1ms
stdout | test/unit/utils/validation-utils.test.ts > validation-utils > getResourceAttributes > should fetch and cache resource attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > getResourceAttributes > should handle API errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should validate valid select option
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should reject invalid select option with helpful message
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should pass validation for non-select fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should handle missing field gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateMultiSelectField > should validate valid multi-select options
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateMultiSelectField > should reject invalid multi-select options
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should pass validation when no read-only fields are updated
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should reject updates to single read-only field
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should reject updates to multiple read-only fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should suggest similar field names for typos
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should suggest field names based on similarity
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should return empty array for very dissimilar names
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should handle exact matches
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should validate existing fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should reject unknown fields with suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should handle multiple field validation
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should validate valid record fields for creation
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should validate valid record fields for update
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject read-only fields in updates
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject invalid select options
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject unknown fields
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > getResourceAttributes > should fetch and cache resource attributes 17ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > getResourceAttributes > should handle API errors gracefully 6ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should validate valid select option 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should reject invalid select option with helpful message 4ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should pass validation for non-select fields 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateSelectField > should handle missing field gracefully 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateMultiSelectField > should validate valid multi-select options 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateMultiSelectField > should reject invalid multi-select options 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should pass validation when no read-only fields are updated 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should reject updates to single read-only field 2ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateReadOnlyFields > should reject updates to multiple read-only fields 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should suggest similar field names for typos 2ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should suggest field names based on similarity 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should return empty array for very dissimilar names 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > suggestFieldName > should handle exact matches 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should validate existing fields 1ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should reject unknown fields with suggestions 2ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateFieldExistence > should handle multiple field validation 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should validate valid record fields for creation 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should validate valid record fields for update 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject read-only fields in updates 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject invalid select options 0ms
 ✓ test/unit/utils/validation-utils.test.ts > validation-utils > validateRecordFields > should reject unknown fields 0ms
stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > applyDealDefaultsWithValidation > should skip API validation when skipValidation is true
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > applyDealDefaultsWithValidation > should make API call when skipValidation is false
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > validateDealStage > should skip API call when skipApiCall is true
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > validateDealStage > should cache results to prevent repeated API calls
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Error Path Handling > should handle deal creation error without making additional API calls
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Cache Management > should clear all caches when clearDealCaches is called
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Cache Management > should pre-warm cache without errors
[MockState] Cleared 0 mock companies from storage

stdout | test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Input Validation > should validate deal input and provide helpful suggestions
[MockState] Cleared 0 mock companies from storage

 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > applyDealDefaultsWithValidation > should skip API validation when skipValidation is true 2ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > applyDealDefaultsWithValidation > should make API call when skipValidation is false 1ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > validateDealStage > should skip API call when skipApiCall is true 0ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > validateDealStage > should cache results to prevent repeated API calls 0ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Error Path Handling > should handle deal creation error without making additional API calls 89ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Cache Management > should clear all caches when clearDealCaches is called 1ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Cache Management > should pre-warm cache without errors 0ms
 ✓ test/config/deal-defaults.test.ts > Deal Defaults - PR #389 Fix > Input Validation > should validate deal input and provide helpful suggestions 4ms
stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from simple domain
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from URLs
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from email addresses
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should handle invalid inputs
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from text containing domains
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should validate correct domains
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should reject invalid domains
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should handle edge cases
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should normalize domains correctly
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should handle empty input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should preserve subdomain structure
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should detect domain indicators in text
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should not detect domains in plain text
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should handle edge cases
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract single domain
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract multiple domains
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should remove duplicates
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle complex text
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle empty input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should normalize extracted domains
[MockState] Cleared 0 mock companies from storage

 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from simple domain 2ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from URLs 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from email addresses 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should handle invalid inputs 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from text containing domains 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should validate correct domains 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should reject invalid domains 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should handle edge cases 1ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should normalize domains correctly 2ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should handle empty input 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should preserve subdomain structure 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should detect domain indicators in text 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should not detect domains in plain text 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should handle edge cases 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract single domain 1ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract multiple domains 1ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should remove duplicates 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle complex text 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle empty input 0ms
 ✓ src/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should normalize extracted domains 0ms
stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create valid AttioTask with Issue #480 compatibility
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with both content and title for E2E compatibility
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create multiple tasks with valid structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create high priority task
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create completed task
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with assignee
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with linked records
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create valid AttioRecord for company
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create technology company
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create multiple companies with valid structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create valid AttioRecord for person
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create executive person
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create person with company association
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create valid AttioList
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create company list
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create list entry
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Test Environment Detection > should detect test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > UniversalMockFactory > should create mock data for all supported resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > UniversalMockFactory > should support all expected resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > MockDataInjector > should inject mock data in test environment
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > MockDataInjector > should create task using TaskMockInjector
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Compatibility with Existing E2E Patterns > should be compatible with existing E2ETaskFactory patterns
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Compatibility with Existing E2E Patterns > should maintain Issue #480 task_id preservation
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create valid AttioTask with Issue #480 compatibility 5ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with both content and title for E2E compatibility 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create multiple tasks with valid structure 1ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create high priority task 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create completed task 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with assignee 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > TaskMockFactory > should create task with linked records 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create valid AttioRecord for company 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create technology company 1ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > CompanyMockFactory > should create multiple companies with valid structure 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create valid AttioRecord for person 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create executive person 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > PersonMockFactory > should create person with company association 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create valid AttioList 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create company list 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > ListMockFactory > should create list entry 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Test Environment Detection > should detect test environment 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > UniversalMockFactory > should create mock data for all supported resource types 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > UniversalMockFactory > should support all expected resource types 1ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > MockDataInjector > should inject mock data in test environment 1ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > MockDataInjector > should create task using TaskMockInjector 1ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Compatibility with Existing E2E Patterns > should be compatible with existing E2ETaskFactory patterns 0ms
 ✓ test/utils/mock-factories/mock-factories-validation.test.ts > Mock Factories Validation > Compatibility with Existing E2E Patterns > should maintain Issue #480 task_id preservation 0ms
stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should accept valid batch sizes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject batch sizes exceeding the limit
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should apply stricter limits for delete operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should apply stricter limits for search operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject null or undefined items
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject empty arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should handle unknown resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should accept payloads within size limits
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should reject oversized payloads
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should check individual record sizes when requested
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should handle arrays of valid records
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should accept valid search queries
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should reject overly long search queries
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should accept valid filter objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should reject overly complex filter objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should validate both size and payload
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should fail on size validation first
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should skip payload check when not requested
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should split large arrays into chunks
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should handle arrays smaller than chunk size
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should handle empty arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should use resource-specific limits
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should return empty string for valid results
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should return the error message for invalid results
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should provide fallback message when error is missing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should prevent memory exhaustion from large batch sizes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should prevent payload bombs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should handle malicious search queries
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should enforce limits even with valid-looking data
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should accept valid batch sizes 1ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject batch sizes exceeding the limit 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should apply stricter limits for delete operations 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should apply stricter limits for search operations 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject null or undefined items 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should reject empty arrays 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchSize > should handle unknown resource types 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should accept payloads within size limits 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should reject oversized payloads 1ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should check individual record sizes when requested 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validatePayloadSize > should handle arrays of valid records 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should accept valid search queries 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should reject overly long search queries 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should accept valid filter objects 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateSearchQuery > should reject overly complex filter objects 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should validate both size and payload 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should fail on size validation first 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > validateBatchOperation > should skip payload check when not requested 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should split large arrays into chunks 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should handle arrays smaller than chunk size 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should handle empty arrays 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > splitBatchIntoChunks > should use resource-specific limits 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should return empty string for valid results 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should return the error message for invalid results 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > createSafeBatchError > should provide fallback message when error is missing 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should prevent memory exhaustion from large batch sizes 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should prevent payload bombs 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should handle malicious search queries 0ms
 ✓ test/utils/batch-validation.test.ts > Batch Validation > DoS Protection Scenarios > should enforce limits even with valid-looking data 0ms
stdout | test/utils/validation.test.ts > validation > validateInput > should validate a simple object against a schema
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should detect missing required properties
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate type mismatches
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate nested objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate array items
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate string constraints
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate number constraints
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateInput > should validate enum values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateRequest > should return null for valid input
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/validation.test.ts > validation > validateRequest > should return formatted error for invalid input
[MockState] Cleared 0 mock companies from storage

stdout | test/api/list-details.api.test.ts > get-list-details API test
Running Attio API integration tests with real API key

stdout | test/api/list-details.api.test.ts > get-list-details API test > should format list details through MCP tool
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/validation.test.ts > validation > validateInput > should validate a simple object against a schema 2ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should detect missing required properties 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate type mismatches 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate nested objects 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate arrays 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate array items 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate string constraints 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate number constraints 0ms
 ✓ test/utils/validation.test.ts > validation > validateInput > should validate enum values 1ms
 ✓ test/utils/validation.test.ts > validation > validateRequest > should return null for valid input 0ms
 ✓ test/utils/validation.test.ts > validation > validateRequest > should return formatted error for invalid input 1ms
stdout | test/api/list-details.api.test.ts > get-list-details API test > should format list details through MCP tool
Formatted Response: List: Test List
ID: a1b2c3d4-e5f6-7890-abcd-ef1234567890

stdout | test/api/list-details.api.test.ts > get-list-details API test > should handle non-existent list ID
[MockState] Cleared 0 mock companies from storage

stdout | test/api/list-details.api.test.ts > get-list-details API test > should handle non-existent list ID
Full Error Response: {
  "content": [
    {
      "type": "text",
      "text": "Error executing tool 'get-record-details': Record not found"
    }
  ],
  "isError": true,
  "error": {
    "code": 500,
    "message": "Record not found",
    "type": "tool_execution_error",
    "details": {
      "tool": "get-record-details",
      "errorType": "AttioApiError",
      "stack": "EnhancedApiError: Record not found\n    at getListDetails (/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/objects/lists.ts:140:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at Function.retrieveListRecord (/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/services/UniversalRetrievalService.ts:304:20)\n    at Function.getRecordDetails (/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/services/UniversalRetrievalService.ts:125:16)\n    at Object.handler (/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/handlers/tool-configs/universal/core-operations.ts:213:14)\n    at executeToolRequest (/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/handlers/tools/dispatcher/core.ts:363:23)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/list-details.api.test.ts:119:24\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20",
      "additionalInfo": null
    }
  }
}

 ↓ test/api/list-details.api.test.ts > get-list-details API test > should fetch list details directly from API
 ✓ test/api/list-details.api.test.ts > get-list-details API test > should format list details through MCP tool 13ms
 ✓ test/api/list-details.api.test.ts > get-list-details API test > should handle non-existent list ID 8ms
stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should parse simple string name "John Doe" into structured format
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle single name "Madonna"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle three-part names "John Middle Doe"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle structured input with first and last name
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should preserve title in structured input
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle empty string by returning null
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle whitespace-only string by returning null
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle null input
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle undefined input
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should preserve existing full_name in structured input
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle complex names with multiple middle names
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle extra whitespace in names
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should parse simple string name "John Doe" into structured format 1ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle single name "Madonna" 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle three-part names "John Middle Doe" 1ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle structured input with first and last name 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should preserve title in structured input 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle empty string by returning null 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle whitespace-only string by returning null 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle null input 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle undefined input 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should preserve existing full_name in structured input 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle complex names with multiple middle names 0ms
 ✓ test/unit/personal-name-parser.test.ts > Personal Name Parser > should handle extra whitespace in names 2ms
stdout | test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should default to basic search when search_type is not specified
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use content search when search_type is CONTENT
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use custom fields when specified
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use exact match when match_type is EXACT
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should apply relevance ranking when sort is RELEVANCE
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Content Search for People > should search across default people fields
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Content Search for People > should handle people search with custom fields
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should rank exact matches highest
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should rank by number of occurrences
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should handle partial word matches
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle empty query gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle null/undefined fields gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle special characters in search query
[MockState] Cleared 0 mock companies from storage

stdout | test/services/content-search.test.ts > Content Search Functionality > Pagination with Content Search > should pass pagination parameters correctly
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should default to basic search when search_type is not specified 8ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use content search when search_type is CONTENT 1ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use custom fields when specified 1ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should use exact match when match_type is EXACT 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > UniversalSearchService.searchRecords > should apply relevance ranking when sort is RELEVANCE 1ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Content Search for People > should search across default people fields 1ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Content Search for People > should handle people search with custom fields 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should rank exact matches highest 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should rank by number of occurrences 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Relevance Ranking Algorithm > should handle partial word matches 2ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle empty query gracefully 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle null/undefined fields gracefully 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Edge Cases > should handle special characters in search query 0ms
 ✓ test/services/content-search.test.ts > Content Search Functionality > Pagination with Content Search > should pass pagination parameters correctly 0ms
stdout | test/e2e/suites/error-handling-auth.e2e.test.ts > Critical Error Handling E2E – Auth & Authorization > handles authentication-like failures gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation
🔬 Starting E2E failure analysis in test environment

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze high priority task creation pattern
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze high priority task creation pattern
🔍 Analyzing high priority task creation...
E2E Task Data: {
  title: [32m'Test Task TEST_task_1756513017654_gv1u9w'[39m,
  content: [32m'E2E Test Task created for testing purposes - TEST_task_1756513017654_gv1u9w'[39m,
  due_date: [32m'2025-09-06'[39m,
  status: [32m'open'[39m,
  priority: [32m'high'[39m
}
Mock Task Created: {
  id: {
    record_id: [32m'75dae0fa-8e35-44ee-a08a-d6729389135f'[39m,
    task_id: [32m'75dae0fa-8e35-44ee-a08a-d6729389135f'[39m,
    workspace_id: [32m'mock-workspace-id'[39m
  },
  content: [32m'Test Task TEST_task_1756513017654_gv1u9w'[39m,
  title: [32m'NOT_PROVIDED'[39m,
  hasContent: [33mtrue[39m,
  hasTitle: [33mfalse[39m,
  contentOrTitle: [32m'Test Task TEST_task_1756513017654_gv1u9w'[39m
}
✅ High priority task creation pattern validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task assignee creation pattern
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task assignee creation pattern
🔍 Analyzing task assignee creation...
Task with Assignee: {
  taskId: [32m'cba32132-3e56-448a-a49c-6f6f115c342b'[39m,
  assigneeId: [32m'53580b47-716a-4926-bacd-371e28edca2e'[39m,
  hasAssignee: [33mtrue[39m
}
✅ Task assignee creation pattern validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task lifecycle workflow patterns
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task lifecycle workflow patterns
🔍 Analyzing task lifecycle workflow...
Step 1 - Created: pending
Step 2 - In Progress: in_progress
Step 3 - Completed: completed
✅ Task lifecycle workflow patterns validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze concurrent task operations pattern
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze concurrent task operations pattern
🔍 Analyzing concurrent task operations...

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze concurrent task operations pattern
✅ Concurrent task operations pattern validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate "not found" error patterns match E2E expectations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate "not found" error patterns match E2E expectations
🔍 Analyzing error message patterns...
✅ Error pattern valid: "Task not found with ID invalid-task-id"
✅ Error pattern valid: "Company not found with ID invalid-company-id"
✅ Error pattern valid: "Person not found with ID invalid-person-id"
✅ Error pattern valid: "List does not exist"
✅ Error pattern valid: "Invalid Record ID: malformed-id"
✅ All error message patterns validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate E2E test tool error format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate E2E test tool error format
🔍 Analyzing E2E tool error format...
✅ Tool error format valid: "Error executing tool 'update-record': Task not found with ID invalid-task-123"
✅ Tool error format valid: "Error executing tool 'delete-record': List not found with ID invalid-list-456"
✅ Tool error format valid: "Error executing tool 'get-record-details': Company not found with ID invalid-company-789"
✅ E2E tool error formats validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate company ID structure for notes management tests
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate company ID structure for notes management tests
🔍 Analyzing company ID structure for notes...
Company ID Structure: { hasId: [33mtrue[39m, hasRecordId: [33mtrue[39m, hasWorkspaceId: [33mtrue[39m }
✅ Company ID structure validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate person ID structure for notes management tests
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate person ID structure for notes management tests
🔍 Analyzing person ID structure for notes...
Person ID Structure: { hasId: [33mtrue[39m, hasRecordId: [33mtrue[39m, hasWorkspaceId: [33mtrue[39m }
✅ Person ID structure validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate list ID structure differences
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate list ID structure differences
🔍 Analyzing list ID structure...
List ID Structure: { hasId: [33mtrue[39m, hasListId: [33mtrue[39m, hasTitle: [33mtrue[39m, hasName: [33mtrue[39m }
✅ List ID structure validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Universal Tools Integration Analysis > should validate universal tool response format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Universal Tools Integration Analysis > should validate universal tool response format
🔍 Analyzing universal tool response format...
✅ task response structure valid
✅ company response structure valid
✅ person response structure valid
✅ list response structure valid
✅ Universal tool response formats validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Mock Factory Performance Analysis > should validate mock factory creation speed
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Mock Factory Performance Analysis > should validate mock factory creation speed
🔍 Analyzing mock factory performance...
Mock Factory Performance: { totalCreated: [33m20[39m, durationMs: [33m1[39m, averageMs: [33m0.05[39m }
✅ Mock factory performance validated

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Comprehensive E2E Scenario Simulation > should simulate complete E2E test data setup workflow
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Comprehensive E2E Scenario Simulation > should simulate complete E2E test data setup workflow
🔍 Simulating complete E2E workflow...
E2E Workflow Simulation Results: { companies: [33m2[39m, people: [33m2[39m, tasks: [33m4[39m, allValid: [33mtrue[39m }
✅ Complete E2E workflow simulation validated

 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze high priority task creation pattern 8ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task assignee creation pattern 1ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze task lifecycle workflow patterns 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Task Creation Failure Analysis > should analyze concurrent task operations pattern 1ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate "not found" error patterns match E2E expectations 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Error Message Pattern Analysis > should validate E2E test tool error format 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate company ID structure for notes management tests 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate person ID structure for notes management tests 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Data Structure Compatibility Analysis > should validate list ID structure differences 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Universal Tools Integration Analysis > should validate universal tool response format 0ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Mock Factory Performance Analysis > should validate mock factory creation speed 1ms
 ✓ test/utils/e2e-failure-analysis.test.ts > E2E Failure Analysis - Issue #480 Root Cause Investigation > Comprehensive E2E Scenario Simulation > should simulate complete E2E test data setup workflow 2ms
 ✓ test/e2e/suites/error-handling-auth.e2e.test.ts > Critical Error Handling E2E – Auth & Authorization > handles authentication-like failures gracefully 36ms
stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should validate and convert attributes based on their types
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should handle null values correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should throw an error for invalid attribute values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should proceed with original value if type info cannot be determined
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeUpdate integration > should validate and convert a single attribute value
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/company-validator.test.ts > Company Validator > validateAttributeUpdate integration > should throw an error for invalid attribute value
[MockState] Cleared 0 mock companies from storage

 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should validate and convert attributes based on their types 2ms
 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should handle null values correctly 0ms
 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should throw an error for invalid attribute values 1ms
 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeTypes > should proceed with original value if type info cannot be determined 0ms
 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeUpdate integration > should validate and convert a single attribute value 0ms
 ✓ test/validators/company-validator.test.ts > Company Validator > validateAttributeUpdate integration > should throw an error for invalid attribute value 0ms
stdout | test/services/UniversalSearchService-records-tasks.test.ts > UniversalSearchService - records/tasks > should list object records
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalSearchService-records-tasks.test.ts > UniversalSearchService - records/tasks > should list tasks and convert to records
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalSearchService-records-tasks.test.ts > UniversalSearchService - records/tasks > should list object records 3ms
 ✓ test/services/UniversalSearchService-records-tasks.test.ts > UniversalSearchService - records/tasks > should list tasks and convert to records 1ms
stdout | test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should return an empty config when no files exist
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should load and merge default and user configurations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should handle invalid JSON in configuration files
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > writeMappingConfig > should write configuration to file
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should return mapped slug for known attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > writeMappingConfig > should create directory if it does not exist
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should return original attribute name if no mapping exists
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle object-specific mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should NOT fall into infinite recursion when handling special cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle snake case conversion without infinite recursion
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle edge cases in snake case conversion
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should update a specific section with merged mappings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should replace section when merge is false
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should create missing sections as needed
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should return mapped slug for known attributes 2ms
 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should return original attribute name if no mapping exists 2ms
 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle object-specific mappings 0ms
 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should NOT fall into infinite recursion when handling special cases 1ms
 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle snake case conversion without infinite recursion 1ms
 ✓ test/utils/attribute-mappers.test.ts > Attribute Mappers > getAttributeSlug > should handle edge cases in snake case conversion 0ms
stdout | test/utils/response-formatter.test.ts > response-formatter > formatSuccessResponse > should create a simple success response
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatSuccessResponse > should include metadata if provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should format a list of items
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should handle empty list
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should return an empty config when no files exist 6ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should load and merge default and user configurations 0ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > loadMappingConfig > should handle invalid JSON in configuration files 4ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > writeMappingConfig > should write configuration to file 4ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > writeMappingConfig > should create directory if it does not exist 4ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should update a specific section with merged mappings 0ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should replace section when merge is false 0ms
 ✓ test/utils/config-loader.test.ts > Configuration Loader > updateMappingSection > should create missing sections as needed 0ms
stdout | test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should include pagination info if provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatRecordResponse > should format a single record
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatJsonResponse > should format data as JSON
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatMarkdownResponse > should format markdown content
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatMultiPartResponse > should combine multiple content parts
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatEmptyResponse > should create a response with no content
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatEmptyResponse > should include metadata if provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should create a standardized error response
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should include details if provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should use default values if not provided
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/response-formatter.test.ts > response-formatter > formatSuccessResponse > should create a simple success response 3ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatSuccessResponse > should include metadata if provided 1ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should format a list of items 1ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should handle empty list 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatListResponse > should include pagination info if provided 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatRecordResponse > should format a single record 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatJsonResponse > should format data as JSON 1ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatMarkdownResponse > should format markdown content 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatMultiPartResponse > should combine multiple content parts 10ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatEmptyResponse > should create a response with no content 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatEmptyResponse > should include metadata if provided 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should create a standardized error response 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should include details if provided 0ms
 ✓ test/utils/response-formatter.test.ts > response-formatter > formatErrorResponse > should use default values if not provided 0ms
stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should pass validation when no read-only fields are provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should pass validation when read-only fields are not in data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should fail validation when read-only fields are provided in data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should ignore fields with undefined values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should pass validation when all required fields are present
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should fail validation when required fields are missing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should fail validation when required fields are null or empty
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for valid single select value
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for valid multiselect values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should fail validation for invalid single select value
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should fail validation for invalid multiselect values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for null or undefined values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should use default field label when none provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should pass validation for valid record data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should fail validation for read-only fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should fail validation for missing required fields in create operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should not check required fields for update operations
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should warn about unrecognized fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should handle metadata fetch errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should warn when no metadata is available
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should create basic error response
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for missing fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for read-only fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for invalid fields
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should not include suggestions when there are no issues to suggest fixes for
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from standard note structure
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from nested data structure
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from values structure (Attio-style)
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should handle alternative content field names
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should handle body field as content source
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should show "No content" when no content fields are present
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should handle missing title gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should handle missing timestamp gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Truncation > should truncate long content at 200 characters
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Truncation > should not truncate short content
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Multiple Notes > should handle multiple notes with different structures
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle empty notes array
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should pass validation when no read-only fields are provided 6ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should pass validation when read-only fields are not in data 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should fail validation when read-only fields are provided in data 1ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateReadOnlyFields > should ignore fields with undefined values 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should pass validation when all required fields are present 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should fail validation when required fields are missing 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateFieldExistence > should fail validation when required fields are null or empty 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for valid single select value 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for valid multiselect values 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should fail validation for invalid single select value 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should fail validation for invalid multiselect values 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should pass validation for null or undefined values 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateSelectField > should use default field label when none provided 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should pass validation for valid record data 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should fail validation for read-only fields 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should fail validation for missing required fields in create operations 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should not check required fields for update operations 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should warn about unrecognized fields 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should handle metadata fetch errors gracefully 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > validateRecordFields > should warn when no metadata is available 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should create basic error response 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for missing fields 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for read-only fields 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should include suggestions for invalid fields 0ms
 ✓ test/utils/enhanced-validation.test.ts > Enhanced Validation Utils > createEnhancedErrorResponse > should not include suggestions when there are no issues to suggest fixes for 0ms
stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle null notes
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle undefined notes
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from standard note structure 11ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from nested data structure 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should extract content from values structure (Attio-style) 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should handle alternative content field names 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Extraction > should handle body field as content source 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should show "No content" when no content fields are present 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should handle missing title gracefully 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Fallback Handling > should handle missing timestamp gracefully 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Truncation > should truncate long content at 200 characters 1ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Content Truncation > should not truncate short content 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Multiple Notes > should handle multiple notes with different structures 1ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle empty notes array 1ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle null notes 0ms
 ✓ test/handlers/tool-configs/companies/notes.test.ts > Company Notes Formatter > Edge Cases > should handle undefined notes 0ms
stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  write to custom object with { processEnv: myObject }

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should create company successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "postal_code" to correct attribute slug
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should create person successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should format create result correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > update-record tool > should update company successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > update-record tool > should format update result correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should delete record successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should format successful delete result correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should format failed delete result correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "postal_code" to correct attribute slug
postal_code maps to: "postal_code"

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "Postal Code" (display name) to correct attribute slug
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "Postal Code" (display name) to correct attribute slug
"Postal Code" maps to: "postal_code"

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "ZIP" to correct attribute slug
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "ZIP" to correct attribute slug
"ZIP" maps to: "postal_code"

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should have consistent mapping between postal_code variants
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should have consistent mapping between postal_code variants
All variants map to: postal_code

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should not map to non-existent "zip" slug if that causes the API error
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should not map to non-existent "zip" slug if that causes the API error
Current mapping result for postal_code: "postal_code"

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > mapping priority and fallback > should check which mapping source is being used
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > mapping priority and fallback > should check which mapping source is being used
Testing mapping sources for postal_code:
Final result: "postal_code"
"postal_code" -> "postal_code"
"Postal Code" -> "postal_code"
"ZIP" -> "postal_code"
"zip" -> "postal_code"

stdout | test/utils/postal-code-mapping.test.ts > Company Creation with postal_code - Integration > should test the attribute validation flow
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/postal-code-mapping.test.ts > Company Creation with postal_code - Integration > should test the attribute validation flow
name: "Test Company" -> slug: "name"
city: "Corona" -> slug: "city"
state: "CA" -> slug: "state"
postal_code: "92584" -> slug: "postal_code"
street_address: "4226 Green River Rd" -> slug: "street_address"

 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should create company successfully 2ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should create person successfully 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > create-record tool > should format create result correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > update-record tool > should update company successfully 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > update-record tool > should format update result correctly 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should delete record successfully 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should format successful delete result correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-crud.test.ts > Universal Core Operations CRUD Tests > delete-record tool > should format failed delete result correctly 1ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "postal_code" to correct attribute slug 4ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "Postal Code" (display name) to correct attribute slug 1ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should map "ZIP" to correct attribute slug 1ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should have consistent mapping between postal_code variants 2ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > postal_code field mapping > should not map to non-existent "zip" slug if that causes the API error 1ms
 ✓ test/utils/postal-code-mapping.test.ts > Postal Code Field Mapping - Issue #219 > mapping priority and fallback > should check which mapping source is being used 5ms
 ✓ test/utils/postal-code-mapping.test.ts > Company Creation with postal_code - Integration > should test the attribute validation flow 1ms
stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldValidationError > should create a field validation error with suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldValidationError > should create a field validation error without suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createSelectOptionError > should create a select option error with valid options
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createSelectOptionError > should handle few options without truncation
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createMultiSelectOptionError > should create a multi-select option error
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createReadOnlyFieldError > should create a read-only field error for single field
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createReadOnlyFieldError > should create a read-only field error for multiple fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createUnknownFieldError > should create an unknown field error with suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createUnknownFieldError > should create an unknown field error without suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldTypeMismatchError > should create a field type mismatch error
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createRequiredFieldError > should create a required field error for single field
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createRequiredFieldError > should create a required field error for multiple fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should format an enhanced error response with all components
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should format an error response without suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should include help URL when provided
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/utils/error-response-utils.test.ts > error-response-utils > createErrorResponse > should create a simple error response
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldValidationError > should create a field validation error with suggestions 2ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldValidationError > should create a field validation error without suggestions 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createSelectOptionError > should create a select option error with valid options 1ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createSelectOptionError > should handle few options without truncation 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createMultiSelectOptionError > should create a multi-select option error 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createReadOnlyFieldError > should create a read-only field error for single field 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createReadOnlyFieldError > should create a read-only field error for multiple fields 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createUnknownFieldError > should create an unknown field error with suggestions 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createUnknownFieldError > should create an unknown field error without suggestions 1ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createFieldTypeMismatchError > should create a field type mismatch error 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createRequiredFieldError > should create a required field error for single field 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createRequiredFieldError > should create a required field error for multiple fields 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should format an enhanced error response with all components 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should format an error response without suggestions 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > formatEnhancedErrorResponse > should include help URL when provided 0ms
 ✓ test/unit/utils/error-response-utils.test.ts > error-response-utils > createErrorResponse > should create a simple error response 0ms
stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle basic objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle nested circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle functions
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle undefined values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle symbols
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle Error objects
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle deep objects without exceeding max depth
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should truncate very long strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should validate correct JSON strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should detect invalid JSON strings
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect direct circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect nested circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should return false for objects without circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > createSafeCopy > should create a safe copy of an object with circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should sanitize MCP responses with circular references
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should handle non-object responses
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/json-serializer.test.ts > JSON Serializer > Real-world MCP response scenarios > should handle complex nested response objects
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle basic objects 2ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle circular references 1ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle nested circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle functions 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle undefined values 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle symbols 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle Error objects 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should handle deep objects without exceeding max depth 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > safeJsonStringify > should truncate very long strings 1ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should validate correct JSON strings 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > validateJsonString > should detect invalid JSON strings 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect direct circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should detect nested circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > hasCircularReferences > should return false for objects without circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > createSafeCopy > should create a safe copy of an object with circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should sanitize MCP responses with circular references 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > sanitizeMcpResponse > should handle non-object responses 0ms
 ✓ test/utils/json-serializer.test.ts > JSON Serializer > Real-world MCP response scenarios > should handle complex nested response objects 1ms
stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > passes through UniversalValidationError unchanged
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > passes through EnhancedApiError unchanged
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > extracts message from Error objects
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > extracts message from objects with message property
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > handles string errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > handles unknown error types
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > classifies USER_ERROR for not found messages
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > defaults to SYSTEM_ERROR for unclassified errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > includes operation suggestion in error details
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > includes original error as cause
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > passes through UniversalValidationError unchanged 1ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > passes through EnhancedApiError unchanged 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > extracts message from Error objects 1ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > extracts message from objects with message property 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > handles string errors 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > handles unknown error types 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > classifies USER_ERROR for not found messages 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > defaults to SYSTEM_ERROR for unclassified errors 0ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > includes operation suggestion in error details 1ms
 ✓ test/services/ErrorService-create-universal-error.test.ts > ErrorService.createUniversalError > includes original error as cause 0ms
stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from simple domain
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from URLs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from email addresses
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should handle invalid inputs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from text containing domains
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should validate correct domains
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should reject invalid domains
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should handle edge cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should normalize domains correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should pass for valid field validation
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should return error message for invalid validation when not throwing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should handle empty input
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should preserve subdomain structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should detect domain indicators in text
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should throw UniversalValidationError for invalid validation when throwing enabled
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should not detect domains in plain text
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should handle edge cases
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract single domain
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should truncate suggestions in error message
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateEmailAddresses > should validate complex email structures and throw on invalid formats
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateEmailAddresses > should handle null or undefined record data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract multiple domains
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should pass for valid field validation 1ms
 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should return error message for invalid validation when not throwing 0ms
 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should throw UniversalValidationError for invalid validation when throwing enabled 1ms
 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateFieldsWithErrorHandling > should truncate suggestions in error message 0ms
 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateEmailAddresses > should validate complex email structures and throw on invalid formats 1ms
 ✓ test/services/ValidationService-fields-and-emails.test.ts > ValidationService > validateEmailAddresses > should handle null or undefined record data 0ms
stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should remove duplicates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle complex text
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle empty input
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should normalize extracted domains
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from simple domain 1ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from URLs 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from email addresses 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should handle invalid inputs 1ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractDomain > should extract domain from text containing domains 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should validate correct domains 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should reject invalid domains 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > isValidDomain > should handle edge cases 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should normalize domains correctly 2ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should handle empty input 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > normalizeDomain > should preserve subdomain structure 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should detect domain indicators in text 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should not detect domains in plain text 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > hasDomainIndicators > should handle edge cases 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract single domain 2ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should extract multiple domains 2ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should remove duplicates 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle complex text 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should handle empty input 0ms
 ✓ test/utils/domain-utils.test.ts > Domain Utilities > extractAllDomains > should normalize extracted domains 0ms
stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should call the API with the correct payload format
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw error when objectType is not provided
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should omit entry_values if initialValues not provided
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid listId
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid recordId
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid objectType
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should accept valid ResourceType values
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should call the generic function first before fallback
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/lists.add-record.test.ts > addRecordToList Tests > should provide detailed error messages for validation errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should call the API with the correct payload format 19ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw error when objectType is not provided 4ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should omit entry_values if initialValues not provided 1ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid listId 0ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid recordId 0ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should throw an error for invalid objectType 0ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should accept valid ResourceType values 0ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should call the generic function first before fallback 0ms
 ✓ test/objects/lists.add-record.test.ts > addRecordToList Tests > should provide detailed error messages for validation errors 1ms
stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > returns resource type suggestion for invalid resource
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides date format suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides date range suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests simpler filters for unsupported combinations
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests batch size limits
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests rate limit handling
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests field discovery for unknown attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides generic not found suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides authentication suggestions for unauthorized errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides duplicate record suggestions for create
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides uniqueness suggestions
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > handles string errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > handles object errors with message property
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > returns undefined for unknown patterns
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > returns resource type suggestion for invalid resource 1ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides date format suggestions 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides date range suggestions 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests simpler filters for unsupported combinations 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests batch size limits 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests rate limit handling 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > suggests field discovery for unknown attributes 1ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides generic not found suggestions 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides authentication suggestions for unauthorized errors 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides duplicate record suggestions for create 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > provides uniqueness suggestions 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > handles string errors 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > handles object errors with message property 0ms
 ✓ test/services/ErrorService-suggestions.test.ts > ErrorService.getOperationSuggestion > returns undefined for unknown patterns 0ms
stdout | test/services/UniversalRetrievalService-search-filter.test.ts > UniversalRetrievalService > Field filtering > should filter non-AttioRecord objects correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalRetrievalService-search-filter.test.ts > UniversalRetrievalService > Field filtering > should return full data when no fields specified
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalRetrievalService-search-filter.test.ts > UniversalRetrievalService > Field filtering > should filter non-AttioRecord objects correctly 2ms
 ✓ test/services/UniversalRetrievalService-search-filter.test.ts > UniversalRetrievalService > Field filtering > should return full data when no fields specified 1ms
stdout | test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a company record
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should handle task deletion with mock data when USE_MOCK_DATA is true
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should log mock injection in development mode
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should log mock injection when VERBOSE_TESTS is true
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a company record 6ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a person record 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a list record 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a records object record 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a deals object record 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should delete a task record in normal mode 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should handle task deletion with mock data in E2E mode 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should handle task deletion with mock data when USE_MOCK_DATA is true 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should handle task deletion with mock data in test mode 1ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should bypass mock data when VITEST is set 1ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should throw error for invalid task ID in mock mode 1ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should log mock injection in development mode 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should log mock injection when VERBOSE_TESTS is true 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should throw error for unsupported resource type 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > deleteRecord > should propagate errors from underlying delete functions 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Edge Cases > should handle empty record IDs 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Edge Cases > should handle null-like record IDs gracefully 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Edge Cases > should handle very long record IDs 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Environment Detection Logic > should not use mock data in production 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Environment Detection Logic > should not use mock data when SKIP_INTEGRATION_TESTS is true 0ms
 ✓ test/services/UniversalDeleteService.test.ts > UniversalDeleteService > Environment Detection Logic > should use mock data with complex environment conditions 0ms
stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should accept boolean values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert string values to booleans
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert numeric values to booleans
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should reject invalid boolean values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should accept number values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert string values to numbers
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert boolean values to numbers
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should reject invalid number values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should accept string values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert number values to strings
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert boolean values to strings
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert Date objects to ISO strings
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should accept Date objects
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert ISO string dates
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert timestamp numbers
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject invalid date values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should accept array values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should convert non-array values to arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should accept object values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should reject non-object values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should accept string values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should accept array of strings
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should convert array of non-strings to array of strings
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should accept string IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract record_id from objects
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract id from objects as fallback
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should process arrays of records
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should reject invalid record references
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null/undefined handling > should always accept null values
[MockState] Cleared 0 mock companies from storage

stdout | test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null/undefined handling > should always accept undefined values
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts
[dotenv@17.2.1] injecting env (6) from .env -- tip: ⚙️  enable debug logging with { debug: true }

 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should accept boolean values 2ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert string values to booleans 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should convert numeric values to booleans 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Boolean validation > should reject invalid boolean values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should accept number values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert string values to numbers 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should convert boolean values to numbers 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Number validation > should reject invalid number values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should accept string values 2ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert number values to strings 2ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert boolean values to strings 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > String validation > should convert Date objects to ISO strings 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should accept Date objects 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert ISO string dates 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should convert timestamp numbers 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Date validation > should reject invalid date values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should accept array values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Array validation > should convert non-array values to arrays 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should accept object values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Object validation > should reject non-object values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should accept string values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should accept array of strings 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Select validation > should convert array of non-strings to array of strings 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should accept string IDs 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract record_id from objects 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should extract id from objects as fallback 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should process arrays of records 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Record reference validation > should reject invalid record references 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null/undefined handling > should always accept null values 0ms
 ✓ test/validators/attribute-validator.test.ts > Attribute Validator > validateAttributeValue > Null/undefined handling > should always accept undefined values 0ms
stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should get attributes successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should format array attributes correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should format object attributes correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > discover-attributes tool > should discover attributes successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > discover-attributes tool > should format discovered attributes correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should get detailed info successfully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should format detailed info with values correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should format detailed info as object correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should display task content when available
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should fallback to Unnamed for tasks without content
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should handle tasks with empty content values
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should prioritize other fields over content for non-task records
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should display task content when available
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should fallback to Unnamed for tasks without content
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should handle mixed field priority correctly
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should get attributes successfully 3ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should format array attributes correctly 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-attributes tool > should format object attributes correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > discover-attributes tool > should discover attributes successfully 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > discover-attributes tool > should format discovered attributes correctly 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should get detailed info successfully 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should format detailed info with values correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > get-detailed-info tool > should format detailed info as object correctly 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should display task content when available 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should fallback to Unnamed for tasks without content 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should handle tasks with empty content values 1ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > search-records formatResult for tasks > should prioritize other fields over content for non-task records 2ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should display task content when available 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should fallback to Unnamed for tasks without content 0ms
 ✓ test/handlers/tool-configs/universal/core-operations-attributes.test.ts > Universal Core Operations Attributes Tests > Task Display Formatting (Issue #472) > get-record-details formatResult for tasks > should handle mixed field priority correctly 0ms
stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should validate a valid filters object
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for undefined filters with STRUCTURE category
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for filters missing filters property
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for non-array filters property
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should return empty array for valid filters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing attribute
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing attribute.slug
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect invalid condition when validation is enabled
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should not validate condition when validation is disabled
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should return empty string for empty array
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should format a single error correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should format multiple errors correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should validate a valid filters object
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should accept empty filters array
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should throw detailed error when all filters are invalid with appropriate category
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect null filter
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect non-object filter
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing attribute
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing attribute.slug
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect invalid condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return simple example by default
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return OR logic example when requested
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return multiple conditions example when requested
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should validate a valid filters object 2ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for undefined filters with STRUCTURE category 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for filters missing filters property 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFiltersObject > should throw error for non-array filters property 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should return empty array for valid filters 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing attribute 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing attribute.slug 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect missing condition 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should detect invalid condition when validation is enabled 1ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > collectInvalidFilters > should not validate condition when validation is disabled 1ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should return empty string for empty array 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should format a single error correctly 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > formatInvalidFiltersError > should format multiple errors correctly 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should validate a valid filters object 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should accept empty filters array 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > validateFilters > should throw detailed error when all filters are invalid with appropriate category 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect null filter 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect non-object filter 1ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing attribute 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing attribute.slug 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect missing condition 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getInvalidFilterReason > should detect invalid condition 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return simple example by default 0ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return OR logic example when requested 1ms
 ✓ test/utils/filters/validation-utils.test.ts > Filter Validation Utilities > getFilterExample > should return multiple conditions example when requested 0ms
stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyFilter > should create a valid relationship filter for people by company
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyFilter > should throw an error if company filter is invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleFilter > should create a valid relationship filter for companies by people
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleFilter > should throw an error if people filter is invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByListFilter > should create a valid filter for records by list ID
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByListFilter > should throw an error if list ID is empty
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyListFilter > should create a valid filter for people by company list
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyListFilter > should throw an error if list ID is empty
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleListFilter > should create a valid filter for companies by people list
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleListFilter > should throw an error if list ID is empty
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByNotesFilter > should create a valid filter for records by note content
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByNotesFilter > should throw an error if search text is empty
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyFilter > should create a valid relationship filter for people by company 8ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyFilter > should throw an error if company filter is invalid 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleFilter > should create a valid relationship filter for companies by people 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleFilter > should throw an error if people filter is invalid 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByListFilter > should create a valid filter for records by list ID 1ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByListFilter > should throw an error if list ID is empty 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyListFilter > should create a valid filter for people by company list 1ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createPeopleByCompanyListFilter > should throw an error if list ID is empty 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleListFilter > should create a valid filter for companies by people list 1ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createCompaniesByPeopleListFilter > should throw an error if list ID is empty 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByNotesFilter > should create a valid filter for records by note content 0ms
 ✓ test/utils/relationship-utils.test.ts > Relationship Utilities > createRecordsByNotesFilter > should throw an error if search text is empty 0ms
stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > validates correct resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > corrects invalid resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > handles typos in resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > provides suggestion for unknown types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > suggests close field names
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > suggests partial matches
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > provides fallback message for poor matches
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > handles known common mistakes
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > handles unsupported resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > validates correct fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > detects invalid fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > provides suggestions for invalid fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > handles empty field objects
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > validates correct resource types 9ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > corrects invalid resource types 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > handles typos in resource types 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateResourceType() > provides suggestion for unknown types 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > suggests close field names 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > suggests partial matches 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > provides fallback message for poor matches 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > handles known common mistakes 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > getFieldSuggestions() > handles unsupported resource types 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > validates correct fields 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > detects invalid fields 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > provides suggestions for invalid fields 2ms
 ✓ test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts > field-mapper – validation and suggestions > validateFields() > handles empty field objects 0ms
stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform a single filter with AND logic
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform multiple filters with AND logic
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform multiple filters with OR logic
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should handle empty filters array
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object for undefined filters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object for non-array filters property
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object when all filters in OR condition are invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object when all filters in AND condition are invalid
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should throw error for invalid condition type
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformSingleFilterToApi > should transform a single filter correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/translators.test.ts > Filter Translators > transformSingleFilterToApi > should throw error for invalid filter structure
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform a single filter with AND logic 2ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform multiple filters with AND logic 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should transform multiple filters with OR logic 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Valid filter structures > should handle empty filters array 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object for undefined filters 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object for non-array filters property 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object when all filters in OR condition are invalid 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should return empty object when all filters in AND condition are invalid 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformFiltersToApiFormat > Invalid filter structures > should throw error for invalid condition type 1ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformSingleFilterToApi > should transform a single filter correctly 0ms
 ✓ test/utils/filters/translators.test.ts > Filter Translators > transformSingleFilterToApi > should throw error for invalid filter structure 0ms
stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > transforms a single filter condition correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > returns empty object for undefined filters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > returns empty object for empty filters array
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > creates AND logic for multiple filters by default
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > creates OR logic when matchAny is true
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > supports various filter condition types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > throws FilterValidationError for invalid filter condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips filters with missing attribute slug
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips filters with missing condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips condition validation when validateConditions is false
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > transforms a single filter condition correctly 2ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > returns empty object for undefined filters 1ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > returns empty object for empty filters array 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > creates AND logic for multiple filters by default 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > creates OR logic when matchAny is true 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > supports various filter condition types 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > throws FilterValidationError for invalid filter condition 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips filters with missing attribute slug 0ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips filters with missing condition 1ms
 ✓ test/utils/filter-transform.test.ts > transformFiltersToApiFormat > skips condition validation when validateConditions is false 1ms
stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should map common task field variations to correct field names
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should handle camelCase field variations correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with start date only
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should validate required fields for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with end date only
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with both start and end dates
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createCreatedDateFilter > should create a filter for record creation date
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createModifiedDateFilter > should create a filter for record modification date
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should create a filter for last interaction date
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should include interaction type when specified
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should not include interaction type when ANY is specified
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/activity-filters.test.ts > Activity and Historical filtering > createActivityFilter > should create a filter for activity
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with start date only 6ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with end date only 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createDateRangeFilter > should create a filter with both start and end dates 1ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createCreatedDateFilter > should create a filter for record creation date 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createModifiedDateFilter > should create a filter for record modification date 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should create a filter for last interaction date 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should include interaction type when specified 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createLastInteractionFilter > should not include interaction type when ANY is specified 0ms
 ✓ test/utils/activity-filters.test.ts > Activity and Historical filtering > createActivityFilter > should create a filter for activity 1ms
stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should provide helpful suggestions for unknown task fields
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should prevent field mapping collisions
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should include all expected valid fields
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should map common task field variations to correct field names 9ms
 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should handle camelCase field variations correctly 2ms
 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should validate required fields for tasks 13ms
 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should provide helpful suggestions for unknown task fields 5ms
 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should prevent field mapping collisions 0ms
 ✓ test/unit/handlers/universal/tasks-field-mapping.test.ts > Tasks Field Mapping Fix - Issue #417 > should include all expected valid fields 0ms
stdout | test/utils/error-handler.test.ts > error-handler > createAttioError > should return an AttioApiError instance when given an Axios error
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createAttioError > should return the original error when not an Axios error
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createApiError > should create a 404 error with appropriate message for resources
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createApiError > should create a 401 error with authentication message
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createApiError > should create a 429 error with rate limit message
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createErrorResult > should format an AttioApiError correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createErrorResult > should create a properly formatted error result from status and response data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > createErrorResult > should handle missing response data
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > formatErrorResponse > should create a properly formatted error response based on error type
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/error-handler.test.ts > error-handler > formatErrorResponse > should set the appropriate error code based on error type
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/error-handler.test.ts > error-handler > createAttioError > should return an AttioApiError instance when given an Axios error 2ms
 ✓ test/utils/error-handler.test.ts > error-handler > createAttioError > should return the original error when not an Axios error 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > createApiError > should create a 404 error with appropriate message for resources 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > createApiError > should create a 401 error with authentication message 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > createApiError > should create a 429 error with rate limit message 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > createErrorResult > should format an AttioApiError correctly 1ms
 ✓ test/utils/error-handler.test.ts > error-handler > createErrorResult > should create a properly formatted error result from status and response data 1ms
 ✓ test/utils/error-handler.test.ts > error-handler > createErrorResult > should handle missing response data 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > formatErrorResponse > should create a properly formatted error response based on error type 0ms
 ✓ test/utils/error-handler.test.ts > error-handler > formatErrorResponse > should set the appropriate error code based on error type 0ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should filter tasks with pagination 7721ms
stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should manage task relationships with records
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should handle task lifecycle workflows
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should identify common list-specific attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should validate task data consistency
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should validate note format and content
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should identify UUID attributes as list-specific
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should not identify parent record attributes as list-specific
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should use direct field access for list-specific attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should use record.values path for parent record attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle multiple list-specific attributes with AND logic
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle OR logic with list-specific attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle mixed filters with both list and parent attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle UUID attribute filters
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle empty value conditions correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat without list entry context > should use standard field access for all attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle attributes with special characters
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle case-sensitive attribute detection
[MockState] Cleared 0 mock companies from storage

stdout | test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle complex OR conditions with mixed attributes
[MockState] Cleared 0 mock companies from storage

 ✓ test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should identify common list-specific attributes 43ms
 ✓ test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should identify UUID attributes as list-specific 1ms
 ✓ test/filters/list-attribute-filtering.test.ts > List-Specific Attribute Detection > isListSpecificAttribute > should not identify parent record attributes as list-specific 1ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should use direct field access for list-specific attributes 1ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should use record.values path for parent record attributes 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle multiple list-specific attributes with AND logic 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle OR logic with list-specific attributes 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle mixed filters with both list and parent attributes 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle UUID attribute filters 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat with list entry context > should handle empty value conditions correctly 1ms
 ✓ test/filters/list-attribute-filtering.test.ts > List Entry Filter Transformation > transformFiltersToApiFormat without list entry context > should use standard field access for all attributes 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle attributes with special characters 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle case-sensitive attribute detection 0ms
 ✓ test/filters/list-attribute-filtering.test.ts > Edge Cases > should handle complex OR conditions with mixed attributes 0ms
stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should sanitize XSS attempts in strings
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should normalize email addresses
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should sanitize objects recursively
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Error Classification > should create UniversalValidationError with proper classification
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should provide helpful suggestions for invalid resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should provide detailed missing parameter errors
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should handle batch operations validation with specific messages
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Parameter Sanitization > should return sanitized parameters from validation
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Enhanced Universal Error Handling > String Similarity Suggestions > should suggest common resource type alternatives
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Cross-Resource Validation > Company Validation > should validate company existence (mock test)
[MockState] Cleared 0 mock companies from storage

stdout | test/universal-error-handling.test.ts > Cross-Resource Validation > Company Validation > should handle people record validation structure
[MockState] Cleared 0 mock companies from storage

 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should sanitize XSS attempts in strings 2ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should normalize email addresses 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Input Sanitization > should sanitize objects recursively 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Error Classification > should create UniversalValidationError with proper classification 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should provide helpful suggestions for invalid resource types 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should provide detailed missing parameter errors 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Enhanced Validation Messages > should handle batch operations validation with specific messages 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > Parameter Sanitization > should return sanitized parameters from validation 0ms
 ✓ test/universal-error-handling.test.ts > Enhanced Universal Error Handling > String Similarity Suggestions > should suggest common resource type alternatives 1ms
 ✓ test/universal-error-handling.test.ts > Cross-Resource Validation > Company Validation > should validate company existence (mock test) 0ms
 ✓ test/universal-error-handling.test.ts > Cross-Resource Validation > Company Validation > should handle people record validation structure 0ms
stdout | test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle a simple name filter
[MockState] Cleared 0 mock companies from storage

stdout | test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle OR logic with matchAny: true
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > validates category strings
[MockState] Cleared 0 mock companies from storage

stdout | test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle AND logic by default
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > validates category arrays
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > handles empty input
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > processes string categories with warnings
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > processes array categories
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > handles empty input gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > getValidCategories() > returns array of valid category names
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > checks domain conflicts
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > handles empty domain
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > returns additional info when conflict exists (if any)
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should discover task attributes without calling /objects/tasks/attributes
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should return task attributes via universal get-attributes without record ID
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should include proper field mappings for common task field names
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should provide helpful field descriptions for task attributes
[MockState] Cleared 0 mock companies from storage

 ✓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle a simple name filter 5ms
 ✓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle OR logic with matchAny: true 2ms
 ✓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Valid filter formats > should handle AND logic by default 1ms
 ↓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Invalid filter formats > should handle missing filters object with clear error
 ↓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Invalid filter formats > should handle empty filters object with clear error
 ↓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Invalid filter formats > should handle non-array filters with clear error
 ↓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Invalid filter formats > should handle invalid filter structure with clear error
 ↓ test/legacy/objects/advanced-search-fix.test.js > Advanced Search Companies Fix > Invalid filter formats > should handle invalid condition with clear error
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should manage task relationships with records 2ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should handle task lifecycle workflows 6ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Advanced Task Management Workflows > should validate task data consistency 6ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > validates category strings 3ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > validates category arrays 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > validateCategories() > handles empty input 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > processes string categories with warnings 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > processes array categories 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > processCategories() > handles empty input gracefully 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > getValidCategories() > returns array of valid category names 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > checks domain conflicts 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > handles empty domain 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts > field-mapper – categories and domain checks > checkDomainConflict() > returns additional info when conflict exists (if any) 0ms
 ✓ test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should discover task attributes without calling /objects/tasks/attributes 3ms
 ✓ test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should return task attributes via universal get-attributes without record ID 1ms
 ✓ test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should include proper field mappings for common task field names 0ms
 ✓ test/unit/handlers/universal/tasks-attribute-discovery.test.ts > Tasks Attribute Discovery Fix - Issue #417 > should provide helpful field descriptions for task attributes 0ms
stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > detects no collisions for distinct targets
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > detects collisions when fields map to same target
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > ignores null-mapped fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > maps all fields from record data
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > returns warnings for mapped fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > detects and reports field collisions
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > preserves non-mapped fields
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > detects no collisions for distinct targets 2ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > detects collisions when fields map to same target 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > detectFieldCollisions() > ignores null-mapped fields 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > maps all fields from record data 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > returns warnings for mapped fields 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > detects and reports field collisions 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts > field-mapper – record mapping & collisions > mapRecordFields() > preserves non-mapped fields 0ms
stdout | test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search companies with query
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search companies with filters
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search people by name
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search lists by title
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search companies with query 6ms
 ✓ test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search companies with filters 1ms
 ✓ test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search people by name 1ms
 ✓ test/services/UniversalSearchService-companies-people-lists.test.ts > UniversalSearchService > searchRecords > should search lists by title 1ms
stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return true for valid filter structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false for null or undefined filter
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when attribute is missing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when attribute.slug is missing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when condition is missing
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return true even if value is missing (some conditions don't need values)
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should return the condition for valid condition types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should throw error for empty condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should throw error for invalid condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should not throw for valid filter and valid condition
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should throw for invalid filter structure
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should throw for invalid condition when validation is enabled
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should not throw for invalid condition when validation is disabled
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return true for valid filter structure 2ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false for null or undefined filter 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when attribute is missing 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when attribute.slug is missing 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return false when condition is missing 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterStructure > should return true even if value is missing (some conditions don't need values) 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should return the condition for valid condition types 2ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should throw error for empty condition 1ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterCondition > should throw error for invalid condition 1ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should not throw for valid filter and valid condition 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should throw for invalid filter structure 0ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should throw for invalid condition when validation is enabled 1ms
 ✓ test/utils/filters/validators.test.ts > Filter Validators > validateFilterWithConditions > should not throw for invalid condition when validation is disabled 0ms
stdout | test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should preserve null values in formatted output
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should handle mixed null, undefined, and regular values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should handle objects with only null values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/attribute-null-value.test.ts > updateCompanyAttribute - Issue #97 fix > should successfully update attribute to null without error
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should preserve null values in formatted output 5ms
 ✓ test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should handle mixed null, undefined, and regular values 1ms
 ✓ test/utils/attribute-null-value.test.ts > formatAllAttributes - null value handling > should handle objects with only null values 3ms
 ✓ test/utils/attribute-null-value.test.ts > updateCompanyAttribute - Issue #97 fix > should successfully update attribute to null without error 0ms
stdout | test/utils/record-utils.test.ts > record-utils > processListEntries > should process entries and extract record IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.test.ts > record-utils > processListEntries > should not modify entries when record_id is already defined
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should extract record name when available
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should return empty string when record data is not available
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should return empty string when name array is empty
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.test.ts > record-utils > API_PARAMS > should define the expected API parameters
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/record-utils.test.ts > record-utils > processListEntries > should process entries and extract record IDs 2ms
 ✓ test/utils/record-utils.test.ts > record-utils > processListEntries > should not modify entries when record_id is already defined 0ms
 ✓ test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should extract record name when available 0ms
 ✓ test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should return empty string when record data is not available 0ms
 ✓ test/utils/record-utils.test.ts > record-utils > getRecordNameFromEntry > should return empty string when name array is empty 0ms
 ✓ test/utils/record-utils.test.ts > record-utils > API_PARAMS > should define the expected API parameters 0ms
stdout | test/prompts/templates.test.ts > Prompt Templates > getAllPrompts > should return all prompts from the registry
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/templates.test.ts > Prompt Templates > getPromptById > should return a specific prompt by ID
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/templates.test.ts > Prompt Templates > getPromptById > should return undefined for non-existent prompt ID
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/templates.test.ts > Prompt Templates > getPromptsByCategory > should return prompts filtered by category
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/templates.test.ts > Prompt Templates > getPromptsByCategory > should return an empty array for non-existent category
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/templates.test.ts > Prompt Templates > getAllCategories > should return all unique categories
[MockState] Cleared 0 mock companies from storage

 ✓ test/prompts/templates.test.ts > Prompt Templates > getAllPrompts > should return all prompts from the registry 2ms
 ✓ test/prompts/templates.test.ts > Prompt Templates > getPromptById > should return a specific prompt by ID 0ms
 ✓ test/prompts/templates.test.ts > Prompt Templates > getPromptById > should return undefined for non-existent prompt ID 0ms
 ✓ test/prompts/templates.test.ts > Prompt Templates > getPromptsByCategory > should return prompts filtered by category 0ms
 ✓ test/prompts/templates.test.ts > Prompt Templates > getPromptsByCategory > should return an empty array for non-existent category 0ms
 ✓ test/prompts/templates.test.ts > Prompt Templates > getAllCategories > should return all unique categories 0ms
stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should parse simple string name "John Doe" into structured format
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle single name "Madonna"
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle three-part names "John Middle Doe"
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle structured input with first and last name
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should preserve title in structured input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle empty string by returning null
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle whitespace-only string by returning null
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle null input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle undefined input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should preserve existing full_name in structured input
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle complex names with multiple middle names
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle extra whitespace in names
[MockState] Cleared 0 mock companies from storage

 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should parse simple string name "John Doe" into structured format 1ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle single name "Madonna" 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle three-part names "John Middle Doe" 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle structured input with first and last name 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should preserve title in structured input 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle empty string by returning null 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle whitespace-only string by returning null 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle null input 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle undefined input 1ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should preserve existing full_name in structured input 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle complex names with multiple middle names 0ms
 ✓ src/utils/personal-name-parser.test.ts > Personal Name Parser > should handle extra whitespace in names 0ms
stdout | test/prompts/handlers.test.ts > Prompts Handlers > registerPromptHandlers > should register prompt handlers with the server
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > transforms boolean-ish values for tasks
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > transforms various boolean-ish inputs
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > handles arrays for assignees field
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > returns original when no transformation needed
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > handles date transformations
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > synthesizes content from title during create
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > does not synthesize content during update
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > preserves existing content during create
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > handles missing fields gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > preserves unmapped fields
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > handles both operations correctly
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > transforms boolean-ish values for tasks 5ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > transforms various boolean-ish inputs 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > handles arrays for assignees field 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > returns original when no transformation needed 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > transformFieldValue() > handles date transformations 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > synthesizes content from title during create 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > does not synthesize content during update 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > preserves existing content during create 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > handles missing fields gracefully 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > preserves unmapped fields 0ms
 ✓ test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts > field-mapper – transform + task mapping > mapTaskFields() > handles both operations correctly 0ms
stdout | test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should implement prompts/list handler correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should implement prompts/get handler correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should throw an error when prompt is not found
[MockState] Cleared 0 mock companies from storage

 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should validate note format and content 657ms
stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should validate cross-resource note operations
[MockState] Cleared 0 mock companies from storage

stdout | test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should handle note retrieval and pagination validation
[MockState] Cleared 0 mock companies from storage

 ✓ test/prompts/handlers.test.ts > Prompts Handlers > registerPromptHandlers > should register prompt handlers with the server 51ms
 ✓ test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should implement prompts/list handler correctly 3ms
 ✓ test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should implement prompts/get handler correctly 0ms
 ✓ test/prompts/handlers.test.ts > Prompts Handlers > handlers implementation > should throw an error when prompt is not found 26ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should validate cross-resource note operations 8ms
 ✓ test/e2e/suites/record-management.e2e.test.ts > Record Management E2E Tests - Universal Operations > Notes Validation Workflows > should handle note retrieval and pagination validation 3ms
stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should pass for valid UUIDs in non-task resources
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should skip validation for tasks resource
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should throw for invalid UUIDs in non-task resources
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should return true for valid UUIDs
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should fallback to generic ID validation when UUID fails
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should return false when both validations fail
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should skip generic validation when allowGeneric is false
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should pass for valid UUIDs in non-task resources 2ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should skip validation for tasks resource 0ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > validateUUID > should throw for invalid UUIDs in non-task resources 0ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should return true for valid UUIDs 0ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should fallback to generic ID validation when UUID fails 0ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should return false when both validations fail 0ms
 ✓ test/services/ValidationService-uuid-and-id.test.ts > ValidationService > isValidRecordId > should skip generic validation when allowGeneric is false 0ms
stdout | test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should correctly parse valid URIs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should throw for invalid URI formats
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should handle IDs with special characters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should handle empty IDs but throw appropriate error
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should correctly format URIs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should handle IDs with special characters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should not validate ID format
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > integration between parse and format > should be symmetric for valid URIs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/uri-parser.test.ts > uri-parser > integration between parse and format > should round-trip multiple resource types
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should accept valid list IDs
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should correctly parse valid URIs 5ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should throw for invalid URI formats 2ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should handle IDs with special characters 0ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > parseResourceUri > should handle empty IDs but throw appropriate error 1ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should correctly format URIs 1ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should handle IDs with special characters 0ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > formatResourceUri > should not validate ID format 0ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > integration between parse and format > should be symmetric for valid URIs 0ms
 ✓ test/utils/uri-parser.test.ts > uri-parser > integration between parse and format > should round-trip multiple resource types 1ms
stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject malformed list IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject list IDs with potential injection characters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject excessively long list IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should accept valid generic IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject malformed generic IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject generic IDs with potential injection characters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject excessively long generic IDs
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should maintain existing record_id if already present
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.id.record_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from parent_record_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from values.record_id array
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from values.record nested object
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from reference_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from object_id
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should accept valid list IDs 6ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject malformed list IDs 0ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject list IDs with potential injection characters 2ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidListId > should reject excessively long list IDs 0ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should accept valid generic IDs 0ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject malformed generic IDs 0ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject generic IDs with potential injection characters 2ms
 ✓ test/utils/list-id-validation.test.ts > List ID Validation > isValidId > should reject excessively long generic IDs 0ms
stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.reference_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.record_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.uri
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from property ending with _record_id
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should leave record_id undefined when no record_id can be found
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should handle complex nested structures
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should handle a mix of entry types in the same batch
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should maintain existing record_id if already present 2ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.id.record_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from parent_record_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from values.record_id array 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from values.record nested object 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from reference_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from object_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.reference_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.record_id 1ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from record.uri 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should extract record_id from property ending with _record_id 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should leave record_id undefined when no record_id can be found 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should handle complex nested structures 0ms
 ✓ test/utils/record-utils.record-id-extraction.test.ts > Record ID Extraction Tests > should handle a mix of entry types in the same batch 0ms
stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "notanemail"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@example"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user @example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@example .com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user.example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email ""
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email " "
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@ex ample.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user.name@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user+tag@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user123@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user_name@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user-name@example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@subdomain.example.com"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@example.co.uk"
[MockState] Cleared 0 mock companies from storage

stdout | test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "User@Example.Com"
[MockState] Cleared 0 mock companies from storage

 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "notanemail" 2ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@example" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user @example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@example .com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user.example.com" 1ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email " " 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Invalid Email Rejection > should reject invalid email "user@ex ample.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user.name@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user+tag@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user123@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user_name@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user-name@example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@subdomain.example.com" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "user@example.co.uk" 0ms
 ✓ test/unit/handlers/universal/email-validation-simple.test.ts > Email Validation Function > Valid Email Acceptance > should accept valid email "User@Example.Com" 0ms
stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should extract name from various fields
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should return "Unnamed" when all fields are null/undefined
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should return "Unnamed" when field values are empty strings
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should handle mixed data types gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle task records correctly (Issue #472 regression test)
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle company records correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle person records with full_name correctly
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle records with only title (like documents)
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should trim whitespace from extracted values
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Backward Compatibility > should work with Record<string, unknown> type (legacy usage)
[MockState] Cleared 0 mock companies from storage

stdout | test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Backward Compatibility > should handle arrays with multiple items (uses first item only)
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should extract name from various fields 3ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should return "Unnamed" when all fields are null/undefined 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should return "Unnamed" when field values are empty strings 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Basic Extraction > should handle mixed data types gracefully 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle task records correctly (Issue #472 regression test) 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle company records correctly 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle person records with full_name correctly 1ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should handle records with only title (like documents) 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Real-world Data Patterns > should trim whitespace from extracted values 1ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Backward Compatibility > should work with Record<string, unknown> type (legacy usage) 0ms
 ✓ test/services/UniversalUtilityService-display-name.test.ts > UniversalUtilityService > extractDisplayName > Backward Compatibility > should handle arrays with multiple items (uses first item only) 0ms
stdout | test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles null and undefined errors gracefully
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles empty error messages
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles malformed error objects
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles null and undefined errors gracefully 7ms
 ✓ test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles empty error messages 1ms
 ✓ test/services/ErrorService-edge-cases.test.ts > ErrorService Edge Cases > handles malformed error objects 0ms
stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with min value only
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with max value only
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with both min and max values
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with equals value
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when an invalid numeric range is provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when an empty range is provided
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when min/max are provided with equals
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with min value only 3ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with max value only 1ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with both min and max values 0ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should create a filter with equals value 0ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when an invalid numeric range is provided 1ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when an empty range is provided 1ms
 ✓ test/utils/numeric-filters.test.ts > Numeric Filtering > createNumericFilter > should throw error when min/max are provided with equals 0ms
stdout | test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > returns original message when no attribute ID pattern found
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > returns original message when field cannot be extracted
[MockState] Cleared 0 mock companies from storage

stdout | test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > attempts enhancement with attribute ID pattern
[MockState] Cleared 0 mock companies from storage

 ✓ test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > returns original message when no attribute ID pattern found 2ms
 ✓ test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > returns original message when field cannot be extracted 1ms
 ✓ test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts > field-mapper – uniqueness error enhancement > attempts enhancement with attribute ID pattern 1ms
stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests
Running validation tests with API client

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing filters object
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing filters array
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for non-array filters
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for invalid filter structure
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing attribute.slug
[MockState] Cleared 0 mock companies from storage

stdout | test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing condition
[MockState] Cleared 0 mock companies from storage

 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing filters object 2ms
 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing filters array 0ms
 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for non-array filters 0ms
 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for invalid filter structure 0ms
 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing attribute.slug 1ms
 ✓ test/api/advanced-search-validation.test.ts > Advanced Search Validation Tests > advancedSearchCompanies validation > should throw appropriate error for missing condition 1ms
stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should apply color codes to text
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle all available colors
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle empty text
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle special characters
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should export color codes object
[MockState] Cleared 0 mock companies from storage

stdout | test/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should have all expected color properties
[MockState] Cleared 0 mock companies from storage

 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should apply color codes to text 2ms
 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle all available colors 1ms
 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle empty text 0ms
 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle special characters 0ms
 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should export color codes object 0ms
 ✓ test/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should have all expected color properties 0ms
stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should apply color codes to text
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle all available colors
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle empty text
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle special characters
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should export color codes object
[MockState] Cleared 0 mock companies from storage

stdout | src/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should have all expected color properties
[MockState] Cleared 0 mock companies from storage

 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should apply color codes to text 1ms
 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle all available colors 1ms
 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle empty text 3ms
 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colorize function > should handle special characters 0ms
 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should export color codes object 0ms
 ✓ src/utils/cli-colors.test.ts > CLI Colors Utility > colors export > should have all expected color properties 0ms
stdout | test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsDetails > should use executeBatchOperations to get multiple lists details
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsDetails > should handle errors in list details retrieval
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsEntries > should use executeBatchOperations to get entries for multiple lists
[MockState] Cleared 0 mock companies from storage

stdout | test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsEntries > should handle errors in list entries retrieval
[MockState] Cleared 0 mock companies from storage

 ✓ test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsDetails > should use executeBatchOperations to get multiple lists details 2ms
 ✓ test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsDetails > should handle errors in list details retrieval 0ms
 ✓ test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsEntries > should use executeBatchOperations to get entries for multiple lists 0ms
 ✓ test/objects/batch-lists.test.ts > Lists Batch Operations > batchGetListsEntries > should handle errors in list entries retrieval 0ms
 ↓ test/api/attribute-validation-real-api.test.ts > Attribute Validation with Real Attio API > Company validation with real attributes > should fetch real attribute metadata from Attio API
 ↓ test/api/attribute-validation-real-api.test.ts > Attribute Validation with Real Attio API > Company validation with real attributes > should validate company creation with type conversion
 ↓ test/api/attribute-validation-real-api.test.ts > Attribute Validation with Real Attio API > Company validation with real attributes > should validate company update with type conversion
 ↓ test/api/attribute-validation-real-api.test.ts > Attribute Validation with Real Attio API > Company validation with real attributes > should validate single attribute update
 ↓ test/api/attribute-validation-real-api.test.ts > Attribute Validation with Real Attio API > Company validation with real attributes > should reject invalid attribute values
stdout | test/services/ErrorService-core.test.ts > ErrorService > should classify 4xx as user errors
[MockState] Cleared 0 mock companies from storage

stdout | test/services/ErrorService-core.test.ts > ErrorService > should classify 5xx as system errors
[MockState] Cleared 0 mock companies from storage

 ✓ test/services/ErrorService-core.test.ts > ErrorService > should classify 4xx as user errors 2ms
 ✓ test/services/ErrorService-core.test.ts > ErrorService > should classify 5xx as system errors 0ms
stdout | test/objects/companies-advanced-search.test.ts > Companies Advanced Search > should return either array or paginated results
[MockState] Cleared 0 mock companies from storage

 ✓ test/objects/companies-advanced-search.test.ts > Companies Advanced Search > should return either array or paginated results 2ms
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should handle errors at the generic API level 6015ms
stdout | test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should handle non-array filters with clear error
[MockState] Cleared 0 mock companies from storage

stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > update-record for lists > should accept lists as object type for updates
Lists may not be updatable via records API: Error: Invalid API response: no data found
    at ensureAttioRecordStructure [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/crud.ts:71:11[90m)[39m
    at [90m/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/crud.ts:428:22
    at callWithRetry [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/api/operations/retry.ts:112:14[90m)[39m
    at updateObjectRecord [90m(/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39msrc/objects/records/index.ts:378:12[90m)[39m
    at [90m/Users/kesslerio/GDrive/Projects/attio-mcp-server/[39mtest/lists-resource.test.ts:364:26
    at [90mfile:///Users/kesslerio/GDrive/Projects/attio-mcp-server/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

 ✓ test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > update-record for lists > should accept lists as object type for updates 6600ms
stdout | test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > delete-record for lists > should accept lists as object type for deletion
[MockState] Cleared 0 mock companies from storage

 ✓ test/lists-resource.test.ts > Lists Resource Type > Universal Record Tools with Lists > delete-record for lists > should accept lists as object type for deletion 1ms
 ↓ test/lists-resource.test.ts > Lists Resource Type > QA Test Case Verification > should pass all QA test requirements from issue #470
 ✓ test/api/advanced-search.test.ts > Advanced Search API Tests > advancedSearchObject > should handle non-array filters with clear error 8363ms

 Test Files  9 failed | 130 passed | 1 skipped (140)
      Tests  20 failed | 1917 passed | 16 skipped (1953)
   Start at  17:16:46
   Duration  23.22s (transform 3.59s, setup 5.15s, collect 26.22s, tests 96.86s, environment 21ms, prepare 13.79s)

{"numTotalTestSuites":779,"numPassedTestSuites":751,"numFailedTestSuites":28,"numPendingTestSuites":0,"numTotalTests":1953,"numPassedTests":1917,"numFailedTests":20,"numPendingTests":16,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1756513006047,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":7.1003749999999854,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.4502909999999929,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.3187910000000329,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.1999999999999318,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.4272090000000617,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.19908399999997073,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.23783300000002328,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.13787500000000819,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":1.3339169999999285,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","search-records formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract search-records formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.43354199999998855,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.40141700000003766,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.17162499999994907,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.11258299999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.2523749999999154,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.13954200000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.1291670000000522,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.09504200000003493,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.0842089999999871,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.33299999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-record-details formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":1.609083999999939,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.45479199999999764,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.7391250000000582,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":1.574916999999914,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.17662499999994452,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.1135829999999487,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.09516599999994924,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.07962500000007822,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.07725000000004911,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.4736250000000837,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","create-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract create-record formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.08066599999995105,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.11808400000006714,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.09683400000005804,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.08704099999999926,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.07679100000007111,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.07554100000004382,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.0741249999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.058583999999996195,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.05979200000001583,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.16975000000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","update-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract update-record formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.10950000000002547,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.09749999999996817,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.09033399999998437,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.0785000000000764,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.07283299999994597,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.07320800000002237,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.07320799999990868,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.05662499999993997,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.05562499999996362,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.10987499999998818,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract delete-record formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.06016599999998107,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.14724999999998545,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.09208399999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.11104100000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.09208300000000236,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.08629200000007131,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.08137499999997999,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.06141700000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":1.259416999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.24099999999998545,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-attributes formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.0821250000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.46833300000002964,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":0.13266700000008314,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.11891700000001038,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.08537499999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.10025000000007367,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.07195799999999508,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.0665000000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.060791999999992186,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.16795799999999872,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract get-detailed-info formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":0.07079199999998309,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for companies","status":"passed","title":"should always return string type for companies","duration":0.11520799999993869,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for people","status":"passed","title":"should always return string type for people","duration":1.3107499999999845,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for lists","status":"passed","title":"should always return string type for lists","duration":0.5381669999999303,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for records","status":"passed","title":"should always return string type for records","duration":0.6958329999999933,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for tasks","status":"passed","title":"should always return string type for tasks","duration":0.3262919999999667,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should always return string type for deals","status":"passed","title":"should always return string type for deals","duration":0.24575000000004366,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should return string type in test environment","status":"passed","title":"should return string type in test environment","duration":0.30216700000005403,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should return string type in production environment","status":"passed","title":"should return string type in production environment","duration":0.22550000000001091,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should return string type in development environment","status":"passed","title":"should return string type in development environment","duration":0.7960419999999431,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","String Return Type Contract","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests String Return Type Contract advanced-search formatResult should return string type in undefined environment","status":"passed","title":"should return string type in undefined environment","duration":1.0100419999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.2034169999999449,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.2457920000000513,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.5345000000000937,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.10883300000000418,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.09379100000001017,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.08437500000002274,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.09579199999996035,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.06875000000002274,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.17504199999996217,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","search-records formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention search-records formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.07266700000002402,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.08825000000001637,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.11808300000006966,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.2397080000000642,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.1019579999999678,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.091083000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.23012499999992997,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.1684579999999869,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.658333999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.19137499999999363,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-record-details formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-record-details formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.08337500000004638,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.18337499999995543,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.37199999999995725,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.1554999999999609,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.08179199999995035,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.08695899999997891,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.10337499999991451,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.0696659999999838,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.07254199999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.16379199999994398,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","create-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention create-record formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.06841599999995651,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.07558300000005147,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.08695899999997891,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.09050000000002001,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.08258299999999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.07766599999990831,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.07799999999997453,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.06337499999995089,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.0628750000000764,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.09712500000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","update-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention update-record formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.06883399999992434,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.078125,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.07875000000001364,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.07616700000005494,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.08141700000010132,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.0732909999999265,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.07662499999992178,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.06541599999991377,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.06454199999996035,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.16770800000006147,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","delete-record formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention delete-record formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.16533300000003237,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.14383299999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.11766599999998562,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.1621659999999565,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.5360409999999547,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.10637499999995725,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.08499999999992269,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.0767079999999396,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.06970800000010513,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.1376669999999649,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-attributes formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-attributes formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.06779200000005403,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.08312499999999545,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.09045800000001236,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.08420799999998962,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.07799999999997453,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.09466700000007222,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.08245799999997416,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.06500000000005457,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.06379100000003746,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.1013749999999618,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","get-detailed-info formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention get-detailed-info formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.06654200000002675,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for companies","status":"passed","title":"should never return JSON string for companies","duration":0.08095800000000963,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for people","status":"passed","title":"should never return JSON string for people","duration":0.07699999999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for lists","status":"passed","title":"should never return JSON string for lists","duration":0.076041000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for records","status":"passed","title":"should never return JSON string for records","duration":0.07204200000001038,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for tasks","status":"passed","title":"should never return JSON string for tasks","duration":0.07100000000002638,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string for deals","status":"passed","title":"should never return JSON string for deals","duration":0.07158300000003237,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string in test environment","status":"passed","title":"should never return JSON string in test environment","duration":0.06558300000006057,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string in production environment","status":"passed","title":"should never return JSON string in production environment","duration":0.06062499999995907,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string in development environment","status":"passed","title":"should never return JSON string in development environment","duration":0.0907079999999496,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","JSON Output Prevention","advanced-search formatResult"],"fullName":"formatResult Contract Regression Tests JSON Output Prevention advanced-search formatResult should never return JSON string in undefined environment","status":"passed","title":"should never return JSON string in undefined environment","duration":0.06074999999998454,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format search-records should provide consistent output across environments","status":"passed","title":"search-records should provide consistent output across environments","duration":0.13608299999998508,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format get-record-details should provide consistent output across environments","status":"passed","title":"get-record-details should provide consistent output across environments","duration":0.1326250000000755,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format create-record should provide consistent output across environments","status":"passed","title":"create-record should provide consistent output across environments","duration":0.12533399999995254,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format update-record should provide consistent output across environments","status":"passed","title":"update-record should provide consistent output across environments","duration":0.09587499999997817,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format delete-record should provide consistent output across environments","status":"passed","title":"delete-record should provide consistent output across environments","duration":0.08262500000000728,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format get-attributes should provide consistent output across environments","status":"passed","title":"get-attributes should provide consistent output across environments","duration":0.08295799999996234,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format get-detailed-info should provide consistent output across environments","status":"passed","title":"get-detailed-info should provide consistent output across environments","duration":0.08791700000006131,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Consistent Output Format"],"fullName":"formatResult Contract Regression Tests Consistent Output Format advanced-search should provide consistent output across environments","status":"passed","title":"advanced-search should provide consistent output across environments","duration":0.07737499999996089,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency search-records should handle null/undefined data gracefully","status":"passed","title":"search-records should handle null/undefined data gracefully","duration":0.4350839999999607,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency search-records should handle empty data gracefully","status":"passed","title":"search-records should handle empty data gracefully","duration":0.19345900000007532,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-record-details should handle null/undefined data gracefully","status":"passed","title":"get-record-details should handle null/undefined data gracefully","duration":0.28291699999999764,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-record-details should handle empty data gracefully","status":"passed","title":"get-record-details should handle empty data gracefully","duration":0.13445899999999256,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency create-record should handle null/undefined data gracefully","status":"passed","title":"create-record should handle null/undefined data gracefully","duration":0.09770800000001145,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency create-record should handle empty data gracefully","status":"passed","title":"create-record should handle empty data gracefully","duration":0.2611249999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency update-record should handle null/undefined data gracefully","status":"passed","title":"update-record should handle null/undefined data gracefully","duration":0.10862499999996089,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency update-record should handle empty data gracefully","status":"passed","title":"update-record should handle empty data gracefully","duration":0.09737500000005639,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency delete-record should handle null/undefined data gracefully","status":"passed","title":"delete-record should handle null/undefined data gracefully","duration":0.7251250000000482,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency delete-record should handle empty data gracefully","status":"passed","title":"delete-record should handle empty data gracefully","duration":0.09920799999997598,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-attributes should handle null/undefined data gracefully","status":"passed","title":"get-attributes should handle null/undefined data gracefully","duration":0.07683299999996507,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-attributes should handle empty data gracefully","status":"passed","title":"get-attributes should handle empty data gracefully","duration":0.09087499999998272,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-detailed-info should handle null/undefined data gracefully","status":"passed","title":"get-detailed-info should handle null/undefined data gracefully","duration":0.4941670000000613,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency get-detailed-info should handle empty data gracefully","status":"passed","title":"get-detailed-info should handle empty data gracefully","duration":0.09450000000003911,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency advanced-search should handle null/undefined data gracefully","status":"passed","title":"advanced-search should handle null/undefined data gracefully","duration":0.07091600000001108,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Error Handling Consistency"],"fullName":"formatResult Contract Regression Tests Error Handling Consistency advanced-search should handle empty data gracefully","status":"passed","title":"advanced-search should handle empty data gracefully","duration":0.4132090000000517,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support companies resource type","status":"passed","title":"search-records should support companies resource type","duration":0.17591600000002927,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support people resource type","status":"passed","title":"search-records should support people resource type","duration":3.2474169999999276,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support lists resource type","status":"passed","title":"search-records should support lists resource type","duration":0.26808299999993324,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support records resource type","status":"passed","title":"search-records should support records resource type","duration":0.44762500000001637,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support tasks resource type","status":"passed","title":"search-records should support tasks resource type","duration":0.18895799999995688,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support search-records should support deals resource type","status":"passed","title":"search-records should support deals resource type","duration":0.4845839999999271,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support companies resource type","status":"passed","title":"get-record-details should support companies resource type","duration":0.1685420000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support people resource type","status":"passed","title":"get-record-details should support people resource type","duration":0.11533300000007785,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support lists resource type","status":"passed","title":"get-record-details should support lists resource type","duration":0.29254200000002584,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support records resource type","status":"passed","title":"get-record-details should support records resource type","duration":0.14970800000003237,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support tasks resource type","status":"passed","title":"get-record-details should support tasks resource type","duration":0.12850000000003092,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-record-details should support deals resource type","status":"passed","title":"get-record-details should support deals resource type","duration":0.23649999999997817,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support companies resource type","status":"passed","title":"create-record should support companies resource type","duration":0.72199999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support people resource type","status":"passed","title":"create-record should support people resource type","duration":0.47862499999996544,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support lists resource type","status":"passed","title":"create-record should support lists resource type","duration":0.4074999999999136,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support records resource type","status":"passed","title":"create-record should support records resource type","duration":0.8446669999999585,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support tasks resource type","status":"passed","title":"create-record should support tasks resource type","duration":0.13637500000004366,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support create-record should support deals resource type","status":"passed","title":"create-record should support deals resource type","duration":0.09629199999994853,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support companies resource type","status":"passed","title":"update-record should support companies resource type","duration":0.0901250000000573,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support people resource type","status":"passed","title":"update-record should support people resource type","duration":0.0862089999999398,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support lists resource type","status":"passed","title":"update-record should support lists resource type","duration":0.07974999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support records resource type","status":"passed","title":"update-record should support records resource type","duration":0.08095800000000963,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support tasks resource type","status":"passed","title":"update-record should support tasks resource type","duration":0.07729200000005676,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support update-record should support deals resource type","status":"passed","title":"update-record should support deals resource type","duration":0.09224999999992178,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support companies resource type","status":"passed","title":"delete-record should support companies resource type","duration":0.07770800000002964,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support people resource type","status":"passed","title":"delete-record should support people resource type","duration":0.07937500000002728,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support lists resource type","status":"passed","title":"delete-record should support lists resource type","duration":0.07691699999998036,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support records resource type","status":"passed","title":"delete-record should support records resource type","duration":0.07699999999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support tasks resource type","status":"passed","title":"delete-record should support tasks resource type","duration":0.07487500000002001,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support delete-record should support deals resource type","status":"passed","title":"delete-record should support deals resource type","duration":0.07387500000004366,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support companies resource type","status":"passed","title":"get-attributes should support companies resource type","duration":0.08041700000001129,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support people resource type","status":"passed","title":"get-attributes should support people resource type","duration":0.08041600000001381,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support lists resource type","status":"passed","title":"get-attributes should support lists resource type","duration":0.07495800000003783,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support records resource type","status":"passed","title":"get-attributes should support records resource type","duration":0.07745799999997871,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support tasks resource type","status":"passed","title":"get-attributes should support tasks resource type","duration":0.077083000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-attributes should support deals resource type","status":"passed","title":"get-attributes should support deals resource type","duration":0.07516599999996743,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support companies resource type","status":"passed","title":"get-detailed-info should support companies resource type","duration":0.08100000000001728,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support people resource type","status":"passed","title":"get-detailed-info should support people resource type","duration":0.08783299999993233,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support lists resource type","status":"passed","title":"get-detailed-info should support lists resource type","duration":0.08650000000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support records resource type","status":"passed","title":"get-detailed-info should support records resource type","duration":0.1326249999999618,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support tasks resource type","status":"passed","title":"get-detailed-info should support tasks resource type","duration":0.8849579999999833,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support get-detailed-info should support deals resource type","status":"passed","title":"get-detailed-info should support deals resource type","duration":0.1380420000000413,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support companies resource type","status":"passed","title":"advanced-search should support companies resource type","duration":0.9349580000000515,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support people resource type","status":"passed","title":"advanced-search should support people resource type","duration":7.285375000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support lists resource type","status":"passed","title":"advanced-search should support lists resource type","duration":1.338292000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support records resource type","status":"passed","title":"advanced-search should support records resource type","duration":1.100500000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support tasks resource type","status":"passed","title":"advanced-search should support tasks resource type","duration":0.20441700000003493,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","All Resource Types Support"],"fullName":"formatResult Contract Regression Tests All Resource Types Support advanced-search should support deals resource type","status":"passed","title":"advanced-search should support deals resource type","duration":0.1064169999999649,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression search-records should properly handle LISTS resource type added in Phase 2","status":"passed","title":"search-records should properly handle LISTS resource type added in Phase 2","duration":1.372624999999971,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression get-record-details should properly handle LISTS resource type added in Phase 2","status":"passed","title":"get-record-details should properly handle LISTS resource type added in Phase 2","duration":0.37333300000000236,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression create-record should properly handle LISTS resource type added in Phase 2","status":"passed","title":"create-record should properly handle LISTS resource type added in Phase 2","duration":0.1638749999999618,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression update-record should properly handle LISTS resource type added in Phase 2","status":"passed","title":"update-record should properly handle LISTS resource type added in Phase 2","duration":0.09387500000002547,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression delete-record should properly handle LISTS resource type added in Phase 2","status":"passed","title":"delete-record should properly handle LISTS resource type added in Phase 2","duration":0.08408299999996416,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression get-attributes should properly handle LISTS resource type added in Phase 2","status":"passed","title":"get-attributes should properly handle LISTS resource type added in Phase 2","duration":0.0810830000000351,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression get-detailed-info should properly handle LISTS resource type added in Phase 2","status":"passed","title":"get-detailed-info should properly handle LISTS resource type added in Phase 2","duration":0.07866699999999582,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatResult Contract Regression Tests","Phase 2 LISTS Resource Type Regression"],"fullName":"formatResult Contract Regression Tests Phase 2 LISTS Resource Type Regression advanced-search should properly handle LISTS resource type added in Phase 2","status":"passed","title":"advanced-search should properly handle LISTS resource type added in Phase 2","duration":0.18879199999992125,"failureMessages":[],"meta":{}}],"startTime":1756513012974,"endTime":1756513013043.3733,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/formatResult-contract-regression.test.ts"},{"assertionResults":[{"ancestorTitles":["Lists Resource Type","Resource Registration"],"fullName":"Lists Resource Type Resource Registration should include Lists in the registered resource types","status":"passed","title":"should include Lists in the registered resource types","duration":1.0552089999999907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Resource Registration"],"fullName":"Lists Resource Type Resource Registration should handle ListResourcesRequest for Lists type","status":"passed","title":"should handle ListResourcesRequest for Lists type","duration":0.775874999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Resource Registration"],"fullName":"Lists Resource Type Resource Registration should handle ReadResourceRequest for a specific list","status":"passed","title":"should handle ReadResourceRequest for a specific list","duration":0.1193330000000401,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","getLists"],"fullName":"Lists Resource Type Lists CRUD Operations getLists should retrieve all lists in the workspace","status":"passed","title":"should retrieve all lists in the workspace","duration":0.15825000000000955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","getLists"],"fullName":"Lists Resource Type Lists CRUD Operations getLists should filter lists by object type","status":"passed","title":"should filter lists by object type","duration":0.15437500000001592,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","getListDetails"],"fullName":"Lists Resource Type Lists CRUD Operations getListDetails should retrieve details for a specific list","status":"passed","title":"should retrieve details for a specific list","duration":0.11125000000004093,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","createList"],"fullName":"Lists Resource Type Lists CRUD Operations createList should create a new list","status":"passed","title":"should create a new list","duration":0.414209000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","createList"],"fullName":"Lists Resource Type Lists CRUD Operations createList should require name and parent_object","status":"passed","title":"should require name and parent_object","duration":1.3068329999999833,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","updateList"],"fullName":"Lists Resource Type Lists CRUD Operations updateList should update an existing list","status":"skipped","title":"should update an existing list","failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","updateList"],"fullName":"Lists Resource Type Lists CRUD Operations updateList should validate list ID","status":"passed","title":"should validate list ID","duration":0.6304590000000303,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","deleteList"],"fullName":"Lists Resource Type Lists CRUD Operations deleteList should delete a list","status":"skipped","title":"should delete a list","failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","deleteList"],"fullName":"Lists Resource Type Lists CRUD Operations deleteList should validate list ID","status":"passed","title":"should validate list ID","duration":0.2526250000000232,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","searchLists"],"fullName":"Lists Resource Type Lists CRUD Operations searchLists should search lists by query","status":"passed","title":"should search lists by query","duration":0.13900000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Lists CRUD Operations","getListAttributes"],"fullName":"Lists Resource Type Lists CRUD Operations getListAttributes should retrieve list attributes schema","status":"passed","title":"should retrieve list attributes schema","duration":0.140041999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Universal Record Tools with Lists","search-records with object=\"lists\""],"fullName":"Lists Resource Type Universal Record Tools with Lists search-records with object=\"lists\" should work with lists as object type","status":"passed","title":"should work with lists as object type","duration":0.20520900000002484,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Universal Record Tools with Lists","get-record-details for lists"],"fullName":"Lists Resource Type Universal Record Tools with Lists get-record-details for lists should retrieve list details using record tools","status":"passed","title":"should retrieve list details using record tools","duration":0.12270799999998871,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Universal Record Tools with Lists","create-record for lists"],"fullName":"Lists Resource Type Universal Record Tools with Lists create-record for lists should accept lists as object type","status":"passed","title":"should accept lists as object type","duration":7713.778,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Universal Record Tools with Lists","update-record for lists"],"fullName":"Lists Resource Type Universal Record Tools with Lists update-record for lists should accept lists as object type for updates","status":"passed","title":"should accept lists as object type for updates","duration":6600.002041000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","Universal Record Tools with Lists","delete-record for lists"],"fullName":"Lists Resource Type Universal Record Tools with Lists delete-record for lists should accept lists as object type for deletion","status":"passed","title":"should accept lists as object type for deletion","duration":0.516791000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Resource Type","QA Test Case Verification"],"fullName":"Lists Resource Type QA Test Case Verification should pass all QA test requirements from issue #470","status":"skipped","title":"should pass all QA test requirements from issue #470","failureMessages":[],"meta":{}}],"startTime":1756513007277,"endTime":1756513021597.5168,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/lists-resource.test.ts"},{"assertionResults":[{"ancestorTitles":["Real API Validation Tests","Schema Validation with Real API"],"fullName":"Real API Validation Tests Schema Validation with Real API should validate against real company attributes","status":"passed","title":"should validate against real company attributes","duration":2.1227909999999497,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","Schema Validation with Real API"],"fullName":"Real API Validation Tests Schema Validation with Real API should detect invalid fields against real schema","status":"passed","title":"should detect invalid fields against real schema","duration":0.6679159999999911,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","Performance Monitoring with Real Operations"],"fullName":"Real API Validation Tests Performance Monitoring with Real Operations should track real API call performance","status":"passed","title":"should track real API call performance","duration":100.50829199999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","Performance Monitoring with Real Operations"],"fullName":"Real API Validation Tests Performance Monitoring with Real Operations should detect slow operations","status":"passed","title":"should detect slow operations","duration":152.710125,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","Resource Mapping with Real Resources"],"fullName":"Real API Validation Tests Resource Mapping with Real Resources should generate correct paths for all resource types","status":"passed","title":"should generate correct paths for all resource types","duration":0.7830000000000155,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","Resource Mapping with Real Resources"],"fullName":"Real API Validation Tests Resource Mapping with Real Resources should handle custom object types correctly","status":"passed","title":"should handle custom object types correctly","duration":2.2550829999998996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","People Normalization with Various Formats"],"fullName":"Real API Validation Tests People Normalization with Various Formats should normalize real-world name formats","status":"passed","title":"should normalize real-world name formats","duration":1.254833000000076,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","People Normalization with Various Formats"],"fullName":"Real API Validation Tests People Normalization with Various Formats should normalize email formats correctly","status":"passed","title":"should normalize email formats correctly","duration":1.18425000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","People Normalization with Various Formats"],"fullName":"Real API Validation Tests People Normalization with Various Formats should validate complex email formats","status":"passed","title":"should validate complex email formats","duration":1.6304170000000795,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","End-to-End Validation Flow"],"fullName":"Real API Validation Tests End-to-End Validation Flow should validate a complete company creation request","status":"passed","title":"should validate a complete company creation request","duration":0.8706250000000182,"failureMessages":[],"meta":{}},{"ancestorTitles":["Real API Validation Tests","End-to-End Validation Flow"],"fullName":"Real API Validation Tests End-to-End Validation Flow should validate a complete people creation request with normalization","status":"passed","title":"should validate a complete people creation request with normalization","duration":0.8034999999999854,"failureMessages":[],"meta":{}}],"startTime":1756513011979,"endTime":1756513012244.8035,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/real-api-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Enhanced Universal Error Handling","Input Sanitization"],"fullName":"Enhanced Universal Error Handling Input Sanitization should sanitize XSS attempts in strings","status":"passed","title":"should sanitize XSS attempts in strings","duration":1.8345410000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Input Sanitization"],"fullName":"Enhanced Universal Error Handling Input Sanitization should normalize email addresses","status":"passed","title":"should normalize email addresses","duration":0.1785000000000423,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Input Sanitization"],"fullName":"Enhanced Universal Error Handling Input Sanitization should sanitize objects recursively","status":"passed","title":"should sanitize objects recursively","duration":0.2577919999999949,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Error Classification"],"fullName":"Enhanced Universal Error Handling Error Classification should create UniversalValidationError with proper classification","status":"passed","title":"should create UniversalValidationError with proper classification","duration":0.2694169999999758,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Enhanced Validation Messages"],"fullName":"Enhanced Universal Error Handling Enhanced Validation Messages should provide helpful suggestions for invalid resource types","status":"passed","title":"should provide helpful suggestions for invalid resource types","duration":0.479582999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Enhanced Validation Messages"],"fullName":"Enhanced Universal Error Handling Enhanced Validation Messages should provide detailed missing parameter errors","status":"passed","title":"should provide detailed missing parameter errors","duration":0.19191599999999198,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Enhanced Validation Messages"],"fullName":"Enhanced Universal Error Handling Enhanced Validation Messages should handle batch operations validation with specific messages","status":"passed","title":"should handle batch operations validation with specific messages","duration":0.16762500000004366,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","Parameter Sanitization"],"fullName":"Enhanced Universal Error Handling Parameter Sanitization should return sanitized parameters from validation","status":"passed","title":"should return sanitized parameters from validation","duration":0.10208299999999326,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Universal Error Handling","String Similarity Suggestions"],"fullName":"Enhanced Universal Error Handling String Similarity Suggestions should suggest common resource type alternatives","status":"passed","title":"should suggest common resource type alternatives","duration":0.9440419999999676,"failureMessages":[],"meta":{}},{"ancestorTitles":["Cross-Resource Validation","Company Validation"],"fullName":"Cross-Resource Validation Company Validation should validate company existence (mock test)","status":"passed","title":"should validate company existence (mock test)","duration":0.18995799999999008,"failureMessages":[],"meta":{}},{"ancestorTitles":["Cross-Resource Validation","Company Validation"],"fullName":"Cross-Resource Validation Company Validation should handle people record validation structure","status":"passed","title":"should handle people record validation structure","duration":0.23149999999998272,"failureMessages":[],"meta":{}}],"startTime":1756513019170,"endTime":1756513019175.2314,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/universal-error-handling.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Resource Types Validation","All 7 Resource Types Enum Validation"],"fullName":"Universal Resource Types Validation All 7 Resource Types Enum Validation should have exactly 7 resource types defined","status":"passed","title":"should have exactly 7 resource types defined","duration":3.6351250000000164,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","All 7 Resource Types Enum Validation"],"fullName":"Universal Resource Types Validation All 7 Resource Types Enum Validation should map correctly to ResourceType","status":"passed","title":"should map correctly to ResourceType","duration":0.7333750000000236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.648166999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.2283750000000282,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.25349999999991724,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.14479099999994105,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.1581669999999349,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.11066700000003493,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","search-records formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types search-records formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.48945800000001327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.3126669999999194,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.2211659999999256,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.10225000000002638,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.09391700000003311,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.13350000000002638,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.0873749999999518,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-record-details formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-record-details formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.08554100000003473,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.1041250000000673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.11229100000002745,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.078125,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.0742089999999962,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.07529099999999289,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.07275000000004184,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","create-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types create-record formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.07845899999995254,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.12154200000009041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.07645800000000236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.07795799999996689,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.07945900000004258,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.077541999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.07770800000002964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","update-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types update-record formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.07995800000003328,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.12004100000001472,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.0801250000000664,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.07375000000001819,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.07462499999996908,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.07262499999990268,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.07224999999993997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","delete-record formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types delete-record formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.08262499999989359,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.4555830000000469,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.08770800000002055,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.08074999999996635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.06983400000001438,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.06941699999993034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.06666700000005221,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-attributes formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-attributes formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.0737499999999045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.125458999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.07474999999999454,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.12754200000006222,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.06995800000004238,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.06937499999992269,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.0685839999999871,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","get-detailed-info formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types get-detailed-info formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.06437500000004093,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle companies resource type","status":"passed","title":"should handle companies resource type","duration":0.1352919999999358,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle people resource type","status":"passed","title":"should handle people resource type","duration":0.06920800000000327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle lists resource type","status":"passed","title":"should handle lists resource type","duration":0.06620799999996052,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle records resource type","status":"passed","title":"should handle records resource type","duration":0.06366600000001199,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle tasks resource type","status":"passed","title":"should handle tasks resource type","duration":0.06654199999991306,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.06312500000001364,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","formatResult Functions Support All Resource Types","advanced-search formatResult"],"fullName":"Universal Resource Types Validation formatResult Functions Support All Resource Types advanced-search formatResult should handle notes resource type","status":"passed","title":"should handle notes resource type","duration":0.06787500000007185,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","Phase 2 LISTS Resource Type Validation"],"fullName":"Universal Resource Types Validation Phase 2 LISTS Resource Type Validation should properly support LISTS type in all formatResult functions","status":"passed","title":"should properly support LISTS type in all formatResult functions","duration":0.43450000000007094,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","Resource Type Mappings and Validation"],"fullName":"Universal Resource Types Validation Resource Type Mappings and Validation should handle plural and special forms correctly","status":"passed","title":"should handle plural and special forms correctly","duration":0.8489170000000286,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","Resource Type Mappings and Validation"],"fullName":"Universal Resource Types Validation Resource Type Mappings and Validation should have corresponding mock factories for all types","status":"passed","title":"should have corresponding mock factories for all types","duration":0.43858399999999165,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","Contract Consistency Across All Types"],"fullName":"Universal Resource Types Validation Contract Consistency Across All Types should return consistent string format across all resource types for search","status":"passed","title":"should return consistent string format across all resource types for search","duration":0.5934159999999338,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Resource Types Validation","Contract Consistency Across All Types"],"fullName":"Universal Resource Types Validation Contract Consistency Across All Types should return consistent string format across all resource types for details","status":"passed","title":"should return consistent string format across all resource types for details","duration":0.3730829999999514,"failureMessages":[],"meta":{}}],"startTime":1756513015326,"endTime":1756513015341.373,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/universal-resource-types-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should cache and retrieve tasks with default TTL","status":"passed","title":"should cache and retrieve tasks with default TTL","duration":1.7034579999999835,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should respect custom TTL","status":"passed","title":"should respect custom TTL","duration":111.831875,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should generate consistent cache keys","status":"passed","title":"should generate consistent cache keys","duration":0.6355839999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should clear all tasks cache","status":"passed","title":"should clear all tasks cache","duration":0.620666999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should clear only expired cache entries","status":"passed","title":"should clear only expired cache entries","duration":101.08808300000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should provide cache statistics","status":"passed","title":"should provide cache statistics","duration":0.3032079999999837,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should check for cached 404 responses","status":"passed","title":"should check for cached 404 responses","duration":0.28645899999997937,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should cache 404 responses with default TTL","status":"passed","title":"should cache 404 responses with default TTL","duration":0.6493749999999636,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should cache 404 responses with custom TTL","status":"passed","title":"should cache 404 responses with custom TTL","duration":0.5654169999999681,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should load data when cache is empty","status":"passed","title":"should load data when cache is empty","duration":0.289874999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should return cached data when available","status":"passed","title":"should return cached data when available","duration":0.3476670000000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should handle data loader errors gracefully","status":"passed","title":"should handle data loader errors gracefully","duration":0.7428749999999695,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should use custom cache key and TTL","status":"passed","title":"should use custom cache key and TTL","duration":0.22179199999999355,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should reload data when cache expires","status":"passed","title":"should reload data when cache expires","duration":60.796333000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle empty arrays in cache","status":"passed","title":"should handle empty arrays in cache","duration":0.4001670000000104,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle undefined cache keys gracefully","status":"passed","title":"should handle undefined cache keys gracefully","duration":0.40300000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle concurrent cache operations","status":"passed","title":"should handle concurrent cache operations","duration":0.105041999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Performance Characteristics"],"fullName":"CachingService Performance Characteristics should handle large datasets efficiently","status":"passed","title":"should handle large datasets efficiently","duration":0.2674159999999688,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Performance Characteristics"],"fullName":"CachingService Performance Characteristics should maintain performance with multiple cache keys","status":"passed","title":"should maintain performance with multiple cache keys","duration":0.17537500000003092,"failureMessages":[],"meta":{}}],"startTime":1756513011435,"endTime":1756513011717.403,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/services/CachingService.test.ts"},{"assertionResults":[{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should pass through UniversalValidationError unchanged","status":"passed","title":"should pass through UniversalValidationError unchanged","duration":5.000749999999925,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should pass through EnhancedApiError unchanged","status":"passed","title":"should pass through EnhancedApiError unchanged","duration":0.30599999999992633,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should extract message from Error objects","status":"passed","title":"should extract message from Error objects","duration":0.5784999999999627,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should extract message from objects with message property","status":"passed","title":"should extract message from objects with message property","duration":0.7066670000000386,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should handle string errors","status":"passed","title":"should handle string errors","duration":1.2849999999999682,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should handle unknown error types","status":"passed","title":"should handle unknown error types","duration":0.3185000000000855,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify USER_ERROR for not found messages","status":"passed","title":"should classify USER_ERROR for not found messages","duration":1.277541000000042,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify USER_ERROR for invalid messages","status":"passed","title":"should classify USER_ERROR for invalid messages","duration":0.31262500000002547,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify USER_ERROR for required messages","status":"passed","title":"should classify USER_ERROR for required messages","duration":0.7061660000000529,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify USER_ERROR for 400 status codes","status":"passed","title":"should classify USER_ERROR for 400 status codes","duration":0.9618339999999534,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify API_ERROR for 500+ status codes","status":"passed","title":"should classify API_ERROR for 500+ status codes","duration":1.3515409999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should classify API_ERROR for network errors","status":"passed","title":"should classify API_ERROR for network errors","duration":0.23683299999993324,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should default to SYSTEM_ERROR for unclassified errors","status":"passed","title":"should default to SYSTEM_ERROR for unclassified errors","duration":0.0977500000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should include operation suggestion in error details","status":"passed","title":"should include operation suggestion in error details","duration":0.17649999999991905,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","createUniversalError"],"fullName":"ErrorService createUniversalError should include original error as cause","status":"passed","title":"should include original error as cause","duration":0.31370800000001964,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should return resource type suggestion for invalid resource","status":"passed","title":"should return resource type suggestion for invalid resource","duration":4.241209000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide date format suggestions for date parsing errors","status":"passed","title":"should provide date format suggestions for date parsing errors","duration":0.4732500000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide date range suggestions","status":"passed","title":"should provide date range suggestions","duration":0.15079200000002402,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should suggest simpler filters for unsupported filter combinations","status":"passed","title":"should suggest simpler filters for unsupported filter combinations","duration":0.10275000000001455,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should suggest batch size limits","status":"passed","title":"should suggest batch size limits","duration":0.15375000000005912,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should suggest rate limit handling","status":"passed","title":"should suggest rate limit handling","duration":0.5652079999999842,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide deal-specific suggestions for company_id error","status":"passed","title":"should provide deal-specific suggestions for company_id error","duration":0.8420830000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide deal-specific suggestions for deal_stage error","status":"passed","title":"should provide deal-specific suggestions for deal_stage error","duration":0.21079199999996945,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide deal-specific suggestions for deal_value error","status":"passed","title":"should provide deal-specific suggestions for deal_value error","duration":0.36808300000006966,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide deal-specific suggestions for invalid value format","status":"passed","title":"should provide deal-specific suggestions for invalid value format","duration":0.1009159999999838,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should suggest field discovery for unknown attributes","status":"passed","title":"should suggest field discovery for unknown attributes","duration":1.1350830000000087,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide generic not found suggestions","status":"passed","title":"should provide generic not found suggestions","duration":0.13466700000003584,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide authentication suggestions for unauthorized errors","status":"passed","title":"should provide authentication suggestions for unauthorized errors","duration":0.09045800000001236,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide duplicate record suggestions for create operations","status":"passed","title":"should provide duplicate record suggestions for create operations","duration":0.1490000000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide uniqueness constraint suggestions","status":"passed","title":"should provide uniqueness constraint suggestions","duration":0.17079100000000835,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should handle string errors","status":"passed","title":"should handle string errors","duration":0.1804580000000442,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should handle object errors with message property","status":"passed","title":"should handle object errors with message property","duration":0.3352500000000873,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should return undefined for unknown error patterns","status":"passed","title":"should return undefined for unknown error patterns","duration":0.14529099999992923,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide deal-specific suggestions for various field errors","status":"passed","title":"should provide deal-specific suggestions for various field errors","duration":0.5524580000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide field suggestions for deal attribute errors","status":"passed","title":"should provide field suggestions for deal attribute errors","duration":0.12716699999998582,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","getOperationSuggestion"],"fullName":"ErrorService getOperationSuggestion should provide generic field suggestions for non-deal resources","status":"passed","title":"should provide generic field suggestions for non-deal resources","duration":0.15516700000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","Edge Cases"],"fullName":"ErrorService Edge Cases should handle null and undefined errors gracefully","status":"passed","title":"should handle null and undefined errors gracefully","duration":0.40220799999997325,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","Edge Cases"],"fullName":"ErrorService Edge Cases should handle empty error messages","status":"passed","title":"should handle empty error messages","duration":0.07699999999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService","Edge Cases"],"fullName":"ErrorService Edge Cases should handle malformed error objects","status":"passed","title":"should handle malformed error objects","duration":0.08808399999998073,"failureMessages":[],"meta":{}}],"startTime":1756513016744,"endTime":1756513016770.0881,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/services/ErrorService.test.ts"},{"assertionResults":[{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should create validation error with default resource type","status":"passed","title":"should create validation error with default resource type","duration":1.7270000000000891,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should create validation error with custom resource type","status":"passed","title":"should create validation error with custom resource type","duration":0.18087500000001455,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should include valid ISO timestamp","status":"passed","title":"should include valid ISO timestamp","duration":0.21908400000006623,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should pass for valid limit values","status":"passed","title":"should pass for valid limit values","duration":0.48120799999992414,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should pass for undefined limit","status":"passed","title":"should pass for undefined limit","duration":0.1961670000000595,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for non-integer limit","status":"passed","title":"should throw for non-integer limit","duration":0.8165840000000344,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for zero or negative limit","status":"passed","title":"should throw for zero or negative limit","duration":0.18962499999997817,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for limit exceeding maximum","status":"passed","title":"should throw for limit exceeding maximum","duration":0.17391600000007656,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should respect custom maximum limit","status":"passed","title":"should respect custom maximum limit","duration":2.078666999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should call performance tracker on error when perfId provided","status":"passed","title":"should call performance tracker on error when perfId provided","duration":0.7626249999999573,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should pass for valid offset values","status":"passed","title":"should pass for valid offset values","duration":0.15104199999996126,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should pass for undefined offset","status":"passed","title":"should pass for undefined offset","duration":0.09916599999996834,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for non-integer offset","status":"passed","title":"should throw for non-integer offset","duration":0.09941700000001674,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for negative offset","status":"passed","title":"should throw for negative offset","duration":0.09091699999999037,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for offset exceeding maximum","status":"passed","title":"should throw for offset exceeding maximum","duration":0.09258299999999053,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should respect custom maximum offset","status":"passed","title":"should respect custom maximum offset","duration":0.1204169999999749,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should validate both limit and offset together","status":"passed","title":"should validate both limit and offset together","duration":0.09683400000005804,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should throw if either parameter is invalid","status":"passed","title":"should throw if either parameter is invalid","duration":0.11920900000006895,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should pass for empty parameters","status":"passed","title":"should pass for empty parameters","duration":0.08100000000001728,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should pass for valid UUIDs in non-task resources","status":"passed","title":"should pass for valid UUIDs in non-task resources","duration":0.17204199999991943,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should skip validation for tasks resource","status":"passed","title":"should skip validation for tasks resource","duration":0.17012499999998454,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should throw for invalid UUIDs in non-task resources","status":"passed","title":"should throw for invalid UUIDs in non-task resources","duration":0.1875,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should track performance when perfId provided","status":"passed","title":"should track performance when perfId provided","duration":0.5120829999999614,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should return suggestions unchanged when under limit","status":"passed","title":"should return suggestions unchanged when under limit","duration":0.1474590000000262,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should truncate suggestions when over default limit","status":"passed","title":"should truncate suggestions when over default limit","duration":0.07733299999995324,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should respect custom max count","status":"passed","title":"should respect custom max count","duration":2.841583000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.9446250000000873,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should pass for valid email addresses","status":"passed","title":"should pass for valid email addresses","duration":0.2279160000000502,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle different email field formats","status":"passed","title":"should handle different email field formats","duration":0.257959000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle email objects with email_address field","status":"passed","title":"should handle email objects with email_address field","duration":0.13220899999998892,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle email objects with email field","status":"passed","title":"should handle email objects with email field","duration":0.12087499999995543,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle email objects with value field (Issue #511)","status":"passed","title":"should handle email objects with value field (Issue #511)","duration":0.11583299999995234,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle mixed email formats including value objects (Issue #511)","status":"passed","title":"should handle mixed email formats including value objects (Issue #511)","duration":0.2926660000000538,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should validate rich email metadata objects with value field (Issue #511)","status":"passed","title":"should validate rich email metadata objects with value field (Issue #511)","duration":0.13695899999993344,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should throw for invalid emails in value objects (Issue #511)","status":"passed","title":"should throw for invalid emails in value objects (Issue #511)","duration":0.1479580000000169,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should throw UniversalValidationError for invalid emails","status":"passed","title":"should throw UniversalValidationError for invalid emails","duration":0.08091699999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should provide helpful error message for invalid emails","status":"passed","title":"should provide helpful error message for invalid emails","duration":0.1781660000000329,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should skip invalid email formats gracefully","status":"passed","title":"should skip invalid email formats gracefully","duration":0.16049999999995634,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle null or undefined record data","status":"passed","title":"should handle null or undefined record data","duration":0.08808299999998326,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should pass for valid field validation","status":"passed","title":"should pass for valid field validation","duration":0.14312499999994088,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should return error message for invalid validation when not throwing","status":"passed","title":"should return error message for invalid validation when not throwing","duration":0.30558399999995345,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should throw UniversalValidationError for invalid validation when throwing enabled","status":"passed","title":"should throw UniversalValidationError for invalid validation when throwing enabled","duration":0.10762499999998454,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should truncate suggestions in error message","status":"passed","title":"should truncate suggestions in error message","duration":0.11387499999989359,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should return true for valid UUIDs","status":"passed","title":"should return true for valid UUIDs","duration":0.08933300000001054,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should fallback to generic ID validation when UUID fails","status":"passed","title":"should fallback to generic ID validation when UUID fails","duration":0.07495800000003783,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should return false when both validations fail","status":"passed","title":"should return false when both validations fail","duration":0.05750000000000455,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should skip generic validation when allowGeneric is false","status":"passed","title":"should skip generic validation when allowGeneric is false","duration":0.07066700000007131,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUniversalOperation"],"fullName":"ValidationService validateUniversalOperation should return valid for successful validation","status":"passed","title":"should return valid for successful validation","duration":0.14187500000002728,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUniversalOperation"],"fullName":"ValidationService validateUniversalOperation should collect all validation errors","status":"passed","title":"should collect all validation errors","duration":0.1109159999999747,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUniversalOperation"],"fullName":"ValidationService validateUniversalOperation should handle partial parameter validation","status":"passed","title":"should handle partial parameter validation","duration":0.11000000000001364,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should handle empty strings gracefully","status":"passed","title":"should handle empty strings gracefully","duration":0.09370799999999235,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should handle very large suggestion arrays efficiently","status":"passed","title":"should handle very large suggestion arrays efficiently","duration":0.1526250000000573,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should preserve original arrays when truncating","status":"passed","title":"should preserve original arrays when truncating","duration":0.0837500000000091,"failureMessages":[],"meta":{}}],"startTime":1756513016290,"endTime":1756513016307.1526,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/services/ValidationService.test.ts"},{"assertionResults":[{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should apply color codes to text","status":"passed","title":"should apply color codes to text","duration":1.3534579999999892,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle all available colors","status":"passed","title":"should handle all available colors","duration":0.6803750000000264,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle empty text","status":"passed","title":"should handle empty text","duration":3.116458000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle special characters","status":"passed","title":"should handle special characters","duration":0.3476670000000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colors export"],"fullName":"CLI Colors Utility colors export should export color codes object","status":"passed","title":"should export color codes object","duration":0.25225000000000364,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colors export"],"fullName":"CLI Colors Utility colors export should have all expected color properties","status":"passed","title":"should have all expected color properties","duration":0.48050000000000637,"failureMessages":[],"meta":{}}],"startTime":1756513020379,"endTime":1756513020385.4805,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/utils/cli-colors.test.ts"},{"assertionResults":[{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from simple domain","status":"passed","title":"should extract domain from simple domain","duration":1.8016250000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from URLs","status":"passed","title":"should extract domain from URLs","duration":0.20858299999997598,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from email addresses","status":"passed","title":"should extract domain from email addresses","duration":0.2731249999999932,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should handle invalid inputs","status":"passed","title":"should handle invalid inputs","duration":0.2911659999999756,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from text containing domains","status":"passed","title":"should extract domain from text containing domains","duration":0.17758299999997007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should validate correct domains","status":"passed","title":"should validate correct domains","duration":0.3195830000000228,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should reject invalid domains","status":"passed","title":"should reject invalid domains","duration":0.20154200000001765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should handle edge cases","status":"passed","title":"should handle edge cases","duration":0.5542919999999754,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should normalize domains correctly","status":"passed","title":"should normalize domains correctly","duration":1.655208000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should handle empty input","status":"passed","title":"should handle empty input","duration":0.18095800000003237,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should preserve subdomain structure","status":"passed","title":"should preserve subdomain structure","duration":0.09187500000001592,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should detect domain indicators in text","status":"passed","title":"should detect domain indicators in text","duration":0.21091699999999491,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should not detect domains in plain text","status":"passed","title":"should not detect domains in plain text","duration":0.1284170000000131,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should handle edge cases","status":"passed","title":"should handle edge cases","duration":0.0811249999999859,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should extract single domain","status":"passed","title":"should extract single domain","duration":0.8608330000000137,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should extract multiple domains","status":"passed","title":"should extract multiple domains","duration":0.926166999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should remove duplicates","status":"passed","title":"should remove duplicates","duration":0.11954200000002402,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should handle complex text","status":"passed","title":"should handle complex text","duration":0.20479200000005449,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should handle empty input","status":"passed","title":"should handle empty input","duration":0.08662499999996953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should normalize extracted domains","status":"passed","title":"should normalize extracted domains","duration":0.10495800000001054,"failureMessages":[],"meta":{}}],"startTime":1756513017213,"endTime":1756513017221.2048,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/utils/domain-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle basic objects","status":"passed","title":"should handle basic objects","duration":2.9252500000000055,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle circular references","status":"passed","title":"should handle circular references","duration":1.4777499999999577,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle nested circular references","status":"passed","title":"should handle nested circular references","duration":0.3084159999999656,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle functions","status":"passed","title":"should handle functions","duration":0.18512500000002774,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle undefined values","status":"passed","title":"should handle undefined values","duration":0.19220900000004804,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle symbols","status":"passed","title":"should handle symbols","duration":0.16412500000001273,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle Error objects","status":"passed","title":"should handle Error objects","duration":0.20299999999997453,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle deep objects without exceeding max depth","status":"passed","title":"should handle deep objects without exceeding max depth","duration":0.17662500000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should truncate very long strings","status":"passed","title":"should truncate very long strings","duration":0.5557499999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","validateJsonString"],"fullName":"JSON Serializer validateJsonString should validate correct JSON strings","status":"passed","title":"should validate correct JSON strings","duration":0.25162499999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","validateJsonString"],"fullName":"JSON Serializer validateJsonString should detect invalid JSON strings","status":"passed","title":"should detect invalid JSON strings","duration":0.10920799999996689,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should detect direct circular references","status":"passed","title":"should detect direct circular references","duration":0.1103750000000332,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should detect nested circular references","status":"passed","title":"should detect nested circular references","duration":0.06270900000004076,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should return false for objects without circular references","status":"passed","title":"should return false for objects without circular references","duration":0.05462499999998727,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","createSafeCopy"],"fullName":"JSON Serializer createSafeCopy should create a safe copy of an object with circular references","status":"passed","title":"should create a safe copy of an object with circular references","duration":0.09991600000000744,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","sanitizeMcpResponse"],"fullName":"JSON Serializer sanitizeMcpResponse should sanitize MCP responses with circular references","status":"passed","title":"should sanitize MCP responses with circular references","duration":0.1775830000000269,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","sanitizeMcpResponse"],"fullName":"JSON Serializer sanitizeMcpResponse should handle non-object responses","status":"passed","title":"should handle non-object responses","duration":0.06804199999999128,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","Real-world MCP response scenarios"],"fullName":"JSON Serializer Real-world MCP response scenarios should handle complex nested response objects","status":"passed","title":"should handle complex nested response objects","duration":0.6065419999999904,"failureMessages":[],"meta":{}}],"startTime":1756513016784,"endTime":1756513016791.6064,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/utils/json-serializer.test.ts"},{"assertionResults":[{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should parse simple string name \"John Doe\" into structured format","status":"passed","title":"should parse simple string name \"John Doe\" into structured format","duration":1.3452080000000137,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle single name \"Madonna\"","status":"passed","title":"should handle single name \"Madonna\"","duration":0.212791999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle three-part names \"John Middle Doe\"","status":"passed","title":"should handle three-part names \"John Middle Doe\"","duration":0.12770799999998417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle structured input with first and last name","status":"passed","title":"should handle structured input with first and last name","duration":0.16862500000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should preserve title in structured input","status":"passed","title":"should preserve title in structured input","duration":0.22024999999996453,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle empty string by returning null","status":"passed","title":"should handle empty string by returning null","duration":0.11025000000000773,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle whitespace-only string by returning null","status":"passed","title":"should handle whitespace-only string by returning null","duration":0.20558300000004692,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle null input","status":"passed","title":"should handle null input","duration":0.2658749999999941,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle undefined input","status":"passed","title":"should handle undefined input","duration":0.5935420000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should preserve existing full_name in structured input","status":"passed","title":"should preserve existing full_name in structured input","duration":0.15070800000000872,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle complex names with multiple middle names","status":"passed","title":"should handle complex names with multiple middle names","duration":0.0898339999999962,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle extra whitespace in names","status":"passed","title":"should handle extra whitespace in names","duration":0.08466699999996763,"failureMessages":[],"meta":{}}],"startTime":1756513019614,"endTime":1756513019617.5935,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/src/utils/personal-name-parser.test.ts"},{"assertionResults":[{"ancestorTitles":["Deal Defaults - PR #389 Fix","applyDealDefaultsWithValidation"],"fullName":"Deal Defaults - PR #389 Fix applyDealDefaultsWithValidation should skip API validation when skipValidation is true","status":"passed","title":"should skip API validation when skipValidation is true","duration":1.981958000000077,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","applyDealDefaultsWithValidation"],"fullName":"Deal Defaults - PR #389 Fix applyDealDefaultsWithValidation should make API call when skipValidation is false","status":"passed","title":"should make API call when skipValidation is false","duration":1.3010000000000446,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","validateDealStage"],"fullName":"Deal Defaults - PR #389 Fix validateDealStage should skip API call when skipApiCall is true","status":"passed","title":"should skip API call when skipApiCall is true","duration":0.32816700000000765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","validateDealStage"],"fullName":"Deal Defaults - PR #389 Fix validateDealStage should cache results to prevent repeated API calls","status":"passed","title":"should cache results to prevent repeated API calls","duration":0.494542000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","Error Path Handling"],"fullName":"Deal Defaults - PR #389 Fix Error Path Handling should handle deal creation error without making additional API calls","status":"passed","title":"should handle deal creation error without making additional API calls","duration":88.98904200000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","Cache Management"],"fullName":"Deal Defaults - PR #389 Fix Cache Management should clear all caches when clearDealCaches is called","status":"passed","title":"should clear all caches when clearDealCaches is called","duration":0.816332999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","Cache Management"],"fullName":"Deal Defaults - PR #389 Fix Cache Management should pre-warm cache without errors","status":"passed","title":"should pre-warm cache without errors","duration":0.22070900000005622,"failureMessages":[],"meta":{}},{"ancestorTitles":["Deal Defaults - PR #389 Fix","Input Validation"],"fullName":"Deal Defaults - PR #389 Fix Input Validation should validate deal input and provide helpful suggestions","status":"passed","title":"should validate deal input and provide helpful suggestions","duration":4.182000000000016,"failureMessages":[],"meta":{}}],"startTime":1756513017020,"endTime":1756513017119.182,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/config/deal-defaults.test.ts"},{"assertionResults":[{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for missing filters object","status":"passed","title":"should throw appropriate error for missing filters object","duration":2.237374999999929,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for missing filters array","status":"passed","title":"should throw appropriate error for missing filters array","duration":0.20954200000005585,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for non-array filters","status":"passed","title":"should throw appropriate error for non-array filters","duration":0.1528329999999869,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for invalid filter structure","status":"passed","title":"should throw appropriate error for invalid filter structure","duration":0.30600000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for missing attribute.slug","status":"passed","title":"should throw appropriate error for missing attribute.slug","duration":0.5869169999999713,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Validation Tests","advancedSearchCompanies validation"],"fullName":"Advanced Search Validation Tests advancedSearchCompanies validation should throw appropriate error for missing condition","status":"passed","title":"should throw appropriate error for missing condition","duration":0.6052500000000691,"failureMessages":[],"meta":{}}],"startTime":1756513020221,"endTime":1756513020225.6052,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/advanced-search-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Advanced Search API Tests","advancedSearchCompanies"],"fullName":"Advanced Search API Tests advancedSearchCompanies should return companies matching a simple name filter","status":"passed","title":"should return companies matching a simple name filter","duration":3.4730840000000285,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchCompanies"],"fullName":"Advanced Search API Tests advancedSearchCompanies should handle OR logic with multiple conditions","status":"passed","title":"should handle OR logic with multiple conditions","duration":0.36783300000001873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchCompanies"],"fullName":"Advanced Search API Tests advancedSearchCompanies should handle company-specific attributes","status":"passed","title":"should handle company-specific attributes","duration":0.21491600000001654,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchCompanies"],"fullName":"Advanced Search API Tests advancedSearchCompanies should throw appropriate error for invalid filter structure","status":"passed","title":"should throw appropriate error for invalid filter structure","duration":0.7170419999999922,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchCompanies"],"fullName":"Advanced Search API Tests advancedSearchCompanies should throw appropriate error for invalid condition","status":"passed","title":"should throw appropriate error for invalid condition","duration":7794.799000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchObject"],"fullName":"Advanced Search API Tests advancedSearchObject should search companies with the lower-level API function","status":"passed","title":"should search companies with the lower-level API function","duration":3.5568750000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchObject"],"fullName":"Advanced Search API Tests advancedSearchObject should handle errors at the generic API level","status":"passed","title":"should handle errors at the generic API level","duration":6014.925250000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search API Tests","advancedSearchObject"],"fullName":"Advanced Search API Tests advancedSearchObject should handle non-array filters with clear error","status":"passed","title":"should handle non-array filters with clear error","duration":8363.310667,"failureMessages":[],"meta":{}}],"startTime":1756513007074,"endTime":1756513029257.3105,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/advanced-search.test.ts"},{"assertionResults":[{"ancestorTitles":["Attribute Type Detection","getObjectAttributeMetadata"],"fullName":"Attribute Type Detection getObjectAttributeMetadata should fetch and cache attribute metadata for an object","status":"failed","title":"should fetch and cache attribute metadata for an object","duration":5.443166999999903,"failureMessages":["AssertionError: expected \"spy\" to be called with arguments: [ '/objects/companies/attributes' ]\u001b[90m\n\nNumber of calls: \u001b[1m0\u001b[22m\n\u001b[39m\n    at Proxy.<anonymous> (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/expect/dist/index.js:1355:10)\n    at Proxy.<anonymous> (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/chai/chai.js:1706:25)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:54:27\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getObjectAttributeMetadata"],"fullName":"Attribute Type Detection getObjectAttributeMetadata should handle API errors gracefully","status":"passed","title":"should handle API errors gracefully","duration":0.3318330000000742,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Type Detection","detectFieldType"],"fullName":"Attribute Type Detection detectFieldType should detect string type for text fields","status":"passed","title":"should detect string type for text fields","duration":0.2137079999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Type Detection","detectFieldType"],"fullName":"Attribute Type Detection detectFieldType should detect array type for multi-value fields","status":"failed","title":"should detect array type for multi-value fields","duration":1.7736249999999245,"failureMessages":["AssertionError: expected 'string' to be 'array' // Object.is equality\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:106:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","detectFieldType"],"fullName":"Attribute Type Detection detectFieldType should detect number type for numeric fields","status":"failed","title":"should detect number type for numeric fields","duration":0.6658750000000282,"failureMessages":["AssertionError: expected 'string' to be 'number' // Object.is equality\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:123:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","detectFieldType"],"fullName":"Attribute Type Detection detectFieldType should detect boolean type for checkbox fields","status":"failed","title":"should detect boolean type for checkbox fields","duration":0.866457999999966,"failureMessages":["AssertionError: expected 'string' to be 'boolean' // Object.is equality\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:140:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","detectFieldType"],"fullName":"Attribute Type Detection detectFieldType should default to string for unknown attributes","status":"passed","title":"should default to string for unknown attributes","duration":0.16308299999991505,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getAttributeTypeInfo"],"fullName":"Attribute Type Detection getAttributeTypeInfo should return comprehensive type information","status":"failed","title":"should return comprehensive type information","duration":2.06412499999999,"failureMessages":["AssertionError: expected { fieldType: 'string', …(5) } to deeply equal { fieldType: 'string', …(5) }\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:169:24\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getAttributeTypeInfo"],"fullName":"Attribute Type Detection getAttributeTypeInfo should handle missing metadata gracefully","status":"passed","title":"should handle missing metadata gracefully","duration":0.6172920000000204,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getFieldValidationRules"],"fullName":"Attribute Type Detection getFieldValidationRules should generate validation rules for email fields","status":"failed","title":"should generate validation rules for email fields","duration":0.7317500000000337,"failureMessages":["AssertionError: expected { type: 'string', …(3) } to deeply equal { Object (type, required, ...) }\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:214:21\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getFieldValidationRules"],"fullName":"Attribute Type Detection getFieldValidationRules should generate validation rules for URL fields","status":"failed","title":"should generate validation rules for URL fields","duration":0.5042499999999563,"failureMessages":["AssertionError: expected { type: 'string', …(3) } to have property \"pattern\" with value '^https?://'\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:238:21\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Attribute Type Detection","getFieldValidationRules"],"fullName":"Attribute Type Detection getFieldValidationRules should generate validation rules for select fields with options","status":"failed","title":"should generate validation rules for select fields with options","duration":0.27216599999997015,"failureMessages":["AssertionError: expected { type: 'string', …(3) } to have property \"enum\" with value [ 'active', 'inactive', 'pending' ]\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts:263:21\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}}],"startTime":1756513006791,"endTime":1756513006805.5042,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-types.test.ts"},{"assertionResults":[{"ancestorTitles":["Attribute Validation with Real Attio API","Company validation with real attributes"],"fullName":"Attribute Validation with Real Attio API Company validation with real attributes should fetch real attribute metadata from Attio API","status":"skipped","title":"should fetch real attribute metadata from Attio API","failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validation with Real Attio API","Company validation with real attributes"],"fullName":"Attribute Validation with Real Attio API Company validation with real attributes should validate company creation with type conversion","status":"skipped","title":"should validate company creation with type conversion","failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validation with Real Attio API","Company validation with real attributes"],"fullName":"Attribute Validation with Real Attio API Company validation with real attributes should validate company update with type conversion","status":"skipped","title":"should validate company update with type conversion","failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validation with Real Attio API","Company validation with real attributes"],"fullName":"Attribute Validation with Real Attio API Company validation with real attributes should validate single attribute update","status":"skipped","title":"should validate single attribute update","failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validation with Real Attio API","Company validation with real attributes"],"fullName":"Attribute Validation with Real Attio API Company validation with real attributes should reject invalid attribute values","status":"skipped","title":"should reject invalid attribute values","failureMessages":[],"meta":{}}],"startTime":1756513006047,"endTime":1756513006047,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/attribute-validation-real-api.test.ts"},{"assertionResults":[{"ancestorTitles":["Batch Operations","executeBatchOperations"],"fullName":"Batch Operations executeBatchOperations should execute multiple operations and return results","status":"passed","title":"should execute multiple operations and return results","duration":2.4822499999999934,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","executeBatchOperations"],"fullName":"Batch Operations executeBatchOperations should handle operation failures with continueOnError=true","status":"passed","title":"should handle operation failures with continueOnError=true","duration":0.46862500000000296,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","executeBatchOperations"],"fullName":"Batch Operations executeBatchOperations should stop on first error when continueOnError=false","status":"passed","title":"should stop on first error when continueOnError=false","duration":0.6902499999999918,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","executeBatchOperations"],"fullName":"Batch Operations executeBatchOperations should process operations in chunks based on maxBatchSize","status":"passed","title":"should process operations in chunks based on maxBatchSize","duration":0.4985839999999939,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchSearchObjects"],"fullName":"Batch Operations batchSearchObjects should perform batch search for people","status":"passed","title":"should perform batch search for people","duration":0.41004200000000424,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchSearchObjects"],"fullName":"Batch Operations batchSearchObjects should perform batch search for companies","status":"passed","title":"should perform batch search for companies","duration":0.19374999999999432,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchSearchObjects"],"fullName":"Batch Operations batchSearchObjects should handle mixed success and failure in batch search","status":"passed","title":"should handle mixed success and failure in batch search","duration":0.20216700000000287,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchGetObjectDetails"],"fullName":"Batch Operations batchGetObjectDetails should get details for multiple people","status":"passed","title":"should get details for multiple people","duration":0.151457999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchGetObjectDetails"],"fullName":"Batch Operations batchGetObjectDetails should get details for multiple companies","status":"passed","title":"should get details for multiple companies","duration":0.5508750000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Operations","batchGetObjectDetails"],"fullName":"Batch Operations batchGetObjectDetails should handle missing records in batch get","status":"passed","title":"should handle missing records in batch get","duration":0.21812499999998636,"failureMessages":[],"meta":{}}],"startTime":1756513014486,"endTime":1756513014492.218,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/batch-operations.test.ts"},{"assertionResults":[{"ancestorTitles":["Boolean Attribute API Tests"],"fullName":"Boolean Attribute API Tests updates boolean attribute with string \"false\"","status":"passed","title":"updates boolean attribute with string \"false\"","duration":8.234624999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Boolean Attribute API Tests"],"fullName":"Boolean Attribute API Tests updates boolean attribute with string \"true\"","status":"passed","title":"updates boolean attribute with string \"true\"","duration":3.920708999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Boolean Attribute API Tests"],"fullName":"Boolean Attribute API Tests updates multiple boolean attributes with string values","status":"passed","title":"updates multiple boolean attributes with string values","duration":2.1441659999999274,"failureMessages":[],"meta":{}}],"startTime":1756513016372,"endTime":1756513016386.1443,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/boolean-attribute-update.test.ts"},{"assertionResults":[{"ancestorTitles":["Email Validation","PersonValidator.validateCreate"],"fullName":"Email Validation PersonValidator.validateCreate should reject invalid email formats during creation","status":"passed","title":"should reject invalid email formats during creation","duration":6.686707999999953,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateCreate"],"fullName":"Email Validation PersonValidator.validateCreate should accept valid email formats during creation","status":"passed","title":"should accept valid email formats during creation","duration":1.7525419999999485,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateCreate"],"fullName":"Email Validation PersonValidator.validateCreate should validate email format before checking for duplicates","status":"passed","title":"should validate email format before checking for duplicates","duration":0.4603749999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateCreate"],"fullName":"Email Validation PersonValidator.validateCreate should handle email addresses as array properly","status":"passed","title":"should handle email addresses as array properly","duration":0.42433299999993324,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateCreate"],"fullName":"Email Validation PersonValidator.validateCreate should convert single email string to array","status":"passed","title":"should convert single email string to array","duration":0.33466699999996763,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateAttributeUpdate"],"fullName":"Email Validation PersonValidator.validateAttributeUpdate should reject invalid email formats during attribute update","status":"passed","title":"should reject invalid email formats during attribute update","duration":0.49966600000004746,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation","PersonValidator.validateAttributeUpdate"],"fullName":"Email Validation PersonValidator.validateAttributeUpdate should accept valid email formats during attribute update","status":"passed","title":"should accept valid email formats during attribute update","duration":0.3720829999999751,"failureMessages":[],"meta":{}}],"startTime":1756513016757,"endTime":1756513016767.4998,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/email-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Industry-Categories Mapping - E2E Tests","Company Creation with Industry Field"],"fullName":"Industry-Categories Mapping - E2E Tests Company Creation with Industry Field should create a company with industry field mapped to categories","status":"passed","title":"should create a company with industry field mapped to categories","duration":49.711042000000134,"failureMessages":[],"meta":{}},{"ancestorTitles":["Industry-Categories Mapping - E2E Tests","Company Creation with Industry Field"],"fullName":"Industry-Categories Mapping - E2E Tests Company Creation with Industry Field should update a company industry field and maintain categories mapping","status":"passed","title":"should update a company industry field and maintain categories mapping","duration":19.51800000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Industry-Categories Mapping - E2E Tests","Company Creation with Industry Field"],"fullName":"Industry-Categories Mapping - E2E Tests Company Creation with Industry Field should handle multiple industry values correctly","status":"passed","title":"should handle multiple industry values correctly","duration":13.858083000000079,"failureMessages":[],"meta":{}}],"startTime":1756513016075,"endTime":1756513016157.8582,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/industry-categories-mapping.test.ts"},{"assertionResults":[{"ancestorTitles":["get-list-details API test"],"fullName":"get-list-details API test should fetch list details directly from API","status":"skipped","title":"should fetch list details directly from API","failureMessages":[],"meta":{}},{"ancestorTitles":["get-list-details API test"],"fullName":"get-list-details API test should format list details through MCP tool","status":"passed","title":"should format list details through MCP tool","duration":13.121082999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["get-list-details API test"],"fullName":"get-list-details API test should handle non-existent list ID","status":"passed","title":"should handle non-existent list ID","duration":8.349666999999954,"failureMessages":[],"meta":{}}],"startTime":1756513017474,"endTime":1756513017499.3496,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/api/list-details.api.test.ts"},{"assertionResults":[{"ancestorTitles":["api-errors","AttioApiError"],"fullName":"api-errors AttioApiError should create a base API error with all properties","status":"passed","title":"should create a base API error with all properties","duration":4.6362080000000105,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","AttioApiError"],"fullName":"api-errors AttioApiError should format error message correctly","status":"passed","title":"should format error message correctly","duration":0.34816699999998946,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create an AuthenticationError with correct defaults","status":"passed","title":"should create an AuthenticationError with correct defaults","duration":1.0071250000000305,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create an AuthorizationError with correct defaults","status":"passed","title":"should create an AuthorizationError with correct defaults","duration":0.6144580000000133,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create a ResourceNotFoundError with correct formatting","status":"passed","title":"should create a ResourceNotFoundError with correct formatting","duration":0.409041000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create an InvalidRequestError","status":"passed","title":"should create an InvalidRequestError","duration":0.19062500000001137,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create a RateLimitError with correct defaults","status":"passed","title":"should create a RateLimitError with correct defaults","duration":0.15195900000003348,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","Specialized error classes"],"fullName":"api-errors Specialized error classes should create a ServerError with status code in message","status":"passed","title":"should create a ServerError with status code in message","duration":0.13866600000000062,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","createApiErrorFromStatus"],"fullName":"api-errors createApiErrorFromStatus should create the correct error type based on status code","status":"passed","title":"should create the correct error type based on status code","duration":1.894625000000019,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","createApiErrorFromAxiosError"],"fullName":"api-errors createApiErrorFromAxiosError should handle Axios error response format","status":"passed","title":"should handle Axios error response format","duration":0.5165410000000179,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","createApiErrorFromAxiosError"],"fullName":"api-errors createApiErrorFromAxiosError should correctly parse resource types from endpoints","status":"passed","title":"should correctly parse resource types from endpoints","duration":0.3301670000000172,"failureMessages":[],"meta":{}},{"ancestorTitles":["api-errors","createApiErrorFromAxiosError"],"fullName":"api-errors createApiErrorFromAxiosError should handle missing response data","status":"passed","title":"should handle missing response data","duration":0.21595800000000054,"failureMessages":[],"meta":{}}],"startTime":1756513016516,"endTime":1756513016527.33,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/errors/api-errors.test.ts"},{"assertionResults":[{"ancestorTitles":["List-Specific Attribute Detection","isListSpecificAttribute"],"fullName":"List-Specific Attribute Detection isListSpecificAttribute should identify common list-specific attributes","status":"passed","title":"should identify common list-specific attributes","duration":42.96637499999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["List-Specific Attribute Detection","isListSpecificAttribute"],"fullName":"List-Specific Attribute Detection isListSpecificAttribute should identify UUID attributes as list-specific","status":"passed","title":"should identify UUID attributes as list-specific","duration":0.7298330000000419,"failureMessages":[],"meta":{}},{"ancestorTitles":["List-Specific Attribute Detection","isListSpecificAttribute"],"fullName":"List-Specific Attribute Detection isListSpecificAttribute should not identify parent record attributes as list-specific","status":"passed","title":"should not identify parent record attributes as list-specific","duration":0.6109580000000392,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should use direct field access for list-specific attributes","status":"passed","title":"should use direct field access for list-specific attributes","duration":0.6277079999999842,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should use record.values path for parent record attributes","status":"passed","title":"should use record.values path for parent record attributes","duration":0.22087499999997817,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should handle multiple list-specific attributes with AND logic","status":"passed","title":"should handle multiple list-specific attributes with AND logic","duration":0.2554169999999658,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should handle OR logic with list-specific attributes","status":"passed","title":"should handle OR logic with list-specific attributes","duration":0.2125419999999849,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should handle mixed filters with both list and parent attributes","status":"passed","title":"should handle mixed filters with both list and parent attributes","duration":0.1575419999999781,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should handle UUID attribute filters","status":"passed","title":"should handle UUID attribute filters","duration":0.4955410000000029,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat with list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat with list entry context should handle empty value conditions correctly","status":"passed","title":"should handle empty value conditions correctly","duration":0.96712500000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["List Entry Filter Transformation","transformFiltersToApiFormat without list entry context"],"fullName":"List Entry Filter Transformation transformFiltersToApiFormat without list entry context should use standard field access for all attributes","status":"passed","title":"should use standard field access for all attributes","duration":0.11033300000002555,"failureMessages":[],"meta":{}},{"ancestorTitles":["Edge Cases"],"fullName":"Edge Cases should handle attributes with special characters","status":"passed","title":"should handle attributes with special characters","duration":0.08737500000000864,"failureMessages":[],"meta":{}},{"ancestorTitles":["Edge Cases"],"fullName":"Edge Cases should handle case-sensitive attribute detection","status":"passed","title":"should handle case-sensitive attribute detection","duration":0.0841670000000363,"failureMessages":[],"meta":{}},{"ancestorTitles":["Edge Cases"],"fullName":"Edge Cases should handle complex OR conditions with mixed attributes","status":"passed","title":"should handle complex OR conditions with mixed attributes","duration":0.14729200000004994,"failureMessages":[],"meta":{}}],"startTime":1756513019085,"endTime":1756513019133.1472,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/filters/list-attribute-filtering.test.ts"},{"assertionResults":[{"ancestorTitles":["Lists Batch Operations","batchGetListsDetails"],"fullName":"Lists Batch Operations batchGetListsDetails should use executeBatchOperations to get multiple lists details","status":"passed","title":"should use executeBatchOperations to get multiple lists details","duration":2.2719580000000406,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Batch Operations","batchGetListsDetails"],"fullName":"Lists Batch Operations batchGetListsDetails should handle errors in list details retrieval","status":"passed","title":"should handle errors in list details retrieval","duration":0.3852089999999748,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Batch Operations","batchGetListsEntries"],"fullName":"Lists Batch Operations batchGetListsEntries should use executeBatchOperations to get entries for multiple lists","status":"passed","title":"should use executeBatchOperations to get entries for multiple lists","duration":0.3746250000000373,"failureMessages":[],"meta":{}},{"ancestorTitles":["Lists Batch Operations","batchGetListsEntries"],"fullName":"Lists Batch Operations batchGetListsEntries should handle errors in list entries retrieval","status":"passed","title":"should handle errors in list entries retrieval","duration":0.2799580000000219,"failureMessages":[],"meta":{}}],"startTime":1756513020495,"endTime":1756513020499.28,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/objects/batch-lists.test.ts"},{"assertionResults":[{"ancestorTitles":["Companies Advanced Search"],"fullName":"Companies Advanced Search should return either array or paginated results","status":"passed","title":"should return either array or paginated results","duration":1.8924160000000256,"failureMessages":[],"meta":{}}],"startTime":1756513020633,"endTime":1756513020634.8923,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/objects/companies-advanced-search.test.ts"},{"assertionResults":[{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should call the API with the correct payload format","status":"passed","title":"should call the API with the correct payload format","duration":18.502250000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should throw error when objectType is not provided","status":"passed","title":"should throw error when objectType is not provided","duration":3.9036670000000413,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should omit entry_values if initialValues not provided","status":"passed","title":"should omit entry_values if initialValues not provided","duration":0.5572920000000181,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should throw an error for invalid listId","status":"passed","title":"should throw an error for invalid listId","duration":0.24091700000002447,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should throw an error for invalid recordId","status":"passed","title":"should throw an error for invalid recordId","duration":0.2333749999999668,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should throw an error for invalid objectType","status":"passed","title":"should throw an error for invalid objectType","duration":0.1915000000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should accept valid ResourceType values","status":"passed","title":"should accept valid ResourceType values","duration":0.33012500000000955,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should call the generic function first before fallback","status":"passed","title":"should call the generic function first before fallback","duration":0.23175000000003365,"failureMessages":[],"meta":{}},{"ancestorTitles":["addRecordToList Tests"],"fullName":"addRecordToList Tests should provide detailed error messages for validation errors","status":"passed","title":"should provide detailed error messages for validation errors","duration":0.6684999999999945,"failureMessages":[],"meta":{}}],"startTime":1756513018298,"endTime":1756513018324.6685,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/objects/lists.add-record.test.ts"},{"assertionResults":[{"ancestorTitles":["Records API","createObjectRecord"],"fullName":"Records API createObjectRecord should call createRecord to create a new record","status":"passed","title":"should call createRecord to create a new record","duration":3.9024169999999003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","createObjectRecord"],"fullName":"Records API createObjectRecord should handle errors and use fallback implementation if needed","status":"passed","title":"should handle errors and use fallback implementation if needed","duration":1.774791999999934,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","getObjectRecord"],"fullName":"Records API getObjectRecord should call getRecord to get record details","status":"passed","title":"should call getRecord to get record details","duration":0.30758300000002237,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","getObjectRecord"],"fullName":"Records API getObjectRecord should support attributes parameter","status":"passed","title":"should support attributes parameter","duration":0.30750000000000455,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","updateObjectRecord"],"fullName":"Records API updateObjectRecord should call updateRecord to update a record","status":"passed","title":"should call updateRecord to update a record","duration":0.43725000000006276,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","deleteObjectRecord"],"fullName":"Records API deleteObjectRecord should call deleteRecord to delete a record","status":"passed","title":"should call deleteRecord to delete a record","duration":0.2680840000000444,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","listObjectRecords"],"fullName":"Records API listObjectRecords should call listRecords to list records","status":"passed","title":"should call listRecords to list records","duration":0.4109170000000404,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","listObjectRecords"],"fullName":"Records API listObjectRecords should support filtering options","status":"passed","title":"should support filtering options","duration":2.1432499999999663,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","formatRecordAttribute"],"fullName":"Records API formatRecordAttribute should correctly format Date values","status":"passed","title":"should correctly format Date values","duration":0.9913749999999482,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","formatRecordAttribute"],"fullName":"Records API formatRecordAttribute should handle currency fields","status":"passed","title":"should handle currency fields","duration":0.1492079999999305,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","formatRecordAttribute"],"fullName":"Records API formatRecordAttribute should handle record ID links","status":"passed","title":"should handle record ID links","duration":0.17879199999993034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","formatRecordAttribute"],"fullName":"Records API formatRecordAttribute should return null and undefined as is","status":"passed","title":"should return null and undefined as is","duration":0.10954200000003311,"failureMessages":[],"meta":{}},{"ancestorTitles":["Records API","formatRecordAttributes"],"fullName":"Records API formatRecordAttributes should format multiple attributes","status":"passed","title":"should format multiple attributes","duration":0.16716700000006313,"failureMessages":[],"meta":{}}],"startTime":1756513016002,"endTime":1756513016014.1787,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/objects/records.test.ts"},{"assertionResults":[{"ancestorTitles":["Prompts Handlers","registerPromptHandlers"],"fullName":"Prompts Handlers registerPromptHandlers should register prompt handlers with the server","status":"passed","title":"should register prompt handlers with the server","duration":50.75908400000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompts Handlers","handlers implementation"],"fullName":"Prompts Handlers handlers implementation should implement prompts/list handler correctly","status":"passed","title":"should implement prompts/list handler correctly","duration":2.8194159999999897,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompts Handlers","handlers implementation"],"fullName":"Prompts Handlers handlers implementation should implement prompts/get handler correctly","status":"passed","title":"should implement prompts/get handler correctly","duration":0.38958299999995916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompts Handlers","handlers implementation"],"fullName":"Prompts Handlers handlers implementation should throw an error when prompt is not found","status":"passed","title":"should throw an error when prompt is not found","duration":26.170000000000016,"failureMessages":[],"meta":{}}],"startTime":1756513019677,"endTime":1756513019757.17,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/prompts/handlers.test.ts"},{"assertionResults":[{"ancestorTitles":["Prompt Templates","getAllPrompts"],"fullName":"Prompt Templates getAllPrompts should return all prompts from the registry","status":"passed","title":"should return all prompts from the registry","duration":2.3457500000000095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompt Templates","getPromptById"],"fullName":"Prompt Templates getPromptById should return a specific prompt by ID","status":"passed","title":"should return a specific prompt by ID","duration":0.1986660000000029,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompt Templates","getPromptById"],"fullName":"Prompt Templates getPromptById should return undefined for non-existent prompt ID","status":"passed","title":"should return undefined for non-existent prompt ID","duration":0.10704099999998107,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompt Templates","getPromptsByCategory"],"fullName":"Prompt Templates getPromptsByCategory should return prompts filtered by category","status":"passed","title":"should return prompts filtered by category","duration":0.3944169999999758,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompt Templates","getPromptsByCategory"],"fullName":"Prompt Templates getPromptsByCategory should return an empty array for non-existent category","status":"passed","title":"should return an empty array for non-existent category","duration":0.15733299999999417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Prompt Templates","getAllCategories"],"fullName":"Prompt Templates getAllCategories should return all unique categories","status":"passed","title":"should return all unique categories","duration":0.49462500000004184,"failureMessages":[],"meta":{}}],"startTime":1756513019596,"endTime":1756513019600.4946,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/prompts/templates.test.ts"},{"assertionResults":[{"ancestorTitles":["Enhanced Performance Tracker","Basic Operations"],"fullName":"Enhanced Performance Tracker Basic Operations should track operation timing","status":"passed","title":"should track operation timing","duration":13.512499999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Basic Operations"],"fullName":"Enhanced Performance Tracker Basic Operations should track timing splits","status":"passed","title":"should track timing splits","duration":39.67462499999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","404 Caching"],"fullName":"Enhanced Performance Tracker 404 Caching should cache 404 responses","status":"passed","title":"should cache 404 responses","duration":0.6960420000000056,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","404 Caching"],"fullName":"Enhanced Performance Tracker 404 Caching should expire cached 404 responses","status":"passed","title":"should expire cached 404 responses","duration":62.04529199999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Performance Budgets"],"fullName":"Enhanced Performance Tracker Performance Budgets should detect budget violations","status":"passed","title":"should detect budget violations","duration":0.45833399999997937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Statistics"],"fullName":"Enhanced Performance Tracker Statistics should calculate performance statistics","status":"passed","title":"should calculate performance statistics","duration":0.3821249999999736,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Statistics"],"fullName":"Enhanced Performance Tracker Statistics should calculate percentiles correctly","status":"passed","title":"should calculate percentiles correctly","duration":0.4333750000000123,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Report Generation"],"fullName":"Enhanced Performance Tracker Report Generation should generate a performance report","status":"passed","title":"should generate a performance report","duration":0.8548749999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Performance Tracker","Report Generation"],"fullName":"Enhanced Performance Tracker Report Generation should export metrics as JSON","status":"passed","title":"should export metrics as JSON","duration":0.8717919999999708,"failureMessages":[],"meta":{}}],"startTime":1756513012275,"endTime":1756513012394.8718,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/middleware/performance-enhanced.test.ts"},{"assertionResults":[{"ancestorTitles":["Performance Regression Tests","404 Response Performance"],"fullName":"Performance Regression Tests 404 Response Performance should return 404 for invalid ID format within budget","status":"passed","title":"should return 404 for invalid ID format within budget","duration":1.5521249999999327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","404 Response Performance"],"fullName":"Performance Regression Tests 404 Response Performance should return 404 for non-existent valid ID within budget","status":"passed","title":"should return 404 for non-existent valid ID within budget","duration":0.3305830000001606,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","404 Response Performance"],"fullName":"Performance Regression Tests 404 Response Performance should cache 404 responses for faster subsequent requests","status":"passed","title":"should cache 404 responses for faster subsequent requests","duration":0.3243330000000242,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Search Operation Performance"],"fullName":"Performance Regression Tests Search Operation Performance should complete search within budget","status":"passed","title":"should complete search within budget","duration":0.2414169999999558,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Search Operation Performance"],"fullName":"Performance Regression Tests Search Operation Performance should handle pagination efficiently","status":"passed","title":"should handle pagination efficiently","duration":0.13416699999993398,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Search Operation Performance"],"fullName":"Performance Regression Tests Search Operation Performance should validate parameters quickly","status":"passed","title":"should validate parameters quickly","duration":0.2588749999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","CRUD Operation Performance"],"fullName":"Performance Regression Tests CRUD Operation Performance should get record details within budget","status":"passed","title":"should get record details within budget","duration":0.3187080000000151,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","CRUD Operation Performance"],"fullName":"Performance Regression Tests CRUD Operation Performance should update record within budget","status":"passed","title":"should update record within budget","duration":1.324624999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","CRUD Operation Performance"],"fullName":"Performance Regression Tests CRUD Operation Performance should create record within budget","status":"passed","title":"should create record within budget","duration":838.316041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","CRUD Operation Performance"],"fullName":"Performance Regression Tests CRUD Operation Performance should delete record within budget","status":"passed","title":"should delete record within budget","duration":691.474708,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Performance Statistics"],"fullName":"Performance Regression Tests Performance Statistics should track timing splits correctly","status":"passed","title":"should track timing splits correctly","duration":0.7132920000003651,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Performance Statistics"],"fullName":"Performance Regression Tests Performance Statistics should have acceptable p95 and p99 latencies","status":"passed","title":"should have acceptable p95 and p99 latencies","duration":0.2588749999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["Performance Regression Tests","Performance Alerts"],"fullName":"Performance Regression Tests Performance Alerts should generate alerts for operations exceeding budget","status":"passed","title":"should generate alerts for operations exceeding budget","duration":0.18941700000004857,"failureMessages":[],"meta":{}}],"startTime":1756513008828,"endTime":1756513010363.2588,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/performance/regression.test.ts"},{"assertionResults":[{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Valid Categories"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Valid Categories should validate single valid category string","status":"passed","title":"should validate single valid category string","duration":2.0513750000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Valid Categories"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Valid Categories should validate array of valid categories","status":"passed","title":"should validate array of valid categories","duration":0.35250000000002046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Valid Categories"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Valid Categories should handle case-insensitive validation with canonical casing","status":"passed","title":"should handle case-insensitive validation with canonical casing","duration":0.39108300000000895,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Valid Categories"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Valid Categories should validate all available categories from the valid list","status":"passed","title":"should validate all available categories from the valid list","duration":0.6281659999999931,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Invalid Categories with Fuzzy Matching"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Invalid Categories with Fuzzy Matching should provide fuzzy matching suggestions for close typos","status":"passed","title":"should provide fuzzy matching suggestions for close typos","duration":2.5458329999999876,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Invalid Categories with Fuzzy Matching"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Invalid Categories with Fuzzy Matching should handle multiple character errors with distance-based matching","status":"passed","title":"should handle multiple character errors with distance-based matching","duration":1.1585000000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Invalid Categories with Fuzzy Matching"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Invalid Categories with Fuzzy Matching should provide multiple suggestions when multiple matches are close","status":"passed","title":"should provide multiple suggestions when multiple matches are close","duration":0.25795800000000213,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Invalid Categories with Fuzzy Matching"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Invalid Categories with Fuzzy Matching should handle completely invalid categories gracefully","status":"passed","title":"should handle completely invalid categories gracefully","duration":0.296875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Auto-Conversion Features"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Auto-Conversion Features should auto-convert string to single-element array","status":"passed","title":"should auto-convert string to single-element array","duration":1.0315409999999758,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Auto-Conversion Features"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Auto-Conversion Features should not mark arrays as auto-converted","status":"passed","title":"should not mark arrays as auto-converted","duration":0.17720800000000736,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Auto-Conversion Features"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Auto-Conversion Features should handle mixed case in array elements","status":"passed","title":"should handle mixed case in array elements","duration":0.1417080000000226,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Error Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Error Handling should reject non-string array elements","status":"passed","title":"should reject non-string array elements","duration":0.09054200000002766,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Error Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Error Handling should reject invalid input types","status":"passed","title":"should reject invalid input types","duration":0.13695800000002123,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Error Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Error Handling should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.08124999999998295,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Error Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Error Handling should handle empty strings","status":"passed","title":"should handle empty strings","duration":0.05895799999998985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Duplicate Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Duplicate Handling should remove duplicate suggestions","status":"passed","title":"should remove duplicate suggestions","duration":0.07625000000001592,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","validateCategories() - Core Validation Logic","Duplicate Handling"],"fullName":"Category Validation System (Issues #220/#218) validateCategories() - Core Validation Logic Duplicate Handling should handle duplicate categories in input array","status":"passed","title":"should handle duplicate categories in input array","duration":0.09825000000000728,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","processCategories() - Integration with Field Mapping"],"fullName":"Category Validation System (Issues #220/#218) processCategories() - Integration with Field Mapping should process valid categories for companies","status":"passed","title":"should process valid categories for companies","duration":0.16283300000000622,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","processCategories() - Integration with Field Mapping"],"fullName":"Category Validation System (Issues #220/#218) processCategories() - Integration with Field Mapping should handle invalid categories with helpful error messages","status":"passed","title":"should handle invalid categories with helpful error messages","duration":0.21404200000000628,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","processCategories() - Integration with Field Mapping"],"fullName":"Category Validation System (Issues #220/#218) processCategories() - Integration with Field Mapping should only process categories for companies resource type","status":"passed","title":"should only process categories for companies resource type","duration":0.1074169999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","processCategories() - Integration with Field Mapping"],"fullName":"Category Validation System (Issues #220/#218) processCategories() - Integration with Field Mapping should only process fields named \"categories\"","status":"passed","title":"should only process fields named \"categories\"","duration":0.10016600000000153,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","processCategories() - Integration with Field Mapping"],"fullName":"Category Validation System (Issues #220/#218) processCategories() - Integration with Field Mapping should handle array input with mixed validity","status":"passed","title":"should handle array input with mixed validity","duration":0.1806660000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Integration with Real-World Scenarios"],"fullName":"Category Validation System (Issues #220/#218) Integration with Real-World Scenarios should handle common business category combinations","status":"passed","title":"should handle common business category combinations","duration":0.27904100000000653,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Integration with Real-World Scenarios"],"fullName":"Category Validation System (Issues #220/#218) Integration with Real-World Scenarios should provide helpful guidance for ambiguous terms","status":"passed","title":"should provide helpful guidance for ambiguous terms","duration":0.21800000000001774,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Integration with Real-World Scenarios"],"fullName":"Category Validation System (Issues #220/#218) Integration with Real-World Scenarios should handle typos in common business terms","status":"passed","title":"should handle typos in common business terms","duration":0.5163750000000107,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Performance and Edge Cases"],"fullName":"Category Validation System (Issues #220/#218) Performance and Edge Cases should handle large arrays efficiently","status":"passed","title":"should handle large arrays efficiently","duration":0.10304100000001881,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Performance and Edge Cases"],"fullName":"Category Validation System (Issues #220/#218) Performance and Edge Cases should handle very long category names","status":"passed","title":"should handle very long category names","duration":3.720957999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Category Validation System (Issues #220/#218)","Performance and Edge Cases"],"fullName":"Category Validation System (Issues #220/#218) Performance and Edge Cases should handle special characters in category names","status":"passed","title":"should handle special characters in category names","duration":0.3580419999999833,"failureMessages":[],"meta":{}}],"startTime":1756513014473,"endTime":1756513014489.3582,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/category-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should parse simple string name \"John Doe\" into structured format","status":"passed","title":"should parse simple string name \"John Doe\" into structured format","duration":1.4158329999999637,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle single name \"Madonna\"","status":"passed","title":"should handle single name \"Madonna\"","duration":0.2227919999999699,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle three-part names \"John Middle Doe\"","status":"passed","title":"should handle three-part names \"John Middle Doe\"","duration":0.6928330000000074,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle structured input with first and last name","status":"passed","title":"should handle structured input with first and last name","duration":0.17925000000002456,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should preserve title in structured input","status":"passed","title":"should preserve title in structured input","duration":0.22879199999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle empty string by returning null","status":"passed","title":"should handle empty string by returning null","duration":0.11412500000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle whitespace-only string by returning null","status":"passed","title":"should handle whitespace-only string by returning null","duration":0.1215829999999869,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle null input","status":"passed","title":"should handle null input","duration":0.08020799999997053,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle undefined input","status":"passed","title":"should handle undefined input","duration":0.47783300000003237,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should preserve existing full_name in structured input","status":"passed","title":"should preserve existing full_name in structured input","duration":0.14091700000000174,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle complex names with multiple middle names","status":"passed","title":"should handle complex names with multiple middle names","duration":0.08445799999998371,"failureMessages":[],"meta":{}},{"ancestorTitles":["Personal Name Parser"],"fullName":"Personal Name Parser should handle extra whitespace in names","status":"passed","title":"should handle extra whitespace in names","duration":1.7057079999999587,"failureMessages":[],"meta":{}}],"startTime":1756513017517,"endTime":1756513017522.7058,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/personal-name-parser.test.ts"},{"assertionResults":[{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should cache and retrieve tasks with default TTL","status":"passed","title":"should cache and retrieve tasks with default TTL","duration":1.5189579999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should respect custom TTL","status":"passed","title":"should respect custom TTL","duration":110.11733400000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should generate consistent cache keys","status":"passed","title":"should generate consistent cache keys","duration":0.5457090000000449,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should clear all tasks cache","status":"passed","title":"should clear all tasks cache","duration":0.43304200000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should clear only expired cache entries","status":"passed","title":"should clear only expired cache entries","duration":102.68591699999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Task Caching"],"fullName":"CachingService Task Caching should provide cache statistics","status":"passed","title":"should provide cache statistics","duration":0.4804999999999495,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should check for cached 404 responses","status":"passed","title":"should check for cached 404 responses","duration":0.5119590000000471,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should cache 404 responses with default TTL","status":"passed","title":"should cache 404 responses with default TTL","duration":1.0992500000000405,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","404 Response Caching"],"fullName":"CachingService 404 Response Caching should cache 404 responses with custom TTL","status":"passed","title":"should cache 404 responses with custom TTL","duration":1.4524580000000356,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should load data when cache is empty","status":"passed","title":"should load data when cache is empty","duration":1.1398329999999532,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should return cached data when available","status":"passed","title":"should return cached data when available","duration":0.21924999999998818,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should handle data loader errors gracefully","status":"passed","title":"should handle data loader errors gracefully","duration":0.5299580000000219,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should use custom cache key and TTL","status":"passed","title":"should use custom cache key and TTL","duration":0.25937499999997726,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","getOrLoadTasks Integration"],"fullName":"CachingService getOrLoadTasks Integration should reload data when cache expires","status":"passed","title":"should reload data when cache expires","duration":61.481334000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle empty arrays in cache","status":"passed","title":"should handle empty arrays in cache","duration":0.33962499999995543,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle undefined cache keys gracefully","status":"passed","title":"should handle undefined cache keys gracefully","duration":0.40758399999998574,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Edge Cases"],"fullName":"CachingService Edge Cases should handle concurrent cache operations","status":"passed","title":"should handle concurrent cache operations","duration":0.10425000000003593,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Performance Characteristics"],"fullName":"CachingService Performance Characteristics should handle large datasets efficiently","status":"passed","title":"should handle large datasets efficiently","duration":0.36779200000000856,"failureMessages":[],"meta":{}},{"ancestorTitles":["CachingService","Performance Characteristics"],"fullName":"CachingService Performance Characteristics should maintain performance with multiple cache keys","status":"passed","title":"should maintain performance with multiple cache keys","duration":0.24629199999998264,"failureMessages":[],"meta":{}}],"startTime":1756513011720,"endTime":1756513012005.3677,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/CachingService.test.ts"},{"assertionResults":[{"ancestorTitles":["ErrorService"],"fullName":"ErrorService should classify 4xx as user errors","status":"passed","title":"should classify 4xx as user errors","duration":1.553291999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService"],"fullName":"ErrorService should classify 5xx as system errors","status":"passed","title":"should classify 5xx as system errors","duration":0.2653750000000059,"failureMessages":[],"meta":{}}],"startTime":1756513020572,"endTime":1756513020574.2654,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ErrorService-core.test.ts"},{"assertionResults":[{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError passes through UniversalValidationError unchanged","status":"passed","title":"passes through UniversalValidationError unchanged","duration":1.42674999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError passes through EnhancedApiError unchanged","status":"passed","title":"passes through EnhancedApiError unchanged","duration":0.3621249999999918,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError extracts message from Error objects","status":"passed","title":"extracts message from Error objects","duration":0.5075840000000085,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError extracts message from objects with message property","status":"passed","title":"extracts message from objects with message property","duration":0.21366699999998673,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError handles string errors","status":"passed","title":"handles string errors","duration":0.2243750000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError handles unknown error types","status":"passed","title":"handles unknown error types","duration":0.18470800000000054,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError classifies USER_ERROR for not found messages","status":"passed","title":"classifies USER_ERROR for not found messages","duration":0.11124999999998408,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError defaults to SYSTEM_ERROR for unclassified errors","status":"passed","title":"defaults to SYSTEM_ERROR for unclassified errors","duration":0.09449999999998226,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError includes operation suggestion in error details","status":"passed","title":"includes operation suggestion in error details","duration":0.5327080000000137,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.createUniversalError"],"fullName":"ErrorService.createUniversalError includes original error as cause","status":"passed","title":"includes original error as cause","duration":0.1835420000000454,"failureMessages":[],"meta":{}}],"startTime":1756513018266,"endTime":1756513018270.5327,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ErrorService-create-universal-error.test.ts"},{"assertionResults":[{"ancestorTitles":["ErrorService Edge Cases"],"fullName":"ErrorService Edge Cases handles null and undefined errors gracefully","status":"passed","title":"handles null and undefined errors gracefully","duration":6.604874999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService Edge Cases"],"fullName":"ErrorService Edge Cases handles empty error messages","status":"passed","title":"handles empty error messages","duration":0.9346669999999904,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService Edge Cases"],"fullName":"ErrorService Edge Cases handles malformed error objects","status":"passed","title":"handles malformed error objects","duration":0.3176250000000209,"failureMessages":[],"meta":{}}],"startTime":1756513020172,"endTime":1756513020179.9346,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ErrorService-edge-cases.test.ts"},{"assertionResults":[{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion returns resource type suggestion for invalid resource","status":"passed","title":"returns resource type suggestion for invalid resource","duration":1.2935420000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides date format suggestions","status":"passed","title":"provides date format suggestions","duration":0.26900000000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides date range suggestions","status":"passed","title":"provides date range suggestions","duration":0.19445799999999736,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion suggests simpler filters for unsupported combinations","status":"passed","title":"suggests simpler filters for unsupported combinations","duration":0.13016599999997425,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion suggests batch size limits","status":"passed","title":"suggests batch size limits","duration":0.15358299999999758,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion suggests rate limit handling","status":"passed","title":"suggests rate limit handling","duration":0.11358400000000302,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion suggests field discovery for unknown attributes","status":"passed","title":"suggests field discovery for unknown attributes","duration":0.722834000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides generic not found suggestions","status":"passed","title":"provides generic not found suggestions","duration":0.20366700000002425,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides authentication suggestions for unauthorized errors","status":"passed","title":"provides authentication suggestions for unauthorized errors","duration":0.4906660000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides duplicate record suggestions for create","status":"passed","title":"provides duplicate record suggestions for create","duration":0.18566599999999767,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion provides uniqueness suggestions","status":"passed","title":"provides uniqueness suggestions","duration":0.08412500000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion handles string errors","status":"passed","title":"handles string errors","duration":0.06070799999997689,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion handles object errors with message property","status":"passed","title":"handles object errors with message property","duration":0.05895899999998733,"failureMessages":[],"meta":{}},{"ancestorTitles":["ErrorService.getOperationSuggestion"],"fullName":"ErrorService.getOperationSuggestion returns undefined for unknown patterns","status":"passed","title":"returns undefined for unknown patterns","duration":0.071583999999973,"failureMessages":[],"meta":{}}],"startTime":1756513018367,"endTime":1756513018371.0842,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ErrorService-suggestions.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalCreateService","createRecord"],"fullName":"UniversalCreateService createRecord should create a company record","status":"passed","title":"should create a company record","duration":125.47724999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord"],"fullName":"UniversalCreateService createRecord should create a person record with email validation","status":"passed","title":"should create a person record with email validation","duration":1.4164580000000342,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord"],"fullName":"UniversalCreateService createRecord should create a list record and convert format","status":"passed","title":"should create a list record and convert format","duration":0.8241659999999911,"failureMessages":[],"meta":{}}],"startTime":1756513015616,"endTime":1756513015743.8242,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalCreateService-core-resources.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalCreateService","createRecord - objects/deals/tasks"],"fullName":"UniversalCreateService createRecord - objects/deals/tasks should create a records object record","status":"passed","title":"should create a records object record","duration":131.163834,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - objects/deals/tasks"],"fullName":"UniversalCreateService createRecord - objects/deals/tasks should create a deals record with defaults validation","status":"passed","title":"should create a deals record with defaults validation","duration":0.9322080000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - objects/deals/tasks"],"fullName":"UniversalCreateService createRecord - objects/deals/tasks should create a task record with field transformation","status":"passed","title":"should create a task record with field transformation","duration":0.8139170000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - objects/deals/tasks"],"fullName":"UniversalCreateService createRecord - objects/deals/tasks should handle deals with stage validation failure and retry","status":"passed","title":"should handle deals with stage validation failure and retry","duration":0.4471250000000282,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - objects/deals/tasks"],"fullName":"UniversalCreateService createRecord - objects/deals/tasks should handle task creation with empty content (E2E mode)","status":"passed","title":"should handle task creation with empty content (E2E mode)","duration":0.5064580000000092,"failureMessages":[],"meta":{}}],"startTime":1756513012501,"endTime":1756513012634.5063,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalCreateService-objects-deals-tasks.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle field validation errors","status":"passed","title":"should handle field validation errors","duration":4.66112499999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle field mapping errors","status":"passed","title":"should handle field mapping errors","duration":121.864417,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle enhanced validation when enabled","status":"passed","title":"should handle enhanced validation when enabled","duration":0.7410830000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle company creation with null result","status":"passed","title":"should handle company creation with null result","duration":0.5051659999999742,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle company creation with invalid ID structure","status":"passed","title":"should handle company creation with invalid ID structure","duration":0.35149999999998727,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle attribute not found errors with suggestions","status":"passed","title":"should handle attribute not found errors with suggestions","duration":0.4065830000000119,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle uniqueness constraint errors","status":"passed","title":"should handle uniqueness constraint errors","duration":0.3692090000000121,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle unsupported resource type with correction","status":"passed","title":"should handle unsupported resource type with correction","duration":0.5810829999999783,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle unsupported resource type without correction","status":"passed","title":"should handle unsupported resource type without correction","duration":0.5072910000000093,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle task creation errors with enhanced error handling","status":"passed","title":"should handle task creation errors with enhanced error handling","duration":2.8894579999999905,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalCreateService","createRecord - validation/errors"],"fullName":"UniversalCreateService createRecord - validation/errors should handle field validation warnings and suggestions logging","status":"passed","title":"should handle field validation warnings and suggestions logging","duration":0.39241699999996627,"failureMessages":[],"meta":{}}],"startTime":1756513012515,"endTime":1756513012648.3923,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalCreateService-validation-errors.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a company record","status":"passed","title":"should delete a company record","duration":6.099375000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a person record","status":"passed","title":"should delete a person record","duration":0.23537499999997635,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a list record","status":"passed","title":"should delete a list record","duration":0.2447090000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a records object record","status":"passed","title":"should delete a records object record","duration":0.3299580000000333,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a deals object record","status":"passed","title":"should delete a deals object record","duration":0.26291700000001583,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should delete a task record in normal mode","status":"passed","title":"should delete a task record in normal mode","duration":0.18845900000002302,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should handle task deletion with mock data in E2E mode","status":"passed","title":"should handle task deletion with mock data in E2E mode","duration":0.18412499999999454,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should handle task deletion with mock data when USE_MOCK_DATA is true","status":"passed","title":"should handle task deletion with mock data when USE_MOCK_DATA is true","duration":0.25637499999999136,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should handle task deletion with mock data in test mode","status":"passed","title":"should handle task deletion with mock data in test mode","duration":0.5795830000000137,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should bypass mock data when VITEST is set","status":"passed","title":"should bypass mock data when VITEST is set","duration":0.7035000000000196,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should throw error for invalid task ID in mock mode","status":"passed","title":"should throw error for invalid task ID in mock mode","duration":1.2582089999999653,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should log mock injection in development mode","status":"passed","title":"should log mock injection in development mode","duration":0.363790999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should log mock injection when VERBOSE_TESTS is true","status":"passed","title":"should log mock injection when VERBOSE_TESTS is true","duration":0.15954099999999016,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should throw error for unsupported resource type","status":"passed","title":"should throw error for unsupported resource type","duration":0.13483300000001464,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","deleteRecord"],"fullName":"UniversalDeleteService deleteRecord should propagate errors from underlying delete functions","status":"passed","title":"should propagate errors from underlying delete functions","duration":0.17145900000002712,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Edge Cases"],"fullName":"UniversalDeleteService Edge Cases should handle empty record IDs","status":"passed","title":"should handle empty record IDs","duration":0.0896659999999656,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Edge Cases"],"fullName":"UniversalDeleteService Edge Cases should handle null-like record IDs gracefully","status":"passed","title":"should handle null-like record IDs gracefully","duration":0.07524999999998272,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Edge Cases"],"fullName":"UniversalDeleteService Edge Cases should handle very long record IDs","status":"passed","title":"should handle very long record IDs","duration":0.08437500000002274,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Environment Detection Logic"],"fullName":"UniversalDeleteService Environment Detection Logic should not use mock data in production","status":"passed","title":"should not use mock data in production","duration":0.08087499999999181,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Environment Detection Logic"],"fullName":"UniversalDeleteService Environment Detection Logic should not use mock data when SKIP_INTEGRATION_TESTS is true","status":"passed","title":"should not use mock data when SKIP_INTEGRATION_TESTS is true","duration":0.080208999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalDeleteService","Environment Detection Logic"],"fullName":"UniversalDeleteService Environment Detection Logic should use mock data with complex environment conditions","status":"passed","title":"should use mock data with complex environment conditions","duration":0.23141599999996743,"failureMessages":[],"meta":{}}],"startTime":1756513018425,"endTime":1756513018437.2314,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalDeleteService.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalMetadataService","discoverAttributesForResourceType"],"fullName":"UniversalMetadataService discoverAttributesForResourceType should discover attributes for non-task resource types","status":"passed","title":"should discover attributes for non-task resource types","duration":2.7694170000000042,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributesForResourceType"],"fullName":"UniversalMetadataService discoverAttributesForResourceType should handle task resource type with special discovery","status":"passed","title":"should handle task resource type with special discovery","duration":0.6202499999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributesForResourceType"],"fullName":"UniversalMetadataService discoverAttributesForResourceType should handle API errors gracefully","status":"passed","title":"should handle API errors gracefully","duration":3.78045800000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverTaskAttributes"],"fullName":"UniversalMetadataService discoverTaskAttributes should return task-specific attributes","status":"passed","title":"should return task-specific attributes","duration":0.5725419999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverTaskAttributes"],"fullName":"UniversalMetadataService discoverTaskAttributes should create proper title to api_slug mappings","status":"passed","title":"should create proper title to api_slug mappings","duration":0.3304170000000113,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributesForRecord"],"fullName":"UniversalMetadataService getAttributesForRecord should get attributes for a specific record","status":"passed","title":"should get attributes for a specific record","duration":0.44729200000000446,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributesForRecord"],"fullName":"UniversalMetadataService getAttributesForRecord should handle missing record data","status":"passed","title":"should handle missing record data","duration":0.16229199999997945,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributesForRecord"],"fullName":"UniversalMetadataService getAttributesForRecord should handle API errors","status":"passed","title":"should handle API errors","duration":1.3895410000000084,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","filterAttributesByCategory"],"fullName":"UniversalMetadataService filterAttributesByCategory should return all attributes when no categories specified","status":"passed","title":"should return all attributes when no categories specified","duration":0.4304160000000081,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","filterAttributesByCategory"],"fullName":"UniversalMetadataService filterAttributesByCategory should filter array of attributes by category","status":"passed","title":"should filter array of attributes by category","duration":0.27845800000000054,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","filterAttributesByCategory"],"fullName":"UniversalMetadataService filterAttributesByCategory should filter object with attributes array","status":"passed","title":"should filter object with attributes array","duration":0.18233399999999733,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","filterAttributesByCategory"],"fullName":"UniversalMetadataService filterAttributesByCategory should handle multiple category field names","status":"passed","title":"should handle multiple category field names","duration":0.366958000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributes"],"fullName":"UniversalMetadataService getAttributes should get company attributes with record ID","status":"passed","title":"should get company attributes with record ID","duration":0.28358400000001893,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributes"],"fullName":"UniversalMetadataService getAttributes should discover company attributes without record ID","status":"passed","title":"should discover company attributes without record ID","duration":0.1875,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributes"],"fullName":"UniversalMetadataService getAttributes should get list attributes","status":"passed","title":"should get list attributes","duration":0.11820800000000986,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributes"],"fullName":"UniversalMetadataService getAttributes should apply category filtering","status":"passed","title":"should apply category filtering","duration":0.11429200000000606,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","getAttributes"],"fullName":"UniversalMetadataService getAttributes should throw error for unsupported resource type","status":"passed","title":"should throw error for unsupported resource type","duration":0.19854100000000585,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributes"],"fullName":"UniversalMetadataService discoverAttributes should discover company attributes","status":"passed","title":"should discover company attributes","duration":0.12029099999998039,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributes"],"fullName":"UniversalMetadataService discoverAttributes should discover list attributes","status":"passed","title":"should discover list attributes","duration":0.09299999999998931,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributes"],"fullName":"UniversalMetadataService discoverAttributes should discover task attributes","status":"passed","title":"should discover task attributes","duration":0.18808400000000347,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","discoverAttributes"],"fullName":"UniversalMetadataService discoverAttributes should throw error for unsupported resource type","status":"passed","title":"should throw error for unsupported resource type","duration":0.17491599999999607,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","Integration with other resource types"],"fullName":"UniversalMetadataService Integration with other resource types should handle people resource type for getAttributes","status":"passed","title":"should handle people resource type for getAttributes","duration":0.12049999999999272,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","Integration with other resource types"],"fullName":"UniversalMetadataService Integration with other resource types should handle records resource type for discovery","status":"passed","title":"should handle records resource type for discovery","duration":0.4180419999999856,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalMetadataService","Integration with other resource types"],"fullName":"UniversalMetadataService Integration with other resource types should handle deals resource type","status":"passed","title":"should handle deals resource type","duration":0.20087499999999636,"failureMessages":[],"meta":{}}],"startTime":1756513014427,"endTime":1756513014441.418,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalMetadataService.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a company record","status":"passed","title":"should retrieve a company record","duration":3.44729099999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a person record","status":"passed","title":"should retrieve a person record","duration":0.37858299999993505,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a list record and convert format","status":"passed","title":"should retrieve a list record and convert format","duration":0.40999999999996817,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a records object record","status":"passed","title":"should retrieve a records object record","duration":0.27349999999989905,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a deals object record","status":"passed","title":"should retrieve a deals object record","duration":0.25283300000000963,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should retrieve a task record and convert to AttioRecord","status":"passed","title":"should retrieve a task record and convert to AttioRecord","duration":58.824540999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails"],"fullName":"UniversalRetrievalService getRecordDetails should handle performance tracking correctly","status":"passed","title":"should handle performance tracking correctly","duration":0.7265419999999949,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","recordExists"],"fullName":"UniversalRetrievalService recordExists should return true when record exists","status":"passed","title":"should return true when record exists","duration":0.4185829999998987,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","recordExists"],"fullName":"UniversalRetrievalService recordExists should return false when record is cached as 404","status":"passed","title":"should return false when record is cached as 404","duration":0.5731660000000147,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","recordExists"],"fullName":"UniversalRetrievalService recordExists should return false when record throws not found error","status":"passed","title":"should return false when record throws not found error","duration":0.3964580000000524,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getMultipleRecords"],"fullName":"UniversalRetrievalService getMultipleRecords should retrieve multiple records successfully","status":"passed","title":"should retrieve multiple records successfully","duration":0.40554099999997106,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getMultipleRecords"],"fullName":"UniversalRetrievalService getMultipleRecords should handle mixed success and failure results","status":"passed","title":"should handle mixed success and failure results","duration":0.3904160000000729,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getMultipleRecords"],"fullName":"UniversalRetrievalService getMultipleRecords should apply field filtering to multiple records","status":"passed","title":"should apply field filtering to multiple records","duration":0.20858300000008967,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordWithMetrics"],"fullName":"UniversalRetrievalService getRecordWithMetrics should return record with performance metrics","status":"passed","title":"should return record with performance metrics","duration":0.35179199999993216,"failureMessages":[],"meta":{}}],"startTime":1756513006706,"endTime":1756513006773.3518,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalRetrievalService-core-operations.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalRetrievalService","Field filtering"],"fullName":"UniversalRetrievalService Field filtering should filter non-AttioRecord objects correctly","status":"passed","title":"should filter non-AttioRecord objects correctly","duration":2.4114999999999895,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","Field filtering"],"fullName":"UniversalRetrievalService Field filtering should return full data when no fields specified","status":"passed","title":"should return full data when no fields specified","duration":0.6494169999999713,"failureMessages":[],"meta":{}}],"startTime":1756513018386,"endTime":1756513018388.6494,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalRetrievalService-search-filter.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalRetrievalService","getRecordDetails - error cases"],"fullName":"UniversalRetrievalService getRecordDetails - error cases should throw error for unsupported resource type","status":"passed","title":"should throw error for unsupported resource type","duration":1.8109580000000278,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails - error cases"],"fullName":"UniversalRetrievalService getRecordDetails - error cases should handle cached 404 responses","status":"passed","title":"should handle cached 404 responses","duration":1.1829999999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails - error cases"],"fullName":"UniversalRetrievalService getRecordDetails - error cases should handle 404 errors and cache them","status":"passed","title":"should handle 404 errors and cache them","duration":0.42570900000009715,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","getRecordDetails - error cases"],"fullName":"UniversalRetrievalService getRecordDetails - error cases should handle task retrieval errors and cache 404s","status":"passed","title":"should handle task retrieval errors and cache 404s","duration":1.8564170000001923,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","Auth Error Handling"],"fullName":"UniversalRetrievalService Auth Error Handling should re-throw auth errors without caching","status":"passed","title":"should re-throw auth errors without caching","duration":0.7105000000001382,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","Rate Limit Error Handling"],"fullName":"UniversalRetrievalService Rate Limit Error Handling should re-throw rate limit errors without caching","status":"passed","title":"should re-throw rate limit errors without caching","duration":0.3779580000000351,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","Legitimate 404 Error Handling"],"fullName":"UniversalRetrievalService Legitimate 404 Error Handling should cache legitimate 404 errors and convert to structured response","status":"passed","title":"should cache legitimate 404 errors and convert to structured response","duration":0.4290000000000873,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalRetrievalService","Non-HTTP Error Handling"],"fullName":"UniversalRetrievalService Non-HTTP Error Handling should handle TypeError exceptions without masking as 404","status":"passed","title":"should handle TypeError exceptions without masking as 404","duration":0.19745799999986957,"failureMessages":[],"meta":{}}],"startTime":1756513007159,"endTime":1756513007166.1975,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalRetrievalService-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalSearchService","searchRecords"],"fullName":"UniversalSearchService searchRecords should search companies with query","status":"passed","title":"should search companies with query","duration":5.594250000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalSearchService","searchRecords"],"fullName":"UniversalSearchService searchRecords should search companies with filters","status":"passed","title":"should search companies with filters","duration":0.6547499999999786,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalSearchService","searchRecords"],"fullName":"UniversalSearchService searchRecords should search people by name","status":"passed","title":"should search people by name","duration":0.7871250000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalSearchService","searchRecords"],"fullName":"UniversalSearchService searchRecords should search lists by title","status":"passed","title":"should search lists by title","duration":1.1308750000000032,"failureMessages":[],"meta":{}}],"startTime":1756513019464,"endTime":1756513019472.1309,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalSearchService-companies-people-lists.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalSearchService - records/tasks"],"fullName":"UniversalSearchService - records/tasks should list object records","status":"passed","title":"should list object records","duration":3.0283340000000862,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalSearchService - records/tasks"],"fullName":"UniversalSearchService - records/tasks should list tasks and convert to records","status":"passed","title":"should list tasks and convert to records","duration":0.7940830000000005,"failureMessages":[],"meta":{}}],"startTime":1756513017761,"endTime":1756513017765.7942,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalSearchService-records-tasks.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a company record","status":"passed","title":"should update a company record","duration":13.703708000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a person record with email validation","status":"passed","title":"should update a person record with email validation","duration":4.487833000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a list record and convert format","status":"passed","title":"should update a list record and convert format","duration":1.7508750000000077,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a records object record","status":"passed","title":"should update a records object record","duration":4.378125000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a deals record with defaults validation","status":"passed","title":"should update a deals record with defaults validation","duration":7.511000000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","updateRecord"],"fullName":"UniversalUpdateService updateRecord should update a task record with field transformation (excluding immutable content)","status":"passed","title":"should update a task record with field transformation (excluding immutable content)","duration":2.5137909999999692,"failureMessages":[],"meta":{}}],"startTime":1756513013535,"endTime":1756513013569.5137,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalUpdateService-core-operations.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalUpdateService","Field validation & suggestions"],"fullName":"UniversalUpdateService Field validation & suggestions should log warnings and suggestions when present","status":"passed","title":"should log warnings and suggestions when present","duration":6.565208999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Field validation & suggestions"],"fullName":"UniversalUpdateService Field validation & suggestions should handle field mapping errors","status":"passed","title":"should handle field mapping errors","duration":0.9462090000000103,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Field validation & suggestions"],"fullName":"UniversalUpdateService Field validation & suggestions should handle enhanced validation when enabled","status":"passed","title":"should handle enhanced validation when enabled","duration":0.3966670000000363,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Field validation & suggestions"],"fullName":"UniversalUpdateService Field validation & suggestions should handle attribute not found errors with suggestions","status":"passed","title":"should handle attribute not found errors with suggestions","duration":0.37820799999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Task-specific validation"],"fullName":"UniversalUpdateService Task-specific validation should transform is_completed to status","status":"passed","title":"should transform is_completed to status","duration":1.839584000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Task-specific validation"],"fullName":"UniversalUpdateService Task-specific validation should transform assignees to assigneeId","status":"passed","title":"should transform assignees to assigneeId","duration":0.6949170000000322,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Task-specific validation"],"fullName":"UniversalUpdateService Task-specific validation should transform deadline_at to dueDate","status":"passed","title":"should transform deadline_at to dueDate","duration":0.5269590000000335,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Task-specific validation"],"fullName":"UniversalUpdateService Task-specific validation should transform linked_records array to recordIds","status":"passed","title":"should transform linked_records array to recordIds","duration":0.501166000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Mock data handling & existence checks"],"fullName":"UniversalUpdateService Mock data handling & existence checks should use mock data in E2E mode","status":"passed","title":"should use mock data in E2E mode","duration":0.7312089999999785,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Mock data handling & existence checks"],"fullName":"UniversalUpdateService Mock data handling & existence checks should convert task to record in normal mode","status":"passed","title":"should convert task to record in normal mode","duration":0.4124170000000049,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Mock data handling & existence checks"],"fullName":"UniversalUpdateService Mock data handling & existence checks should return 404 when task not found","status":"passed","title":"should return 404 when task not found","duration":0.5228339999999889,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Mock data handling & existence checks"],"fullName":"UniversalUpdateService Mock data handling & existence checks should return 404 when task existence check fails with generic error","status":"passed","title":"should return 404 when task existence check fails with generic error","duration":0.2217499999999859,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Mock data handling & existence checks"],"fullName":"UniversalUpdateService Mock data handling & existence checks should validate immutability for existing task content updates","status":"passed","title":"should validate immutability for existing task content updates","duration":0.5005419999999958,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Resource Type Edge Cases"],"fullName":"UniversalUpdateService Resource Type Edge Cases should handle unsupported resource types gracefully","status":"passed","title":"should handle unsupported resource types gracefully","duration":0.12995899999998528,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUpdateService","Resource Type Edge Cases"],"fullName":"UniversalUpdateService Resource Type Edge Cases should handle empty record data","status":"passed","title":"should handle empty record data","duration":0.3078750000000241,"failureMessages":[],"meta":{}}],"startTime":1756513013764,"endTime":1756513013779.3079,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalUpdateService-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should convert task with task_id structure","status":"passed","title":"should convert task with task_id structure","duration":2.791208000000097,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should convert task with id structure","status":"passed","title":"should convert task with id structure","duration":0.8306250000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should convert task with string ID","status":"passed","title":"should convert task with string ID","duration":1.5418750000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should handle task with empty workspace_id","status":"passed","title":"should handle task with empty workspace_id","duration":0.4967910000000302,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should throw error for unrecognized ID structure","status":"passed","title":"should throw error for unrecognized ID structure","duration":1.610541000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","convertTaskToRecord"],"fullName":"UniversalUtilityService convertTaskToRecord should handle missing id in task","status":"passed","title":"should handle missing id in task","duration":0.46670800000003965,"failureMessages":[],"meta":{}}],"startTime":1756513016372,"endTime":1756513016380.4668,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalUtilityService-conversion.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Basic Extraction"],"fullName":"UniversalUtilityService extractDisplayName Basic Extraction should extract name from various fields","status":"passed","title":"should extract name from various fields","duration":2.6768330000000446,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Basic Extraction"],"fullName":"UniversalUtilityService extractDisplayName Basic Extraction should return \"Unnamed\" when all fields are null/undefined","status":"passed","title":"should return \"Unnamed\" when all fields are null/undefined","duration":0.20816600000000562,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Basic Extraction"],"fullName":"UniversalUtilityService extractDisplayName Basic Extraction should return \"Unnamed\" when field values are empty strings","status":"passed","title":"should return \"Unnamed\" when field values are empty strings","duration":0.24733299999996916,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Basic Extraction"],"fullName":"UniversalUtilityService extractDisplayName Basic Extraction should handle mixed data types gracefully","status":"passed","title":"should handle mixed data types gracefully","duration":0.22175000000004275,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Real-world Data Patterns"],"fullName":"UniversalUtilityService extractDisplayName Real-world Data Patterns should handle task records correctly (Issue #472 regression test)","status":"passed","title":"should handle task records correctly (Issue #472 regression test)","duration":0.18941699999999173,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Real-world Data Patterns"],"fullName":"UniversalUtilityService extractDisplayName Real-world Data Patterns should handle company records correctly","status":"passed","title":"should handle company records correctly","duration":0.13508300000000872,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Real-world Data Patterns"],"fullName":"UniversalUtilityService extractDisplayName Real-world Data Patterns should handle person records with full_name correctly","status":"passed","title":"should handle person records with full_name correctly","duration":0.653583000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Real-world Data Patterns"],"fullName":"UniversalUtilityService extractDisplayName Real-world Data Patterns should handle records with only title (like documents)","status":"passed","title":"should handle records with only title (like documents)","duration":0.332917000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Real-world Data Patterns"],"fullName":"UniversalUtilityService extractDisplayName Real-world Data Patterns should trim whitespace from extracted values","status":"passed","title":"should trim whitespace from extracted values","duration":0.8632090000000403,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Backward Compatibility"],"fullName":"UniversalUtilityService extractDisplayName Backward Compatibility should work with Record<string, unknown> type (legacy usage)","status":"passed","title":"should work with Record<string, unknown> type (legacy usage)","duration":0.3824999999999932,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","extractDisplayName","Backward Compatibility"],"fullName":"UniversalUtilityService extractDisplayName Backward Compatibility should handle arrays with multiple items (uses first item only)","status":"passed","title":"should handle arrays with multiple items (uses first item only)","duration":0.13116700000000492,"failureMessages":[],"meta":{}}],"startTime":1756513020113,"endTime":1756513020120.131,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalUtilityService-display-name.test.ts"},{"assertionResults":[{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format companies resource type","status":"passed","title":"should format companies resource type","duration":1.1045419999999808,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format people resource type","status":"passed","title":"should format people resource type","duration":0.1376250000000141,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format lists resource type","status":"passed","title":"should format lists resource type","duration":0.10291700000001924,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format records resource type","status":"passed","title":"should format records resource type","duration":0.14154199999998696,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format deals resource type","status":"passed","title":"should format deals resource type","duration":0.154042000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should format tasks resource type","status":"passed","title":"should format tasks resource type","duration":0.09966700000001083,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","formatResourceType"],"fullName":"UniversalUtilityService formatResourceType should return unknown resource type as-is","status":"passed","title":"should return unknown resource type as-is","duration":0.08150000000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","getSingularResourceType"],"fullName":"UniversalUtilityService getSingularResourceType should return singular form for all resource types","status":"passed","title":"should return singular form for all resource types","duration":0.2295000000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","isValidResourceType"],"fullName":"UniversalUtilityService isValidResourceType should validate known resource types","status":"passed","title":"should validate known resource types","duration":0.540916999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","isValidResourceType"],"fullName":"UniversalUtilityService isValidResourceType should reject unknown resource types","status":"passed","title":"should reject unknown resource types","duration":0.5753750000000082,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","getPluralResourceType"],"fullName":"UniversalUtilityService getPluralResourceType should return plural form for all resource types","status":"passed","title":"should return plural form for all resource types","duration":0.610874999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","supportsObjectRecordsApi"],"fullName":"UniversalUtilityService supportsObjectRecordsApi should return true for resource types that support object records API","status":"passed","title":"should return true for resource types that support object records API","duration":0.24733299999999758,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","supportsObjectRecordsApi"],"fullName":"UniversalUtilityService supportsObjectRecordsApi should return false for tasks (uses different API)","status":"passed","title":"should return false for tasks (uses different API)","duration":0.2307079999999928,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","getApiEndpoint"],"fullName":"UniversalUtilityService getApiEndpoint should return correct API endpoints for all resource types","status":"passed","title":"should return correct API endpoints for all resource types","duration":0.20224999999999227,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","getApiEndpoint"],"fullName":"UniversalUtilityService getApiEndpoint should throw error for unknown resource type","status":"passed","title":"should throw error for unknown resource type","duration":0.5132909999999811,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","requiresSpecialHandling"],"fullName":"UniversalUtilityService requiresSpecialHandling should return true for resource types that require special handling","status":"passed","title":"should return true for resource types that require special handling","duration":0.13425000000000864,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","requiresSpecialHandling"],"fullName":"UniversalUtilityService requiresSpecialHandling should return false for standard resource types","status":"passed","title":"should return false for standard resource types","duration":0.08816600000000108,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","normalizeResourceType"],"fullName":"UniversalUtilityService normalizeResourceType should normalize singular forms to plural UniversalResourceType","status":"passed","title":"should normalize singular forms to plural UniversalResourceType","duration":0.12983300000001918,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","normalizeResourceType"],"fullName":"UniversalUtilityService normalizeResourceType should normalize plural forms to UniversalResourceType","status":"passed","title":"should normalize plural forms to UniversalResourceType","duration":0.15170799999998508,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","normalizeResourceType"],"fullName":"UniversalUtilityService normalizeResourceType should handle case variations and whitespace","status":"passed","title":"should handle case variations and whitespace","duration":0.07441700000001106,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","normalizeResourceType"],"fullName":"UniversalUtilityService normalizeResourceType should return existing valid UniversalResourceType","status":"passed","title":"should return existing valid UniversalResourceType","duration":0.061917000000022426,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","normalizeResourceType"],"fullName":"UniversalUtilityService normalizeResourceType should return null for unknown resource types","status":"passed","title":"should return null for unknown resource types","duration":0.07108400000001325,"failureMessages":[],"meta":{}},{"ancestorTitles":["UniversalUtilityService","getResourceTypeDescription"],"fullName":"UniversalUtilityService getResourceTypeDescription should return appropriate descriptions for all resource types","status":"passed","title":"should return appropriate descriptions for all resource types","duration":0.11191599999997948,"failureMessages":[],"meta":{}}],"startTime":1756513013149,"endTime":1756513013155.1516,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/UniversalUtilityService-resource-types.test.ts"},{"assertionResults":[{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should pass for valid field validation","status":"passed","title":"should pass for valid field validation","duration":1.3263340000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should return error message for invalid validation when not throwing","status":"passed","title":"should return error message for invalid validation when not throwing","duration":0.44974999999999454,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should throw UniversalValidationError for invalid validation when throwing enabled","status":"passed","title":"should throw UniversalValidationError for invalid validation when throwing enabled","duration":0.5349170000000072,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateFieldsWithErrorHandling"],"fullName":"ValidationService validateFieldsWithErrorHandling should truncate suggestions in error message","status":"passed","title":"should truncate suggestions in error message","duration":0.21774999999999523,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should validate complex email structures and throw on invalid formats","status":"passed","title":"should validate complex email structures and throw on invalid formats","duration":1.0689160000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateEmailAddresses"],"fullName":"ValidationService validateEmailAddresses should handle null or undefined record data","status":"passed","title":"should handle null or undefined record data","duration":0.1978340000000003,"failureMessages":[],"meta":{}}],"startTime":1756513018284,"endTime":1756513018288.1978,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ValidationService-fields-and-emails.test.ts"},{"assertionResults":[{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should pass for valid limit values","status":"passed","title":"should pass for valid limit values","duration":1.4923749999999814,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should pass for undefined limit","status":"passed","title":"should pass for undefined limit","duration":0.1910000000000025,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for non-integer limit","status":"passed","title":"should throw for non-integer limit","duration":0.2658749999999941,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for zero or negative limit","status":"passed","title":"should throw for zero or negative limit","duration":0.23449999999999704,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should throw for limit exceeding maximum","status":"passed","title":"should throw for limit exceeding maximum","duration":0.16770800000000463,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should respect custom maximum limit","status":"passed","title":"should respect custom maximum limit","duration":0.2687919999999906,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateLimitParameter"],"fullName":"ValidationService validateLimitParameter should call performance tracker on error when perfId provided","status":"passed","title":"should call performance tracker on error when perfId provided","duration":1.4121250000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should pass for valid offset values","status":"passed","title":"should pass for valid offset values","duration":0.2596249999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should pass for undefined offset","status":"passed","title":"should pass for undefined offset","duration":0.5449590000000057,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for non-integer offset","status":"passed","title":"should throw for non-integer offset","duration":0.5458749999999952,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for negative offset","status":"passed","title":"should throw for negative offset","duration":0.6190840000000151,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should throw for offset exceeding maximum","status":"passed","title":"should throw for offset exceeding maximum","duration":0.11358300000000554,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateOffsetParameter"],"fullName":"ValidationService validateOffsetParameter should respect custom maximum offset","status":"passed","title":"should respect custom maximum offset","duration":0.13554200000001515,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should validate both limit and offset together","status":"passed","title":"should validate both limit and offset together","duration":0.10483299999998508,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should throw if either parameter is invalid","status":"passed","title":"should throw if either parameter is invalid","duration":0.1220000000000141,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validatePaginationParameters"],"fullName":"ValidationService validatePaginationParameters should pass for empty parameters","status":"passed","title":"should pass for empty parameters","duration":0.6492080000000158,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should create validation error with default resource type","status":"passed","title":"should create validation error with default resource type","duration":0.8999159999999904,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should create validation error with custom resource type","status":"passed","title":"should create validation error with custom resource type","duration":0.23920900000001666,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","createValidationError"],"fullName":"ValidationService createValidationError should include valid ISO timestamp","status":"passed","title":"should include valid ISO timestamp","duration":0.14479199999999537,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should return suggestions unchanged when under limit","status":"passed","title":"should return suggestions unchanged when under limit","duration":0.2565840000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should truncate suggestions when over default limit","status":"passed","title":"should truncate suggestions when over default limit","duration":0.702541999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","truncateSuggestions"],"fullName":"ValidationService truncateSuggestions should respect custom max count","status":"passed","title":"should respect custom max count","duration":0.11979199999998968,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUniversalOperation"],"fullName":"ValidationService validateUniversalOperation should return valid for successful validation","status":"passed","title":"should return valid for successful validation","duration":0.30245800000000145,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should handle empty strings gracefully","status":"passed","title":"should handle empty strings gracefully","duration":0.12583300000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should handle very large suggestion arrays efficiently","status":"passed","title":"should handle very large suggestion arrays efficiently","duration":0.5473340000000064,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","Edge Cases and Error Handling"],"fullName":"ValidationService Edge Cases and Error Handling should preserve original arrays when truncating","status":"passed","title":"should preserve original arrays when truncating","duration":0.18533399999998323,"failureMessages":[],"meta":{}}],"startTime":1756513012874,"endTime":1756513012885.1853,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ValidationService-parameters.test.ts"},{"assertionResults":[{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should pass for valid UUIDs in non-task resources","status":"passed","title":"should pass for valid UUIDs in non-task resources","duration":2.4209999999999923,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should skip validation for tasks resource","status":"passed","title":"should skip validation for tasks resource","duration":0.24887499999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","validateUUID"],"fullName":"ValidationService validateUUID should throw for invalid UUIDs in non-task resources","status":"passed","title":"should throw for invalid UUIDs in non-task resources","duration":0.23404099999999062,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should return true for valid UUIDs","status":"passed","title":"should return true for valid UUIDs","duration":0.2131249999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should fallback to generic ID validation when UUID fails","status":"passed","title":"should fallback to generic ID validation when UUID fails","duration":0.20416700000004084,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should return false when both validations fail","status":"passed","title":"should return false when both validations fail","duration":0.11762500000003229,"failureMessages":[],"meta":{}},{"ancestorTitles":["ValidationService","isValidRecordId"],"fullName":"ValidationService isValidRecordId should skip generic validation when allowGeneric is false","status":"passed","title":"should skip generic validation when allowGeneric is false","duration":0.18799999999998818,"failureMessages":[],"meta":{}}],"startTime":1756513019820,"endTime":1756513019824.204,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/ValidationService-uuid-and-id.test.ts"},{"assertionResults":[{"ancestorTitles":["Content Search Functionality","UniversalSearchService.searchRecords"],"fullName":"Content Search Functionality UniversalSearchService.searchRecords should default to basic search when search_type is not specified","status":"passed","title":"should default to basic search when search_type is not specified","duration":8.34866599999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","UniversalSearchService.searchRecords"],"fullName":"Content Search Functionality UniversalSearchService.searchRecords should use content search when search_type is CONTENT","status":"passed","title":"should use content search when search_type is CONTENT","duration":1.2635419999999158,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","UniversalSearchService.searchRecords"],"fullName":"Content Search Functionality UniversalSearchService.searchRecords should use custom fields when specified","status":"passed","title":"should use custom fields when specified","duration":0.553957999999966,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","UniversalSearchService.searchRecords"],"fullName":"Content Search Functionality UniversalSearchService.searchRecords should use exact match when match_type is EXACT","status":"passed","title":"should use exact match when match_type is EXACT","duration":0.41766599999994014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","UniversalSearchService.searchRecords"],"fullName":"Content Search Functionality UniversalSearchService.searchRecords should apply relevance ranking when sort is RELEVANCE","status":"passed","title":"should apply relevance ranking when sort is RELEVANCE","duration":0.7514579999999569,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Content Search for People"],"fullName":"Content Search Functionality Content Search for People should search across default people fields","status":"passed","title":"should search across default people fields","duration":0.6411249999999882,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Content Search for People"],"fullName":"Content Search Functionality Content Search for People should handle people search with custom fields","status":"passed","title":"should handle people search with custom fields","duration":0.28016700000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Relevance Ranking Algorithm"],"fullName":"Content Search Functionality Relevance Ranking Algorithm should rank exact matches highest","status":"passed","title":"should rank exact matches highest","duration":0.33291699999995217,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Relevance Ranking Algorithm"],"fullName":"Content Search Functionality Relevance Ranking Algorithm should rank by number of occurrences","status":"passed","title":"should rank by number of occurrences","duration":0.4637079999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Relevance Ranking Algorithm"],"fullName":"Content Search Functionality Relevance Ranking Algorithm should handle partial word matches","status":"passed","title":"should handle partial word matches","duration":2.227290999999923,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Edge Cases"],"fullName":"Content Search Functionality Edge Cases should handle empty query gracefully","status":"passed","title":"should handle empty query gracefully","duration":0.30920800000001236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Edge Cases"],"fullName":"Content Search Functionality Edge Cases should handle null/undefined fields gracefully","status":"passed","title":"should handle null/undefined fields gracefully","duration":0.23700000000008004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Edge Cases"],"fullName":"Content Search Functionality Edge Cases should handle special characters in search query","status":"passed","title":"should handle special characters in search query","duration":0.21841700000004494,"failureMessages":[],"meta":{}},{"ancestorTitles":["Content Search Functionality","Pagination with Content Search"],"fullName":"Content Search Functionality Pagination with Content Search should pass pagination parameters correctly","status":"passed","title":"should pass pagination parameters correctly","duration":0.36304200000006404,"failureMessages":[],"meta":{}}],"startTime":1756513017547,"endTime":1756513017564.363,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/services/content-search.test.ts"},{"assertionResults":[{"ancestorTitles":["Activity and Historical filtering","createDateRangeFilter"],"fullName":"Activity and Historical filtering createDateRangeFilter should create a filter with start date only","status":"passed","title":"should create a filter with start date only","duration":5.9793750000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createDateRangeFilter"],"fullName":"Activity and Historical filtering createDateRangeFilter should create a filter with end date only","status":"passed","title":"should create a filter with end date only","duration":0.36725000000001273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createDateRangeFilter"],"fullName":"Activity and Historical filtering createDateRangeFilter should create a filter with both start and end dates","status":"passed","title":"should create a filter with both start and end dates","duration":0.6776659999999879,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createCreatedDateFilter"],"fullName":"Activity and Historical filtering createCreatedDateFilter should create a filter for record creation date","status":"passed","title":"should create a filter for record creation date","duration":0.23337500000002365,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createModifiedDateFilter"],"fullName":"Activity and Historical filtering createModifiedDateFilter should create a filter for record modification date","status":"passed","title":"should create a filter for record modification date","duration":0.2987499999999841,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createLastInteractionFilter"],"fullName":"Activity and Historical filtering createLastInteractionFilter should create a filter for last interaction date","status":"passed","title":"should create a filter for last interaction date","duration":0.3710829999999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createLastInteractionFilter"],"fullName":"Activity and Historical filtering createLastInteractionFilter should include interaction type when specified","status":"passed","title":"should include interaction type when specified","duration":0.26058300000005374,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createLastInteractionFilter"],"fullName":"Activity and Historical filtering createLastInteractionFilter should not include interaction type when ANY is specified","status":"passed","title":"should not include interaction type when ANY is specified","duration":0.16508400000003576,"failureMessages":[],"meta":{}},{"ancestorTitles":["Activity and Historical filtering","createActivityFilter"],"fullName":"Activity and Historical filtering createActivityFilter should create a filter for activity","status":"passed","title":"should create a filter for activity","duration":1.024249999999995,"failureMessages":[],"meta":{}}],"startTime":1756513018969,"endTime":1756513018979.0242,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/activity-filters.test.ts"},{"assertionResults":[{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should return mapped slug for known attributes","status":"passed","title":"should return mapped slug for known attributes","duration":1.7949159999999722,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should return original attribute name if no mapping exists","status":"passed","title":"should return original attribute name if no mapping exists","duration":1.661875000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should handle object-specific mappings","status":"passed","title":"should handle object-specific mappings","duration":0.3579160000000172,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should NOT fall into infinite recursion when handling special cases","status":"passed","title":"should NOT fall into infinite recursion when handling special cases","duration":0.7207909999999913,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should handle snake case conversion without infinite recursion","status":"passed","title":"should handle snake case conversion without infinite recursion","duration":0.7055419999999799,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mappers","getAttributeSlug"],"fullName":"Attribute Mappers getAttributeSlug should handle edge cases in snake case conversion","status":"passed","title":"should handle edge cases in snake case conversion","duration":0.323332999999991,"failureMessages":[],"meta":{}}],"startTime":1756513017861,"endTime":1756513017866.3232,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/attribute-mappers.test.ts"},{"assertionResults":[{"ancestorTitles":["Enhanced Attribute Mapping","Special Case Handling"],"fullName":"Enhanced Attribute Mapping Special Case Handling should correctly map B2B Segment special cases","status":"passed","title":"should correctly map B2B Segment special cases","duration":1.4243749999999977,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Special Case Handling"],"fullName":"Enhanced Attribute Mapping Special Case Handling should handle special cases with different character cases","status":"passed","title":"should handle special cases with different character cases","duration":0.3458339999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Special Case Handling"],"fullName":"Enhanced Attribute Mapping Special Case Handling should handle special cases with different spacing and formats","status":"passed","title":"should handle special cases with different spacing and formats","duration":4.441833000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should first check for special cases","status":"passed","title":"should first check for special cases","duration":0.9678339999999821,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should use case-insensitive lookup after special cases","status":"passed","title":"should use case-insensitive lookup after special cases","duration":0.30162500000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should use normalized lookup when case-insensitive fails","status":"passed","title":"should use normalized lookup when case-insensitive fails","duration":0.26795799999999304,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should use aggressive normalization as a last resort","status":"passed","title":"should use aggressive normalization as a last resort","duration":0.39808300000001395,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should handle snake case conversion","status":"passed","title":"should handle snake case conversion","duration":0.26650000000000773,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Tiered Matching Approach"],"fullName":"Enhanced Attribute Mapping Tiered Matching Approach should map postal code fields without converting to zip","status":"passed","title":"should map postal code fields without converting to zip","duration":0.41354100000000926,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Attribute Mapping","Object-Specific Mappings"],"fullName":"Enhanced Attribute Mapping Object-Specific Mappings should prioritize object-specific mappings over common mappings","status":"passed","title":"should prioritize object-specific mappings over common mappings","duration":0.7829580000000078,"failureMessages":[],"meta":{}}],"startTime":1756513014179,"endTime":1756513014188.783,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/attribute-mapping-enhancement.test.ts"},{"assertionResults":[{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should return the matching slug from config","status":"passed","title":"should return the matching slug from config","duration":2.0114580000000046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should handle case-insensitive matching","status":"passed","title":"should handle case-insensitive matching","duration":0.42829100000000153,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should fall back to legacy map if not found in config","status":"passed","title":"should fall back to legacy map if not found in config","duration":0.2328329999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should return the original input if no mapping found","status":"passed","title":"should return the original input if no mapping found","duration":0.518999999999977,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should handle null or undefined input","status":"passed","title":"should handle null or undefined input","duration":0.2787500000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should map industry to categories via special case handling","status":"passed","title":"should map industry to categories via special case handling","duration":0.27645899999998846,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getAttributeSlug"],"fullName":"Attribute Mapping getAttributeSlug should prioritize object-specific mappings over common mappings","status":"passed","title":"should prioritize object-specific mappings over common mappings","duration":0.7176659999999799,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getObjectSlug"],"fullName":"Attribute Mapping getObjectSlug should return the matching object slug from config","status":"passed","title":"should return the matching object slug from config","duration":0.514125000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getObjectSlug"],"fullName":"Attribute Mapping getObjectSlug should handle case-insensitive matching for objects","status":"passed","title":"should handle case-insensitive matching for objects","duration":0.6741250000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getObjectSlug"],"fullName":"Attribute Mapping getObjectSlug should normalize unknown object names","status":"passed","title":"should normalize unknown object names","duration":0.1652909999999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getListSlug"],"fullName":"Attribute Mapping getListSlug should return the matching list slug from config","status":"passed","title":"should return the matching list slug from config","duration":0.16650000000001342,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","getListSlug"],"fullName":"Attribute Mapping getListSlug should return the original input for unknown lists","status":"passed","title":"should return the original input for unknown lists","duration":0.10770899999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should translate attribute names in a simple filter","status":"passed","title":"should translate attribute names in a simple filter","duration":0.18295899999998255,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should use object context for translations","status":"passed","title":"should use object context for translations","duration":0.12266700000000696,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should handle nested filter structures","status":"passed","title":"should handle nested filter structures","duration":0.38804199999998445,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should respect object-specific context in nested filters","status":"passed","title":"should respect object-specific context in nested filters","duration":0.6009999999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should handle null or undefined filters","status":"passed","title":"should handle null or undefined filters","duration":0.16629199999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Mapping","translateAttributeNamesInFilters"],"fullName":"Attribute Mapping translateAttributeNamesInFilters should process deeply nested object structures","status":"passed","title":"should process deeply nested object structures","duration":0.7275419999999997,"failureMessages":[],"meta":{}}],"startTime":1756513013705,"endTime":1756513013716.7275,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/attribute-mapping.test.ts"},{"assertionResults":[{"ancestorTitles":["formatAllAttributes - null value handling"],"fullName":"formatAllAttributes - null value handling should preserve null values in formatted output","status":"passed","title":"should preserve null values in formatted output","duration":4.657375000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatAllAttributes - null value handling"],"fullName":"formatAllAttributes - null value handling should handle mixed null, undefined, and regular values","status":"passed","title":"should handle mixed null, undefined, and regular values","duration":1.037666999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["formatAllAttributes - null value handling"],"fullName":"formatAllAttributes - null value handling should handle objects with only null values","status":"passed","title":"should handle objects with only null values","duration":2.5195829999999546,"failureMessages":[],"meta":{}},{"ancestorTitles":["updateCompanyAttribute - Issue #97 fix"],"fullName":"updateCompanyAttribute - Issue #97 fix should successfully update attribute to null without error","status":"passed","title":"should successfully update attribute to null without error","duration":0.16237499999999727,"failureMessages":[],"meta":{}}],"startTime":1756513019530,"endTime":1756513019538.5195,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/attribute-null-value.test.ts"},{"assertionResults":[{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should accept valid batch sizes","status":"passed","title":"should accept valid batch sizes","duration":1.272375000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should reject batch sizes exceeding the limit","status":"passed","title":"should reject batch sizes exceeding the limit","duration":0.3257499999999709,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should apply stricter limits for delete operations","status":"passed","title":"should apply stricter limits for delete operations","duration":0.12670800000000781,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should apply stricter limits for search operations","status":"passed","title":"should apply stricter limits for search operations","duration":0.15795800000000781,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should reject null or undefined items","status":"passed","title":"should reject null or undefined items","duration":0.1616669999999658,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should reject empty arrays","status":"passed","title":"should reject empty arrays","duration":0.11024999999995089,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchSize"],"fullName":"Batch Validation validateBatchSize should handle unknown resource types","status":"passed","title":"should handle unknown resource types","duration":0.10608300000001236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validatePayloadSize"],"fullName":"Batch Validation validatePayloadSize should accept payloads within size limits","status":"passed","title":"should accept payloads within size limits","duration":0.14391599999999016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validatePayloadSize"],"fullName":"Batch Validation validatePayloadSize should reject oversized payloads","status":"passed","title":"should reject oversized payloads","duration":0.5101660000000265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validatePayloadSize"],"fullName":"Batch Validation validatePayloadSize should check individual record sizes when requested","status":"passed","title":"should check individual record sizes when requested","duration":0.1632919999999558,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validatePayloadSize"],"fullName":"Batch Validation validatePayloadSize should handle arrays of valid records","status":"passed","title":"should handle arrays of valid records","duration":0.08987500000000637,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateSearchQuery"],"fullName":"Batch Validation validateSearchQuery should accept valid search queries","status":"passed","title":"should accept valid search queries","duration":0.08474999999998545,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateSearchQuery"],"fullName":"Batch Validation validateSearchQuery should reject overly long search queries","status":"passed","title":"should reject overly long search queries","duration":0.08612499999992451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateSearchQuery"],"fullName":"Batch Validation validateSearchQuery should accept valid filter objects","status":"passed","title":"should accept valid filter objects","duration":0.06224999999994907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateSearchQuery"],"fullName":"Batch Validation validateSearchQuery should reject overly complex filter objects","status":"passed","title":"should reject overly complex filter objects","duration":0.11445800000001327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchOperation"],"fullName":"Batch Validation validateBatchOperation should validate both size and payload","status":"passed","title":"should validate both size and payload","duration":0.16258400000003803,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchOperation"],"fullName":"Batch Validation validateBatchOperation should fail on size validation first","status":"passed","title":"should fail on size validation first","duration":0.07529099999999289,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","validateBatchOperation"],"fullName":"Batch Validation validateBatchOperation should skip payload check when not requested","status":"passed","title":"should skip payload check when not requested","duration":0.05645900000001802,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","splitBatchIntoChunks"],"fullName":"Batch Validation splitBatchIntoChunks should split large arrays into chunks","status":"passed","title":"should split large arrays into chunks","duration":0.11050000000000182,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","splitBatchIntoChunks"],"fullName":"Batch Validation splitBatchIntoChunks should handle arrays smaller than chunk size","status":"passed","title":"should handle arrays smaller than chunk size","duration":0.06129099999998289,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","splitBatchIntoChunks"],"fullName":"Batch Validation splitBatchIntoChunks should handle empty arrays","status":"passed","title":"should handle empty arrays","duration":0.04724999999996271,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","splitBatchIntoChunks"],"fullName":"Batch Validation splitBatchIntoChunks should use resource-specific limits","status":"passed","title":"should use resource-specific limits","duration":0.06662499999993088,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","createSafeBatchError"],"fullName":"Batch Validation createSafeBatchError should return empty string for valid results","status":"passed","title":"should return empty string for valid results","duration":0.056417000000010376,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","createSafeBatchError"],"fullName":"Batch Validation createSafeBatchError should return the error message for invalid results","status":"passed","title":"should return the error message for invalid results","duration":0.05054100000006656,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","createSafeBatchError"],"fullName":"Batch Validation createSafeBatchError should provide fallback message when error is missing","status":"passed","title":"should provide fallback message when error is missing","duration":0.04504199999996672,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","DoS Protection Scenarios"],"fullName":"Batch Validation DoS Protection Scenarios should prevent memory exhaustion from large batch sizes","status":"passed","title":"should prevent memory exhaustion from large batch sizes","duration":0.09191600000008293,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","DoS Protection Scenarios"],"fullName":"Batch Validation DoS Protection Scenarios should prevent payload bombs","status":"passed","title":"should prevent payload bombs","duration":0.1931250000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","DoS Protection Scenarios"],"fullName":"Batch Validation DoS Protection Scenarios should handle malicious search queries","status":"passed","title":"should handle malicious search queries","duration":0.044957999999951426,"failureMessages":[],"meta":{}},{"ancestorTitles":["Batch Validation","DoS Protection Scenarios"],"fullName":"Batch Validation DoS Protection Scenarios should enforce limits even with valid-looking data","status":"passed","title":"should enforce limits even with valid-looking data","duration":0.07325000000003001,"failureMessages":[],"meta":{}}],"startTime":1756513017361,"endTime":1756513017366.193,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/batch-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should apply color codes to text","status":"passed","title":"should apply color codes to text","duration":1.9038750000000277,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle all available colors","status":"passed","title":"should handle all available colors","duration":0.6074160000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle empty text","status":"passed","title":"should handle empty text","duration":0.21024999999997362,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colorize function"],"fullName":"CLI Colors Utility colorize function should handle special characters","status":"passed","title":"should handle special characters","duration":0.1801250000000323,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colors export"],"fullName":"CLI Colors Utility colors export should export color codes object","status":"passed","title":"should export color codes object","duration":0.2249580000000151,"failureMessages":[],"meta":{}},{"ancestorTitles":["CLI Colors Utility","colors export"],"fullName":"CLI Colors Utility colors export should have all expected color properties","status":"passed","title":"should have all expected color properties","duration":0.344791999999984,"failureMessages":[],"meta":{}}],"startTime":1756513020298,"endTime":1756513020302.3447,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/cli-colors.test.ts"},{"assertionResults":[{"ancestorTitles":["Configuration Loader","loadMappingConfig"],"fullName":"Configuration Loader loadMappingConfig should return an empty config when no files exist","status":"passed","title":"should return an empty config when no files exist","duration":5.511332999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","loadMappingConfig"],"fullName":"Configuration Loader loadMappingConfig should load and merge default and user configurations","status":"passed","title":"should load and merge default and user configurations","duration":0.4137499999999932,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","loadMappingConfig"],"fullName":"Configuration Loader loadMappingConfig should handle invalid JSON in configuration files","status":"passed","title":"should handle invalid JSON in configuration files","duration":3.7812079999999924,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","writeMappingConfig"],"fullName":"Configuration Loader writeMappingConfig should write configuration to file","status":"passed","title":"should write configuration to file","duration":3.5415419999999926,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","writeMappingConfig"],"fullName":"Configuration Loader writeMappingConfig should create directory if it does not exist","status":"passed","title":"should create directory if it does not exist","duration":4.025082999999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","updateMappingSection"],"fullName":"Configuration Loader updateMappingSection should update a specific section with merged mappings","status":"passed","title":"should update a specific section with merged mappings","duration":0.4195420000000354,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","updateMappingSection"],"fullName":"Configuration Loader updateMappingSection should replace section when merge is false","status":"passed","title":"should replace section when merge is false","duration":0.25900000000001455,"failureMessages":[],"meta":{}},{"ancestorTitles":["Configuration Loader","updateMappingSection"],"fullName":"Configuration Loader updateMappingSection should create missing sections as needed","status":"passed","title":"should create missing sections as needed","duration":0.3950839999999971,"failureMessages":[],"meta":{}}],"startTime":1756513017849,"endTime":1756513017867.395,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/config-loader.test.ts"},{"assertionResults":[{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should return false when user.json does not exist","status":"passed","title":"should return false when user.json does not exist","duration":3.491749999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should return false when user.json has correct mappings","status":"passed","title":"should return false when user.json has correct mappings","duration":2.706290999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should detect outdated ZIP and Postal Code mappings","status":"passed","title":"should detect outdated ZIP and Postal Code mappings","duration":1.4069999999999823,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should detect only the outdated mappings in partially outdated config","status":"passed","title":"should detect only the outdated mappings in partially outdated config","duration":8.230792000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should handle malformed JSON gracefully","status":"passed","title":"should handle malformed JSON gracefully","duration":2.682457999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","detectMigrationNeeds"],"fullName":"Config Migration Utility detectMigrationNeeds should handle missing attributes structure","status":"passed","title":"should handle missing attributes structure","duration":0.40354200000001583,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","createBackup"],"fullName":"Config Migration Utility createBackup should create a timestamped backup successfully","status":"passed","title":"should create a timestamped backup successfully","duration":1.2656659999999533,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","createBackup"],"fullName":"Config Migration Utility createBackup should not create backup directory if it already exists","status":"passed","title":"should not create backup directory if it already exists","duration":0.3417919999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","createBackup"],"fullName":"Config Migration Utility createBackup should handle backup creation errors","status":"passed","title":"should handle backup creation errors","duration":0.709541999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","createBackup"],"fullName":"Config Migration Utility createBackup should handle file copy errors","status":"passed","title":"should handle file copy errors","duration":0.6619170000000167,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","applyMigration"],"fullName":"Config Migration Utility applyMigration should succeed when no user.json exists","status":"passed","title":"should succeed when no user.json exists","duration":0.3707499999999868,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","applyMigration"],"fullName":"Config Migration Utility applyMigration should succeed when no migration is needed","status":"passed","title":"should succeed when no migration is needed","duration":0.2374590000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","applyMigration"],"fullName":"Config Migration Utility applyMigration should successfully migrate outdated config","status":"passed","title":"should successfully migrate outdated config","duration":0.5465829999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","applyMigration"],"fullName":"Config Migration Utility applyMigration should fail when backup creation fails","status":"passed","title":"should fail when backup creation fails","duration":0.26575000000002547,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","applyMigration"],"fullName":"Config Migration Utility applyMigration should handle write errors gracefully","status":"passed","title":"should handle write errors gracefully","duration":0.2864579999999819,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","validateMigration"],"fullName":"Config Migration Utility validateMigration should pass validation when no user.json exists","status":"passed","title":"should pass validation when no user.json exists","duration":0.24745799999999463,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","validateMigration"],"fullName":"Config Migration Utility validateMigration should pass validation when config is up to date","status":"passed","title":"should pass validation when config is up to date","duration":0.227958000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","validateMigration"],"fullName":"Config Migration Utility validateMigration should fail validation when outdated mappings remain","status":"passed","title":"should fail validation when outdated mappings remain","duration":0.22920799999997143,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","migrateUserConfig"],"fullName":"Config Migration Utility migrateUserConfig should perform dry run without making changes","status":"passed","title":"should perform dry run without making changes","duration":0.299666000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","migrateUserConfig"],"fullName":"Config Migration Utility migrateUserConfig should complete full migration workflow successfully","status":"passed","title":"should complete full migration workflow successfully","duration":1.3180409999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","migrateUserConfig"],"fullName":"Config Migration Utility migrateUserConfig should detect validation failures after migration","status":"passed","title":"should detect validation failures after migration","duration":0.5040829999999801,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","edge cases and error handling"],"fullName":"Config Migration Utility edge cases and error handling should handle config without common mappings section","status":"passed","title":"should handle config without common mappings section","duration":0.2386250000000132,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","edge cases and error handling"],"fullName":"Config Migration Utility edge cases and error handling should handle completely empty config file","status":"passed","title":"should handle completely empty config file","duration":0.20008300000000645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Migration Utility","edge cases and error handling"],"fullName":"Config Migration Utility edge cases and error handling should preserve other mappings during migration","status":"passed","title":"should preserve other mappings during migration","duration":0.41112499999997,"failureMessages":[],"meta":{}}],"startTime":1756513013427,"endTime":1756513013455.4111,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/config-migration.test.ts"},{"assertionResults":[{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"today\"","status":"passed","title":"should parse \"today\"","duration":3.791624999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"yesterday\"","status":"passed","title":"should parse \"yesterday\"","duration":0.5091670000000192,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"this week\" (Monday to Sunday)","status":"passed","title":"should parse \"this week\" (Monday to Sunday)","duration":0.297458000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last week\"","status":"passed","title":"should parse \"last week\"","duration":0.23279100000002018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"this month\"","status":"passed","title":"should parse \"this month\"","duration":0.2661250000000166,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last month\"","status":"passed","title":"should parse \"last month\"","duration":0.18641599999997993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"this year\"","status":"passed","title":"should parse \"this year\"","duration":0.17016699999999219,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last year\"","status":"passed","title":"should parse \"last year\"","duration":0.1882500000000107,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last 7 days\"","status":"passed","title":"should parse \"last 7 days\"","duration":1.1575420000000065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last 1 day\"","status":"passed","title":"should parse \"last 1 day\"","duration":0.24929199999999696,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last 2 weeks\"","status":"passed","title":"should parse \"last 2 weeks\"","duration":0.7311669999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should parse \"last 3 months\"","status":"passed","title":"should parse \"last 3 months\"","duration":0.5129170000000158,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should be case-insensitive","status":"passed","title":"should be case-insensitive","duration":0.2732090000000085,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should handle extra whitespace","status":"passed","title":"should handle extra whitespace","duration":0.19029199999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","parseRelativeDate"],"fullName":"Date Parser Utilities parseRelativeDate should throw error for unsupported expressions","status":"passed","title":"should throw error for unsupported expressions","duration":0.9892919999999776,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","isRelativeDate"],"fullName":"Date Parser Utilities isRelativeDate should return true for valid relative dates","status":"passed","title":"should return true for valid relative dates","duration":0.5342909999999961,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","isRelativeDate"],"fullName":"Date Parser Utilities isRelativeDate should return false for invalid expressions","status":"passed","title":"should return false for invalid expressions","duration":0.21433299999998212,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","normalizeDate"],"fullName":"Date Parser Utilities normalizeDate should return ISO dates unchanged","status":"passed","title":"should return ISO dates unchanged","duration":0.21016599999998675,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","normalizeDate"],"fullName":"Date Parser Utilities normalizeDate should convert relative dates to ISO format","status":"passed","title":"should convert relative dates to ISO format","duration":0.2952499999999816,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","normalizeDate"],"fullName":"Date Parser Utilities normalizeDate should parse various date formats","status":"passed","title":"should parse various date formats","duration":0.49816699999999514,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","normalizeDate"],"fullName":"Date Parser Utilities normalizeDate should return null for invalid dates","status":"passed","title":"should return null for invalid dates","duration":0.5786249999999882,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","describeDateRange"],"fullName":"Date Parser Utilities describeDateRange should describe single day ranges","status":"passed","title":"should describe single day ranges","duration":11.106667000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","describeDateRange"],"fullName":"Date Parser Utilities describeDateRange should describe multi-day ranges","status":"passed","title":"should describe multi-day ranges","duration":0.3528749999999832,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","describeDateRange"],"fullName":"Date Parser Utilities describeDateRange should describe cross-month ranges","status":"passed","title":"should describe cross-month ranges","duration":0.22354100000001154,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","describeDateRange"],"fullName":"Date Parser Utilities describeDateRange should describe cross-year ranges","status":"passed","title":"should describe cross-year ranges","duration":0.2118340000000103,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","Edge cases"],"fullName":"Date Parser Utilities Edge cases should handle leap year correctly","status":"passed","title":"should handle leap year correctly","duration":0.16133399999998232,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","Edge cases"],"fullName":"Date Parser Utilities Edge cases should handle non-leap year correctly","status":"passed","title":"should handle non-leap year correctly","duration":0.13066699999998832,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","Edge cases"],"fullName":"Date Parser Utilities Edge cases should handle year boundaries","status":"passed","title":"should handle year boundaries","duration":0.1368750000000034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Parser Utilities","Edge cases"],"fullName":"Date Parser Utilities Edge cases should handle week boundaries correctly","status":"passed","title":"should handle week boundaries correctly","duration":0.11762500000000387,"failureMessages":[],"meta":{}}],"startTime":1756513014241,"endTime":1756513014266.137,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/date-parser.test.ts"},{"assertionResults":[{"ancestorTitles":["Date Utils","resolveRelativeDate"],"fullName":"Date Utils resolveRelativeDate should handle relative date calculations","status":"passed","title":"should handle relative date calculations","duration":1.6495409999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveRelativeDate"],"fullName":"Date Utils resolveRelativeDate should validate relative date inputs","status":"passed","title":"should validate relative date inputs","duration":0.7302910000000224,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","createDateRangeFromPreset"],"fullName":"Date Utils createDateRangeFromPreset should create ranges for standard presets","status":"passed","title":"should create ranges for standard presets","duration":0.35829200000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","createDateRangeFromPreset"],"fullName":"Date Utils createDateRangeFromPreset should handle case-insensitive preset values","status":"passed","title":"should handle case-insensitive preset values","duration":0.4011249999999791,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","createDateRangeFromPreset"],"fullName":"Date Utils createDateRangeFromPreset should validate preset inputs","status":"passed","title":"should validate preset inputs","duration":0.39587499999998954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should resolve a date range with absolute dates","status":"passed","title":"should resolve a date range with absolute dates","duration":0.43770900000001234,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should resolve a date range with relative dates","status":"passed","title":"should resolve a date range with relative dates","duration":0.1506249999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should resolve a date range with preset","status":"passed","title":"should resolve a date range with preset","duration":0.18729199999998514,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should handle partial date ranges (only start or only end)","status":"passed","title":"should handle partial date ranges (only start or only end)","duration":0.7246250000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should validate date ranges","status":"passed","title":"should validate date ranges","duration":0.36266699999998764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","resolveDateRange"],"fullName":"Date Utils resolveDateRange should prioritize preset over explicit dates","status":"passed","title":"should prioritize preset over explicit dates","duration":0.283834000000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","isValidISODateString"],"fullName":"Date Utils isValidISODateString should validate ISO date strings","status":"passed","title":"should validate ISO date strings","duration":0.14362500000001432,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","createRelativeDateRange"],"fullName":"Date Utils createRelativeDateRange should create date ranges for different time units","status":"passed","title":"should create date ranges for different time units","duration":0.38341699999998013,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","createRelativeDateRange"],"fullName":"Date Utils createRelativeDateRange should validate inputs","status":"passed","title":"should validate inputs","duration":0.08625000000000682,"failureMessages":[],"meta":{}},{"ancestorTitles":["Date Utils","formatDate"],"fullName":"Date Utils formatDate should format dates in different styles","status":"passed","title":"should format dates in different styles","duration":11.505291999999997,"failureMessages":[],"meta":{}}],"startTime":1756513013785,"endTime":1756513013803.5054,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/date-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from simple domain","status":"passed","title":"should extract domain from simple domain","duration":1.3565830000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from URLs","status":"passed","title":"should extract domain from URLs","duration":0.18787499999999113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from email addresses","status":"passed","title":"should extract domain from email addresses","duration":0.16108299999999076,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should handle invalid inputs","status":"passed","title":"should handle invalid inputs","duration":0.9178749999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractDomain"],"fullName":"Domain Utilities extractDomain should extract domain from text containing domains","status":"passed","title":"should extract domain from text containing domains","duration":0.34704200000001606,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should validate correct domains","status":"passed","title":"should validate correct domains","duration":0.20204200000000583,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should reject invalid domains","status":"passed","title":"should reject invalid domains","duration":0.14783299999999144,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","isValidDomain"],"fullName":"Domain Utilities isValidDomain should handle edge cases","status":"passed","title":"should handle edge cases","duration":0.2044999999999959,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should normalize domains correctly","status":"passed","title":"should normalize domains correctly","duration":2.1626249999999914,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should handle empty input","status":"passed","title":"should handle empty input","duration":0.19345900000001848,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","normalizeDomain"],"fullName":"Domain Utilities normalizeDomain should preserve subdomain structure","status":"passed","title":"should preserve subdomain structure","duration":0.0969169999999906,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should detect domain indicators in text","status":"passed","title":"should detect domain indicators in text","duration":0.22433300000000145,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should not detect domains in plain text","status":"passed","title":"should not detect domains in plain text","duration":0.13212500000000205,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","hasDomainIndicators"],"fullName":"Domain Utilities hasDomainIndicators should handle edge cases","status":"passed","title":"should handle edge cases","duration":0.08216600000000085,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should extract single domain","status":"passed","title":"should extract single domain","duration":2.243959000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should extract multiple domains","status":"passed","title":"should extract multiple domains","duration":1.6355839999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should remove duplicates","status":"passed","title":"should remove duplicates","duration":0.15625,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should handle complex text","status":"passed","title":"should handle complex text","duration":0.2223340000000178,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should handle empty input","status":"passed","title":"should handle empty input","duration":0.09616600000001085,"failureMessages":[],"meta":{}},{"ancestorTitles":["Domain Utilities","extractAllDomains"],"fullName":"Domain Utilities extractAllDomains should normalize extracted domains","status":"passed","title":"should normalize extracted domains","duration":0.11079200000000355,"failureMessages":[],"meta":{}}],"startTime":1756513018279,"endTime":1756513018290.2224,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/domain-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Task Creation Failure Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Task Creation Failure Analysis should analyze high priority task creation pattern","status":"passed","title":"should analyze high priority task creation pattern","duration":8.491125000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Task Creation Failure Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Task Creation Failure Analysis should analyze task assignee creation pattern","status":"passed","title":"should analyze task assignee creation pattern","duration":1.0092500000000086,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Task Creation Failure Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Task Creation Failure Analysis should analyze task lifecycle workflow patterns","status":"passed","title":"should analyze task lifecycle workflow patterns","duration":0.29470900000001166,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Task Creation Failure Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Task Creation Failure Analysis should analyze concurrent task operations pattern","status":"passed","title":"should analyze concurrent task operations pattern","duration":0.7024169999999685,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Error Message Pattern Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Error Message Pattern Analysis should validate \"not found\" error patterns match E2E expectations","status":"passed","title":"should validate \"not found\" error patterns match E2E expectations","duration":0.35766700000004903,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Error Message Pattern Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Error Message Pattern Analysis should validate E2E test tool error format","status":"passed","title":"should validate E2E test tool error format","duration":0.18354199999998855,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Data Structure Compatibility Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Data Structure Compatibility Analysis should validate company ID structure for notes management tests","status":"passed","title":"should validate company ID structure for notes management tests","duration":0.28095899999999574,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Data Structure Compatibility Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Data Structure Compatibility Analysis should validate person ID structure for notes management tests","status":"passed","title":"should validate person ID structure for notes management tests","duration":0.20658300000002328,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Data Structure Compatibility Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Data Structure Compatibility Analysis should validate list ID structure differences","status":"passed","title":"should validate list ID structure differences","duration":0.4015410000000088,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Universal Tools Integration Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Universal Tools Integration Analysis should validate universal tool response format","status":"passed","title":"should validate universal tool response format","duration":0.2615000000000123,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Mock Factory Performance Analysis"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Mock Factory Performance Analysis should validate mock factory creation speed","status":"passed","title":"should validate mock factory creation speed","duration":0.7360419999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["E2E Failure Analysis - Issue #480 Root Cause Investigation","Comprehensive E2E Scenario Simulation"],"fullName":"E2E Failure Analysis - Issue #480 Root Cause Investigation Comprehensive E2E Scenario Simulation should simulate complete E2E test data setup workflow","status":"passed","title":"should simulate complete E2E test data setup workflow","duration":1.8898750000000177,"failureMessages":[],"meta":{}}],"startTime":1756513017651,"endTime":1756513017665.89,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/e2e-failure-analysis.test.ts"},{"assertionResults":[{"ancestorTitles":["Enhanced Validation Utils","validateReadOnlyFields"],"fullName":"Enhanced Validation Utils validateReadOnlyFields should pass validation when no read-only fields are provided","status":"passed","title":"should pass validation when no read-only fields are provided","duration":5.995416000000034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateReadOnlyFields"],"fullName":"Enhanced Validation Utils validateReadOnlyFields should pass validation when read-only fields are not in data","status":"passed","title":"should pass validation when read-only fields are not in data","duration":0.3100000000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateReadOnlyFields"],"fullName":"Enhanced Validation Utils validateReadOnlyFields should fail validation when read-only fields are provided in data","status":"passed","title":"should fail validation when read-only fields are provided in data","duration":0.506416999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateReadOnlyFields"],"fullName":"Enhanced Validation Utils validateReadOnlyFields should ignore fields with undefined values","status":"passed","title":"should ignore fields with undefined values","duration":0.14387500000003683,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateFieldExistence"],"fullName":"Enhanced Validation Utils validateFieldExistence should pass validation when all required fields are present","status":"passed","title":"should pass validation when all required fields are present","duration":0.25808399999999665,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateFieldExistence"],"fullName":"Enhanced Validation Utils validateFieldExistence should fail validation when required fields are missing","status":"passed","title":"should fail validation when required fields are missing","duration":0.2631670000000099,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateFieldExistence"],"fullName":"Enhanced Validation Utils validateFieldExistence should fail validation when required fields are null or empty","status":"passed","title":"should fail validation when required fields are null or empty","duration":0.1503340000000435,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should pass validation for valid single select value","status":"passed","title":"should pass validation for valid single select value","duration":0.13954100000000835,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should pass validation for valid multiselect values","status":"passed","title":"should pass validation for valid multiselect values","duration":0.4934170000000222,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should fail validation for invalid single select value","status":"passed","title":"should fail validation for invalid single select value","duration":0.16216600000001336,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should fail validation for invalid multiselect values","status":"passed","title":"should fail validation for invalid multiselect values","duration":0.14329099999997652,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should pass validation for null or undefined values","status":"passed","title":"should pass validation for null or undefined values","duration":0.06925000000001091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateSelectField"],"fullName":"Enhanced Validation Utils validateSelectField should use default field label when none provided","status":"passed","title":"should use default field label when none provided","duration":0.09641700000003084,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should pass validation for valid record data","status":"passed","title":"should pass validation for valid record data","duration":0.3290839999999662,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should fail validation for read-only fields","status":"passed","title":"should fail validation for read-only fields","duration":0.20695899999998346,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should fail validation for missing required fields in create operations","status":"passed","title":"should fail validation for missing required fields in create operations","duration":0.0981670000000463,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should not check required fields for update operations","status":"passed","title":"should not check required fields for update operations","duration":0.2323750000000473,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should warn about unrecognized fields","status":"passed","title":"should warn about unrecognized fields","duration":0.10725000000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should handle metadata fetch errors gracefully","status":"passed","title":"should handle metadata fetch errors gracefully","duration":0.13800000000003365,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","validateRecordFields"],"fullName":"Enhanced Validation Utils validateRecordFields should warn when no metadata is available","status":"passed","title":"should warn when no metadata is available","duration":0.07770800000002964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","createEnhancedErrorResponse"],"fullName":"Enhanced Validation Utils createEnhancedErrorResponse should create basic error response","status":"passed","title":"should create basic error response","duration":0.12133299999999281,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","createEnhancedErrorResponse"],"fullName":"Enhanced Validation Utils createEnhancedErrorResponse should include suggestions for missing fields","status":"passed","title":"should include suggestions for missing fields","duration":0.08829200000002402,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","createEnhancedErrorResponse"],"fullName":"Enhanced Validation Utils createEnhancedErrorResponse should include suggestions for read-only fields","status":"passed","title":"should include suggestions for read-only fields","duration":0.16291599999999562,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","createEnhancedErrorResponse"],"fullName":"Enhanced Validation Utils createEnhancedErrorResponse should include suggestions for invalid fields","status":"passed","title":"should include suggestions for invalid fields","duration":0.0660829999999919,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Validation Utils","createEnhancedErrorResponse"],"fullName":"Enhanced Validation Utils createEnhancedErrorResponse should not include suggestions when there are no issues to suggest fixes for","status":"passed","title":"should not include suggestions when there are no issues to suggest fixes for","duration":0.06412500000004684,"failureMessages":[],"meta":{}}],"startTime":1756513017944,"endTime":1756513017954.1628,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/enhanced-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["error-handler","createAttioError"],"fullName":"error-handler createAttioError should return an AttioApiError instance when given an Axios error","status":"passed","title":"should return an AttioApiError instance when given an Axios error","duration":1.5344160000000215,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createAttioError"],"fullName":"error-handler createAttioError should return the original error when not an Axios error","status":"passed","title":"should return the original error when not an Axios error","duration":0.3929170000000113,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createApiError"],"fullName":"error-handler createApiError should create a 404 error with appropriate message for resources","status":"passed","title":"should create a 404 error with appropriate message for resources","duration":0.2785000000000082,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createApiError"],"fullName":"error-handler createApiError should create a 401 error with authentication message","status":"passed","title":"should create a 401 error with authentication message","duration":0.21933400000000347,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createApiError"],"fullName":"error-handler createApiError should create a 429 error with rate limit message","status":"passed","title":"should create a 429 error with rate limit message","duration":0.20170799999999645,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createErrorResult"],"fullName":"error-handler createErrorResult should format an AttioApiError correctly","status":"passed","title":"should format an AttioApiError correctly","duration":0.8290829999999971,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createErrorResult"],"fullName":"error-handler createErrorResult should create a properly formatted error result from status and response data","status":"passed","title":"should create a properly formatted error result from status and response data","duration":1.0831249999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","createErrorResult"],"fullName":"error-handler createErrorResult should handle missing response data","status":"passed","title":"should handle missing response data","duration":0.22154199999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","formatErrorResponse"],"fullName":"error-handler formatErrorResponse should create a properly formatted error response based on error type","status":"passed","title":"should create a properly formatted error response based on error type","duration":0.4029170000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-handler","formatErrorResponse"],"fullName":"error-handler formatErrorResponse should set the appropriate error code based on error type","status":"passed","title":"should set the appropriate error code based on error type","duration":0.4506670000000099,"failureMessages":[],"meta":{}}],"startTime":1756513019071,"endTime":1756513019077.4507,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/error-handler.test.ts"},{"assertionResults":[{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove file paths","status":"passed","title":"should remove file paths","duration":1.990667000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove API keys and tokens","status":"passed","title":"should remove API keys and tokens","duration":0.46316699999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove internal IDs","status":"passed","title":"should remove internal IDs","duration":0.19537500000001273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove stack traces","status":"passed","title":"should remove stack traces","duration":0.2306250000000034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove email addresses","status":"passed","title":"should remove email addresses","duration":0.12049999999999272,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove IP addresses","status":"passed","title":"should remove IP addresses","duration":0.12487500000000296,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should remove URLs with parameters","status":"passed","title":"should remove URLs with parameters","duration":0.1160419999999931,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should provide user-friendly messages for common errors","status":"passed","title":"should provide user-friendly messages for common errors","duration":0.1469160000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should handle Error objects","status":"passed","title":"should handle Error objects","duration":2.4323750000000075,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should include safe context when requested","status":"passed","title":"should include safe context when requested","duration":0.17841699999999605,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should return only user-friendly message in production","status":"passed","title":"should return only user-friendly message in production","duration":0.1528329999999869,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","sanitizeErrorMessage"],"fullName":"Error Sanitizer sanitizeErrorMessage should include sanitized dev info in development","status":"passed","title":"should include sanitized dev info in development","duration":0.07379199999999742,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","createSanitizedError"],"fullName":"Error Sanitizer createSanitizedError should create sanitized error object with correct properties","status":"passed","title":"should create sanitized error object with correct properties","duration":0.2330000000000041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","createSanitizedError"],"fullName":"Error Sanitizer createSanitizedError should infer status code from error type","status":"passed","title":"should infer status code from error type","duration":0.7557499999999777,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","createSanitizedError"],"fullName":"Error Sanitizer createSanitizedError should include safe metadata","status":"passed","title":"should include safe metadata","duration":0.4138749999999902,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","withErrorSanitization"],"fullName":"Error Sanitizer withErrorSanitization should wrap async function and sanitize errors","status":"passed","title":"should wrap async function and sanitize errors","duration":1.8576659999999947,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","withErrorSanitization"],"fullName":"Error Sanitizer withErrorSanitization should preserve successful results","status":"passed","title":"should preserve successful results","duration":0.14875000000000682,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","containsSensitiveInfo"],"fullName":"Error Sanitizer containsSensitiveInfo should detect file paths","status":"skipped","title":"should detect file paths","failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","containsSensitiveInfo"],"fullName":"Error Sanitizer containsSensitiveInfo should detect API keys","status":"skipped","title":"should detect API keys","failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","containsSensitiveInfo"],"fullName":"Error Sanitizer containsSensitiveInfo should detect emails","status":"passed","title":"should detect emails","duration":0.22175000000001432,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","containsSensitiveInfo"],"fullName":"Error Sanitizer containsSensitiveInfo should detect IPs","status":"passed","title":"should detect IPs","duration":0.07854199999999878,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","containsSensitiveInfo"],"fullName":"Error Sanitizer containsSensitiveInfo should return false for safe messages","status":"passed","title":"should return false for safe messages","duration":0.30154200000001197,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","getErrorSummary"],"fullName":"Error Sanitizer getErrorSummary should return error type summary","status":"passed","title":"should return error type summary","duration":0.12804200000002197,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","getErrorSummary"],"fullName":"Error Sanitizer getErrorSummary should include safe context in summary","status":"passed","title":"should include safe context in summary","duration":0.6350829999999803,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","getErrorSummary"],"fullName":"Error Sanitizer getErrorSummary should handle unknown errors","status":"passed","title":"should handle unknown errors","duration":0.4591670000000079,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","Security Validation"],"fullName":"Error Sanitizer Security Validation should never expose sensitive patterns in production","status":"passed","title":"should never expose sensitive patterns in production","duration":1.8417910000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Sanitizer","Security Validation"],"fullName":"Error Sanitizer Security Validation should handle complex nested errors","status":"passed","title":"should handle complex nested errors","duration":0.1811659999999904,"failureMessages":[],"meta":{}}],"startTime":1756513013963,"endTime":1756513013977.1812,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/error-sanitizer.test.ts"},{"assertionResults":[{"ancestorTitles":["Field Suggestions Utilities","levenshteinDistance"],"fullName":"Field Suggestions Utilities levenshteinDistance should calculate correct distance for similar strings","status":"passed","title":"should calculate correct distance for similar strings","duration":7.078665999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","levenshteinDistance"],"fullName":"Field Suggestions Utilities levenshteinDistance should return 0 for identical strings","status":"passed","title":"should return 0 for identical strings","duration":1.0284169999999904,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","levenshteinDistance"],"fullName":"Field Suggestions Utilities levenshteinDistance should handle case differences","status":"passed","title":"should handle case differences","duration":0.21154100000001108,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","findSimilarOptions"],"fullName":"Field Suggestions Utilities findSimilarOptions should find similar field names","status":"passed","title":"should find similar field names","duration":0.5263749999999732,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","findSimilarOptions"],"fullName":"Field Suggestions Utilities findSimilarOptions should find multiple suggestions sorted by similarity","status":"passed","title":"should find multiple suggestions sorted by similarity","duration":0.3871250000000259,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","findSimilarOptions"],"fullName":"Field Suggestions Utilities findSimilarOptions should respect max suggestions limit","status":"passed","title":"should respect max suggestions limit","duration":0.328125,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","findSimilarOptions"],"fullName":"Field Suggestions Utilities findSimilarOptions should handle substring matching when no close matches","status":"passed","title":"should handle substring matching when no close matches","duration":0.17908299999999144,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","findSimilarOptions"],"fullName":"Field Suggestions Utilities findSimilarOptions should return empty array for no matches","status":"passed","title":"should return empty array for no matches","duration":4.017667000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateFieldSuggestionMessage"],"fullName":"Field Suggestions Utilities generateFieldSuggestionMessage should generate message with suggestions for similar field","status":"passed","title":"should generate message with suggestions for similar field","duration":3.3956249999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateFieldSuggestionMessage"],"fullName":"Field Suggestions Utilities generateFieldSuggestionMessage should include context when provided","status":"passed","title":"should include context when provided","duration":0.9003329999999892,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateFieldSuggestionMessage"],"fullName":"Field Suggestions Utilities generateFieldSuggestionMessage should show valid fields when no close matches","status":"passed","title":"should show valid fields when no close matches","duration":0.8935829999999783,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateFieldSuggestionMessage"],"fullName":"Field Suggestions Utilities generateFieldSuggestionMessage should handle large field lists","status":"passed","title":"should handle large field lists","duration":0.21045900000001438,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateEnumSuggestionMessage"],"fullName":"Field Suggestions Utilities generateEnumSuggestionMessage should generate message with all valid options for small sets","status":"passed","title":"should generate message with all valid options for small sets","duration":0.15308300000003783,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateEnumSuggestionMessage"],"fullName":"Field Suggestions Utilities generateEnumSuggestionMessage should truncate large option lists","status":"passed","title":"should truncate large option lists","duration":0.14241600000002563,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateReadOnlyFieldMessage"],"fullName":"Field Suggestions Utilities generateReadOnlyFieldMessage should generate message for update operation","status":"passed","title":"should generate message for update operation","duration":0.07816700000000765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateReadOnlyFieldMessage"],"fullName":"Field Suggestions Utilities generateReadOnlyFieldMessage should generate message for create operation","status":"passed","title":"should generate message for create operation","duration":0.061583000000041466,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateResourceTypeSuggestionMessage"],"fullName":"Field Suggestions Utilities generateResourceTypeSuggestionMessage should suggest similar resource types","status":"passed","title":"should suggest similar resource types","duration":0.16033300000003692,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","generateResourceTypeSuggestionMessage"],"fullName":"Field Suggestions Utilities generateResourceTypeSuggestionMessage should list all valid resource types","status":"passed","title":"should list all valid resource types","duration":0.11929099999997561,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","getMappedFieldName"],"fullName":"Field Suggestions Utilities getMappedFieldName should map common field name mistakes","status":"passed","title":"should map common field name mistakes","duration":0.1415829999999687,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","getMappedFieldName"],"fullName":"Field Suggestions Utilities getMappedFieldName should handle different formats","status":"passed","title":"should handle different formats","duration":0.07304199999998673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","getMappedFieldName"],"fullName":"Field Suggestions Utilities getMappedFieldName should return null for unknown fields","status":"passed","title":"should return null for unknown fields","duration":0.05729100000002063,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","validateFieldWithSuggestions"],"fullName":"Field Suggestions Utilities validateFieldWithSuggestions should validate valid fields","status":"passed","title":"should validate valid fields","duration":0.09583300000002737,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","validateFieldWithSuggestions"],"fullName":"Field Suggestions Utilities validateFieldWithSuggestions should suggest mapped field names","status":"passed","title":"should suggest mapped field names","duration":0.06329099999999244,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","validateFieldWithSuggestions"],"fullName":"Field Suggestions Utilities validateFieldWithSuggestions should generate suggestions for unknown fields","status":"passed","title":"should generate suggestions for unknown fields","duration":0.07879100000002381,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","validateFieldWithSuggestions"],"fullName":"Field Suggestions Utilities validateFieldWithSuggestions should detect read-only fields for update","status":"passed","title":"should detect read-only fields for update","duration":0.06537499999996044,"failureMessages":[],"meta":{}},{"ancestorTitles":["Field Suggestions Utilities","validateFieldWithSuggestions"],"fullName":"Field Suggestions Utilities validateFieldWithSuggestions should detect read-only fields for create","status":"passed","title":"should detect read-only fields for create","duration":0.06287500000001955,"failureMessages":[],"meta":{}}],"startTime":1756513016350,"endTime":1756513016371.1416,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/field-suggestions.test.ts"},{"assertionResults":[{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat transforms a single filter condition correctly","status":"passed","title":"transforms a single filter condition correctly","duration":2.0144580000000474,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat returns empty object for undefined filters","status":"passed","title":"returns empty object for undefined filters","duration":0.8587499999999864,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat returns empty object for empty filters array","status":"passed","title":"returns empty object for empty filters array","duration":0.1915840000000344,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat creates AND logic for multiple filters by default","status":"passed","title":"creates AND logic for multiple filters by default","duration":0.3013750000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat creates OR logic when matchAny is true","status":"passed","title":"creates OR logic when matchAny is true","duration":0.31520799999998417,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat supports various filter condition types","status":"passed","title":"supports various filter condition types","duration":0.26983300000000554,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat throws FilterValidationError for invalid filter condition","status":"passed","title":"throws FilterValidationError for invalid filter condition","duration":0.4012920000000122,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat skips filters with missing attribute slug","status":"passed","title":"skips filters with missing attribute slug","duration":0.20866700000004812,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat skips filters with missing condition","status":"passed","title":"skips filters with missing condition","duration":1.42916699999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["transformFiltersToApiFormat"],"fullName":"transformFiltersToApiFormat skips condition validation when validateConditions is false","status":"passed","title":"skips condition validation when validateConditions is false","duration":0.5622920000000136,"failureMessages":[],"meta":{}}],"startTime":1756513018845,"endTime":1756513018851.5623,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/filter-transform.test.ts"},{"assertionResults":[{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle basic objects","status":"passed","title":"should handle basic objects","duration":2.2426249999999754,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle circular references","status":"passed","title":"should handle circular references","duration":1.2152080000000183,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle nested circular references","status":"passed","title":"should handle nested circular references","duration":0.26745900000003076,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle functions","status":"passed","title":"should handle functions","duration":0.1749590000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle undefined values","status":"passed","title":"should handle undefined values","duration":0.18370900000002166,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle symbols","status":"passed","title":"should handle symbols","duration":0.15837500000003502,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle Error objects","status":"passed","title":"should handle Error objects","duration":0.20079199999997854,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should handle deep objects without exceeding max depth","status":"passed","title":"should handle deep objects without exceeding max depth","duration":0.17712499999998954,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","safeJsonStringify"],"fullName":"JSON Serializer safeJsonStringify should truncate very long strings","status":"passed","title":"should truncate very long strings","duration":1.3123749999999745,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","validateJsonString"],"fullName":"JSON Serializer validateJsonString should validate correct JSON strings","status":"passed","title":"should validate correct JSON strings","duration":0.29775000000000773,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","validateJsonString"],"fullName":"JSON Serializer validateJsonString should detect invalid JSON strings","status":"passed","title":"should detect invalid JSON strings","duration":0.11812499999996362,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should detect direct circular references","status":"passed","title":"should detect direct circular references","duration":0.11229200000002493,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should detect nested circular references","status":"passed","title":"should detect nested circular references","duration":0.0614999999999668,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","hasCircularReferences"],"fullName":"JSON Serializer hasCircularReferences should return false for objects without circular references","status":"passed","title":"should return false for objects without circular references","duration":0.05225000000001501,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","createSafeCopy"],"fullName":"JSON Serializer createSafeCopy should create a safe copy of an object with circular references","status":"passed","title":"should create a safe copy of an object with circular references","duration":0.09991699999994808,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","sanitizeMcpResponse"],"fullName":"JSON Serializer sanitizeMcpResponse should sanitize MCP responses with circular references","status":"passed","title":"should sanitize MCP responses with circular references","duration":0.18341700000001993,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","sanitizeMcpResponse"],"fullName":"JSON Serializer sanitizeMcpResponse should handle non-object responses","status":"passed","title":"should handle non-object responses","duration":0.06741699999997763,"failureMessages":[],"meta":{}},{"ancestorTitles":["JSON Serializer","Real-world MCP response scenarios"],"fullName":"JSON Serializer Real-world MCP response scenarios should handle complex nested response objects","status":"passed","title":"should handle complex nested response objects","duration":0.5887910000000147,"failureMessages":[],"meta":{}}],"startTime":1756513018230,"endTime":1756513018237.5889,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/json-serializer.test.ts"},{"assertionResults":[{"ancestorTitles":["List ID Validation","isValidListId"],"fullName":"List ID Validation isValidListId should accept valid list IDs","status":"passed","title":"should accept valid list IDs","duration":5.502165999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidListId"],"fullName":"List ID Validation isValidListId should reject malformed list IDs","status":"passed","title":"should reject malformed list IDs","duration":0.365916000000027,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidListId"],"fullName":"List ID Validation isValidListId should reject list IDs with potential injection characters","status":"passed","title":"should reject list IDs with potential injection characters","duration":1.7098330000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidListId"],"fullName":"List ID Validation isValidListId should reject excessively long list IDs","status":"passed","title":"should reject excessively long list IDs","duration":0.21970899999996618,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidId"],"fullName":"List ID Validation isValidId should accept valid generic IDs","status":"passed","title":"should accept valid generic IDs","duration":0.46154200000000856,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidId"],"fullName":"List ID Validation isValidId should reject malformed generic IDs","status":"passed","title":"should reject malformed generic IDs","duration":0.177708999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidId"],"fullName":"List ID Validation isValidId should reject generic IDs with potential injection characters","status":"passed","title":"should reject generic IDs with potential injection characters","duration":1.5967079999999783,"failureMessages":[],"meta":{}},{"ancestorTitles":["List ID Validation","isValidId"],"fullName":"List ID Validation isValidId should reject excessively long generic IDs","status":"passed","title":"should reject excessively long generic IDs","duration":0.2323750000000473,"failureMessages":[],"meta":{}}],"startTime":1756513019914,"endTime":1756513019925.2324,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/list-id-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should create task with both content and title fields","status":"passed","title":"should create task with both content and title fields","duration":1.261624999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should include task_id in ID structure for E2E compatibility","status":"passed","title":"should include task_id in ID structure for E2E compatibility","duration":0.22979200000000333,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should create high priority task without errors","status":"passed","title":"should create high priority task without errors","duration":0.22170800000000668,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should create task with assignee correctly","status":"passed","title":"should create task with assignee correctly","duration":0.24095800000000622,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should create task with linked records properly","status":"passed","title":"should create task with linked records properly","duration":0.2574170000000038,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should create multiple tasks consistently","status":"passed","title":"should create multiple tasks consistently","duration":0.5244999999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Task Mock Factory Validation - Issue #480 Compatibility"],"fullName":"Mock Data Validation for E2E Test Compatibility Task Mock Factory Validation - Issue #480 Compatibility should handle edge cases gracefully","status":"passed","title":"should handle edge cases gracefully","duration":0.23550000000000182,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Company Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Company Mock Factory Validation should create company with proper ID structure","status":"passed","title":"should create company with proper ID structure","duration":0.2687080000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Company Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Company Mock Factory Validation should include values object with proper structure","status":"passed","title":"should include values object with proper structure","duration":0.24179200000000378,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Company Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Company Mock Factory Validation should handle custom company data","status":"passed","title":"should handle custom company data","duration":0.14362500000001432,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Person Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Person Mock Factory Validation should create person with proper ID structure","status":"passed","title":"should create person with proper ID structure","duration":0.12400000000002365,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Person Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Person Mock Factory Validation should include values object for person data","status":"passed","title":"should include values object for person data","duration":0.08791700000000446,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","List Mock Factory Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility List Mock Factory Validation should create list with basic structure","status":"passed","title":"should create list with basic structure","duration":0.1125419999999906,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Error Message Format Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Error Message Format Validation should validate error messages match expected patterns","status":"passed","title":"should validate error messages match expected patterns","duration":0.327083000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Error Message Format Validation"],"fullName":"Mock Data Validation for E2E Test Compatibility Error Message Format Validation should provide standardized error messages for mock responses","status":"passed","title":"should provide standardized error messages for mock responses","duration":0.10775000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Mock Factory Integration Tests"],"fullName":"Mock Data Validation for E2E Test Compatibility Mock Factory Integration Tests should validate all mock factories meet minimum standards","status":"passed","title":"should validate all mock factories meet minimum standards","duration":0.36183399999998755,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Mock Factory Integration Tests"],"fullName":"Mock Data Validation for E2E Test Compatibility Mock Factory Integration Tests should have no critical validation errors","status":"passed","title":"should have no critical validation errors","duration":1.2225410000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Mock Factory Integration Tests"],"fullName":"Mock Data Validation for E2E Test Compatibility Mock Factory Integration Tests should ensure Issue #480 compatibility across all factories","status":"passed","title":"should ensure Issue #480 compatibility across all factories","duration":0.3779999999999859,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Test Environment Diagnostics"],"fullName":"Mock Data Validation for E2E Test Compatibility Test Environment Diagnostics should correctly detect test environment","status":"passed","title":"should correctly detect test environment","duration":0.08754100000001586,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Test Environment Diagnostics"],"fullName":"Mock Data Validation for E2E Test Compatibility Test Environment Diagnostics should have functioning mock factory status","status":"passed","title":"should have functioning mock factory status","duration":0.23116600000000176,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","Test Environment Diagnostics"],"fullName":"Mock Data Validation for E2E Test Compatibility Test Environment Diagnostics should provide actionable recommendations if issues exist","status":"passed","title":"should provide actionable recommendations if issues exist","duration":1.2054169999999829,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","E2E Test Compatibility Regression Prevention"],"fullName":"Mock Data Validation for E2E Test Compatibility E2E Test Compatibility Regression Prevention should prevent Task E2E test regressions","status":"passed","title":"should prevent Task E2E test regressions","duration":0.21958399999999756,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Data Validation for E2E Test Compatibility","E2E Test Compatibility Regression Prevention"],"fullName":"Mock Data Validation for E2E Test Compatibility E2E Test Compatibility Regression Prevention should maintain consistent mock data structure across versions","status":"passed","title":"should maintain consistent mock data structure across versions","duration":0.16275000000001683,"failureMessages":[],"meta":{}}],"startTime":1756513014070,"endTime":1756513014079.1628,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/mock-data-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should create a filter with min value only","status":"passed","title":"should create a filter with min value only","duration":2.5370829999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should create a filter with max value only","status":"passed","title":"should create a filter with max value only","duration":0.8344999999999914,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should create a filter with both min and max values","status":"passed","title":"should create a filter with both min and max values","duration":0.42066699999998036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should create a filter with equals value","status":"passed","title":"should create a filter with equals value","duration":0.47270800000001145,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should throw error when an invalid numeric range is provided","status":"passed","title":"should throw error when an invalid numeric range is provided","duration":0.796875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should throw error when an empty range is provided","status":"passed","title":"should throw error when an empty range is provided","duration":1.062582999999961,"failureMessages":[],"meta":{}},{"ancestorTitles":["Numeric Filtering","createNumericFilter"],"fullName":"Numeric Filtering createNumericFilter should throw error when min/max are provided with equals","status":"passed","title":"should throw error when min/max are provided with equals","duration":0.4075419999999781,"failureMessages":[],"meta":{}}],"startTime":1756513020183,"endTime":1756513020189.4075,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/numeric-filters.test.ts"},{"assertionResults":[{"ancestorTitles":["createPathBasedFilter","basic filter creation"],"fullName":"createPathBasedFilter basic filter creation should create a correct path-based filter structure","status":"passed","title":"should create a correct path-based filter structure","duration":6.329666000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map equals condition","status":"passed","title":"should correctly map equals condition","duration":0.25966600000000994,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map contains condition","status":"passed","title":"should correctly map contains condition","duration":0.12170799999998394,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map starts_with condition","status":"passed","title":"should correctly map starts_with condition","duration":0.10570799999999281,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map ends_with condition","status":"passed","title":"should correctly map ends_with condition","duration":0.20212499999999523,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map greater_than condition","status":"passed","title":"should correctly map greater_than condition","duration":0.10629199999999628,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map less_than condition","status":"passed","title":"should correctly map less_than condition","duration":0.09037499999999454,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map is_empty condition","status":"passed","title":"should correctly map is_empty condition","duration":0.12350000000000705,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map is_not_empty condition","status":"passed","title":"should correctly map is_not_empty condition","duration":0.5285000000000082,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map in condition with array value","status":"passed","title":"should correctly map in condition with array value","duration":0.15475000000000705,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","condition mapping"],"fullName":"createPathBasedFilter condition mapping should correctly map in condition with single value (converted to array)","status":"passed","title":"should correctly map in condition with single value (converted to array)","duration":0.08529100000001222,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","special attribute handling"],"fullName":"createPathBasedFilter special attribute handling should create special filter for record_id","status":"passed","title":"should create special filter for record_id","duration":0.17049999999997567,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","special attribute handling"],"fullName":"createPathBasedFilter special attribute handling should create special filter for id attribute","status":"passed","title":"should create special filter for id attribute","duration":0.07325000000000159,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","special attribute handling"],"fullName":"createPathBasedFilter special attribute handling should handle name attribute with equals condition","status":"passed","title":"should handle name attribute with equals condition","duration":0.05987500000000523,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","special attribute handling"],"fullName":"createPathBasedFilter special attribute handling should handle name attribute with contains condition","status":"passed","title":"should handle name attribute with contains condition","duration":0.05820800000000759,"failureMessages":[],"meta":{}},{"ancestorTitles":["createPathBasedFilter","special attribute handling"],"fullName":"createPathBasedFilter special attribute handling should handle email_addresses attribute with contains condition","status":"passed","title":"should handle email_addresses attribute with contains condition","duration":0.06041700000000105,"failureMessages":[],"meta":{}}],"startTime":1756513012182,"endTime":1756513012190.1704,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/path-based-filter.test.ts"},{"assertionResults":[{"ancestorTitles":["Postal Code Field Mapping - Issue #219","postal_code field mapping"],"fullName":"Postal Code Field Mapping - Issue #219 postal_code field mapping should map \"postal_code\" to correct attribute slug","status":"passed","title":"should map \"postal_code\" to correct attribute slug","duration":4.430542000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Postal Code Field Mapping - Issue #219","postal_code field mapping"],"fullName":"Postal Code Field Mapping - Issue #219 postal_code field mapping should map \"Postal Code\" (display name) to correct attribute slug","status":"passed","title":"should map \"Postal Code\" (display name) to correct attribute slug","duration":0.6097080000000119,"failureMessages":[],"meta":{}},{"ancestorTitles":["Postal Code Field Mapping - Issue #219","postal_code field mapping"],"fullName":"Postal Code Field Mapping - Issue #219 postal_code field mapping should map \"ZIP\" to correct attribute slug","status":"passed","title":"should map \"ZIP\" to correct attribute slug","duration":0.8960409999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Postal Code Field Mapping - Issue #219","postal_code field mapping"],"fullName":"Postal Code Field Mapping - Issue #219 postal_code field mapping should have consistent mapping between postal_code variants","status":"passed","title":"should have consistent mapping between postal_code variants","duration":2.2778749999999945,"failureMessages":[],"meta":{}},{"ancestorTitles":["Postal Code Field Mapping - Issue #219","postal_code field mapping"],"fullName":"Postal Code Field Mapping - Issue #219 postal_code field mapping should not map to non-existent \"zip\" slug if that causes the API error","status":"passed","title":"should not map to non-existent \"zip\" slug if that causes the API error","duration":0.8662919999999872,"failureMessages":[],"meta":{}},{"ancestorTitles":["Postal Code Field Mapping - Issue #219","mapping priority and fallback"],"fullName":"Postal Code Field Mapping - Issue #219 mapping priority and fallback should check which mapping source is being used","status":"passed","title":"should check which mapping source is being used","duration":5.468959000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Creation with postal_code - Integration"],"fullName":"Company Creation with postal_code - Integration should test the attribute validation flow","status":"passed","title":"should test the attribute validation flow","duration":1.0621250000000089,"failureMessages":[],"meta":{}}],"startTime":1756513017989,"endTime":1756513018005.062,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/postal-code-mapping.test.ts"},{"assertionResults":[{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should maintain existing record_id if already present","status":"passed","title":"should maintain existing record_id if already present","duration":2.4407919999999876,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from record.id.record_id","status":"passed","title":"should extract record_id from record.id.record_id","duration":0.2873339999999871,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from parent_record_id","status":"passed","title":"should extract record_id from parent_record_id","duration":0.1309999999999718,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from values.record_id array","status":"passed","title":"should extract record_id from values.record_id array","duration":0.10866700000002538,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from values.record nested object","status":"passed","title":"should extract record_id from values.record nested object","duration":0.17862500000001091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from reference_id","status":"passed","title":"should extract record_id from reference_id","duration":0.10483300000004192,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from object_id","status":"passed","title":"should extract record_id from object_id","duration":0.1235409999999888,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from record.reference_id","status":"passed","title":"should extract record_id from record.reference_id","duration":0.1409999999999627,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from record.record_id","status":"passed","title":"should extract record_id from record.record_id","duration":0.5273750000000064,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from record.uri","status":"passed","title":"should extract record_id from record.uri","duration":0.13949999999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should extract record_id from property ending with _record_id","status":"passed","title":"should extract record_id from property ending with _record_id","duration":0.14354100000002745,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should leave record_id undefined when no record_id can be found","status":"passed","title":"should leave record_id undefined when no record_id can be found","duration":0.08245900000002848,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should handle complex nested structures","status":"passed","title":"should handle complex nested structures","duration":0.07004200000000083,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record ID Extraction Tests"],"fullName":"Record ID Extraction Tests should handle a mix of entry types in the same batch","status":"passed","title":"should handle a mix of entry types in the same batch","duration":0.10004099999997607,"failureMessages":[],"meta":{}}],"startTime":1756513019950,"endTime":1756513019955.1436,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/record-utils.record-id-extraction.test.ts"},{"assertionResults":[{"ancestorTitles":["record-utils","processListEntries"],"fullName":"record-utils processListEntries should process entries and extract record IDs","status":"passed","title":"should process entries and extract record IDs","duration":2.1869159999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["record-utils","processListEntries"],"fullName":"record-utils processListEntries should not modify entries when record_id is already defined","status":"passed","title":"should not modify entries when record_id is already defined","duration":0.17837500000001683,"failureMessages":[],"meta":{}},{"ancestorTitles":["record-utils","getRecordNameFromEntry"],"fullName":"record-utils getRecordNameFromEntry should extract record name when available","status":"passed","title":"should extract record name when available","duration":0.20491699999996627,"failureMessages":[],"meta":{}},{"ancestorTitles":["record-utils","getRecordNameFromEntry"],"fullName":"record-utils getRecordNameFromEntry should return empty string when record data is not available","status":"passed","title":"should return empty string when record data is not available","duration":0.11687499999999318,"failureMessages":[],"meta":{}},{"ancestorTitles":["record-utils","getRecordNameFromEntry"],"fullName":"record-utils getRecordNameFromEntry should return empty string when name array is empty","status":"passed","title":"should return empty string when name array is empty","duration":0.16512499999998909,"failureMessages":[],"meta":{}},{"ancestorTitles":["record-utils","API_PARAMS"],"fullName":"record-utils API_PARAMS should define the expected API parameters","status":"passed","title":"should define the expected API parameters","duration":0.2113329999999678,"failureMessages":[],"meta":{}}],"startTime":1756513019569,"endTime":1756513019572.2114,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/record-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Relationship Utilities","createPeopleByCompanyFilter"],"fullName":"Relationship Utilities createPeopleByCompanyFilter should create a valid relationship filter for people by company","status":"passed","title":"should create a valid relationship filter for people by company","duration":7.562166999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createPeopleByCompanyFilter"],"fullName":"Relationship Utilities createPeopleByCompanyFilter should throw an error if company filter is invalid","status":"passed","title":"should throw an error if company filter is invalid","duration":0.3193750000000364,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createCompaniesByPeopleFilter"],"fullName":"Relationship Utilities createCompaniesByPeopleFilter should create a valid relationship filter for companies by people","status":"passed","title":"should create a valid relationship filter for companies by people","duration":0.347582999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createCompaniesByPeopleFilter"],"fullName":"Relationship Utilities createCompaniesByPeopleFilter should throw an error if people filter is invalid","status":"passed","title":"should throw an error if people filter is invalid","duration":0.12254200000000992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createRecordsByListFilter"],"fullName":"Relationship Utilities createRecordsByListFilter should create a valid filter for records by list ID","status":"passed","title":"should create a valid filter for records by list ID","duration":0.5972079999999664,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createRecordsByListFilter"],"fullName":"Relationship Utilities createRecordsByListFilter should throw an error if list ID is empty","status":"passed","title":"should throw an error if list ID is empty","duration":0.14933300000001282,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createPeopleByCompanyListFilter"],"fullName":"Relationship Utilities createPeopleByCompanyListFilter should create a valid filter for people by company list","status":"passed","title":"should create a valid filter for people by company list","duration":0.5691669999999931,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createPeopleByCompanyListFilter"],"fullName":"Relationship Utilities createPeopleByCompanyListFilter should throw an error if list ID is empty","status":"passed","title":"should throw an error if list ID is empty","duration":0.14441699999997581,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createCompaniesByPeopleListFilter"],"fullName":"Relationship Utilities createCompaniesByPeopleListFilter should create a valid filter for companies by people list","status":"passed","title":"should create a valid filter for companies by people list","duration":0.8028750000000286,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createCompaniesByPeopleListFilter"],"fullName":"Relationship Utilities createCompaniesByPeopleListFilter should throw an error if list ID is empty","status":"passed","title":"should throw an error if list ID is empty","duration":0.15554200000002538,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createRecordsByNotesFilter"],"fullName":"Relationship Utilities createRecordsByNotesFilter should create a valid filter for records by note content","status":"passed","title":"should create a valid filter for records by note content","duration":0.3106250000000159,"failureMessages":[],"meta":{}},{"ancestorTitles":["Relationship Utilities","createRecordsByNotesFilter"],"fullName":"Relationship Utilities createRecordsByNotesFilter should throw an error if search text is empty","status":"passed","title":"should throw an error if search text is empty","duration":0.08191699999997581,"failureMessages":[],"meta":{}}],"startTime":1756513018686,"endTime":1756513018697.3105,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/relationship-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["response-formatter","formatSuccessResponse"],"fullName":"response-formatter formatSuccessResponse should create a simple success response","status":"passed","title":"should create a simple success response","duration":3.268957999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatSuccessResponse"],"fullName":"response-formatter formatSuccessResponse should include metadata if provided","status":"passed","title":"should include metadata if provided","duration":0.7034580000000119,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatListResponse"],"fullName":"response-formatter formatListResponse should format a list of items","status":"passed","title":"should format a list of items","duration":0.7695410000000038,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatListResponse"],"fullName":"response-formatter formatListResponse should handle empty list","status":"passed","title":"should handle empty list","duration":0.17549999999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatListResponse"],"fullName":"response-formatter formatListResponse should include pagination info if provided","status":"passed","title":"should include pagination info if provided","duration":0.263499999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatRecordResponse"],"fullName":"response-formatter formatRecordResponse should format a single record","status":"passed","title":"should format a single record","duration":0.28499999999996817,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatJsonResponse"],"fullName":"response-formatter formatJsonResponse should format data as JSON","status":"passed","title":"should format data as JSON","duration":0.5487090000000308,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatMarkdownResponse"],"fullName":"response-formatter formatMarkdownResponse should format markdown content","status":"passed","title":"should format markdown content","duration":0.19633399999997891,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatMultiPartResponse"],"fullName":"response-formatter formatMultiPartResponse should combine multiple content parts","status":"passed","title":"should combine multiple content parts","duration":10.081375000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatEmptyResponse"],"fullName":"response-formatter formatEmptyResponse should create a response with no content","status":"passed","title":"should create a response with no content","duration":0.344208999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatEmptyResponse"],"fullName":"response-formatter formatEmptyResponse should include metadata if provided","status":"passed","title":"should include metadata if provided","duration":0.15229199999998855,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatErrorResponse"],"fullName":"response-formatter formatErrorResponse should create a standardized error response","status":"passed","title":"should create a standardized error response","duration":0.3328329999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatErrorResponse"],"fullName":"response-formatter formatErrorResponse should include details if provided","status":"passed","title":"should include details if provided","duration":0.2175420000000372,"failureMessages":[],"meta":{}},{"ancestorTitles":["response-formatter","formatErrorResponse"],"fullName":"response-formatter formatErrorResponse should use default values if not provided","status":"passed","title":"should use default values if not provided","duration":0.09012500000000045,"failureMessages":[],"meta":{}}],"startTime":1756513017868,"endTime":1756513017886.3328,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/response-formatter.test.ts"},{"assertionResults":[{"ancestorTitles":["Structured Logging System","Basic Logging Functions"],"fullName":"Structured Logging System Basic Logging Functions debug logs with structured format","status":"passed","title":"debug logs with structured format","duration":3.7102079999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Basic Logging Functions"],"fullName":"Structured Logging System Basic Logging Functions info logs with structured format","status":"passed","title":"info logs with structured format","duration":0.3835420000000056,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Basic Logging Functions"],"fullName":"Structured Logging System Basic Logging Functions warn logs with structured format","status":"passed","title":"warn logs with structured format","duration":0.2855000000000132,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Basic Logging Functions"],"fullName":"Structured Logging System Basic Logging Functions error logs with structured format and error object","status":"passed","title":"error logs with structured format and error object","duration":2.649374999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Log Context Management"],"fullName":"Structured Logging System Log Context Management setLogContext and getLogContext work correctly","status":"passed","title":"setLogContext and getLogContext work correctly","duration":0.7963750000000118,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Log Context Management"],"fullName":"Structured Logging System Log Context Management clearLogContext clears the context","status":"passed","title":"clearLogContext clears the context","duration":0.20804100000000858,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Log Context Management"],"fullName":"Structured Logging System Log Context Management generateCorrelationId generates unique IDs","status":"passed","title":"generateCorrelationId generates unique IDs","duration":0.6921669999999835,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Log Context Management"],"fullName":"Structured Logging System Log Context Management logs include context information","status":"passed","title":"logs include context information","duration":0.45691700000000424,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","PerformanceTimer"],"fullName":"Structured Logging System PerformanceTimer tracks timing correctly","status":"passed","title":"tracks timing correctly","duration":12.242290999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Operation Logging Functions"],"fullName":"Structured Logging System Operation Logging Functions operationStart returns PerformanceTimer and logs start","status":"passed","title":"operationStart returns PerformanceTimer and logs start","duration":0.6137500000000102,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Operation Logging Functions"],"fullName":"Structured Logging System Operation Logging Functions operationSuccess logs success with duration","status":"passed","title":"operationSuccess logs success with duration","duration":0.2775000000000034,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Operation Logging Functions"],"fullName":"Structured Logging System Operation Logging Functions operationFailure logs failure with error and duration","status":"passed","title":"operationFailure logs failure with error and duration","duration":0.490415999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Scoped Logger"],"fullName":"Structured Logging System Scoped Logger createScopedLogger returns logger with pre-configured context","status":"passed","title":"createScopedLogger returns logger with pre-configured context","duration":0.23220799999998576,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Scoped Logger"],"fullName":"Structured Logging System Scoped Logger scoped logger operationStart works correctly","status":"passed","title":"scoped logger operationStart works correctly","duration":0.17141700000001947,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","withLogging Utility"],"fullName":"Structured Logging System withLogging Utility withLogging wraps successful operations","status":"passed","title":"withLogging wraps successful operations","duration":0.34375,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","withLogging Utility"],"fullName":"Structured Logging System withLogging Utility withLogging wraps failed operations","status":"passed","title":"withLogging wraps failed operations","duration":1.0016669999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","JSON Log Format"],"fullName":"Structured Logging System JSON Log Format outputs JSON format when LOG_FORMAT=json","status":"passed","title":"outputs JSON format when LOG_FORMAT=json","duration":0.5150830000000042,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Operation Types"],"fullName":"Structured Logging System Operation Types all operation types are available","status":"passed","title":"all operation types are available","duration":0.18141599999998448,"failureMessages":[],"meta":{}},{"ancestorTitles":["Structured Logging System","Operation Types"],"fullName":"Structured Logging System Operation Types logs include operation type when specified","status":"passed","title":"logs include operation type when specified","duration":0.1590840000000071,"failureMessages":[],"meta":{}}],"startTime":1756513014028,"endTime":1756513014053.5151,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/structured-logging.test.ts"},{"assertionResults":[{"ancestorTitles":["uri-parser","parseResourceUri"],"fullName":"uri-parser parseResourceUri should correctly parse valid URIs","status":"passed","title":"should correctly parse valid URIs","duration":5.391374999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","parseResourceUri"],"fullName":"uri-parser parseResourceUri should throw for invalid URI formats","status":"passed","title":"should throw for invalid URI formats","duration":1.5312089999999898,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","parseResourceUri"],"fullName":"uri-parser parseResourceUri should handle IDs with special characters","status":"passed","title":"should handle IDs with special characters","duration":0.4490420000000199,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","parseResourceUri"],"fullName":"uri-parser parseResourceUri should handle empty IDs but throw appropriate error","status":"passed","title":"should handle empty IDs but throw appropriate error","duration":0.6494579999999814,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","formatResourceUri"],"fullName":"uri-parser formatResourceUri should correctly format URIs","status":"passed","title":"should correctly format URIs","duration":0.542459000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","formatResourceUri"],"fullName":"uri-parser formatResourceUri should handle IDs with special characters","status":"passed","title":"should handle IDs with special characters","duration":0.22187500000001137,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","formatResourceUri"],"fullName":"uri-parser formatResourceUri should not validate ID format","status":"passed","title":"should not validate ID format","duration":0.13008300000001327,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","integration between parse and format"],"fullName":"uri-parser integration between parse and format should be symmetric for valid URIs","status":"passed","title":"should be symmetric for valid URIs","duration":0.11604099999999562,"failureMessages":[],"meta":{}},{"ancestorTitles":["uri-parser","integration between parse and format"],"fullName":"uri-parser integration between parse and format should round-trip multiple resource types","status":"passed","title":"should round-trip multiple resource types","duration":0.5939589999999839,"failureMessages":[],"meta":{}}],"startTime":1756513019907,"endTime":1756513019916.594,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/uri-parser.test.ts"},{"assertionResults":[{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate a simple object against a schema","status":"passed","title":"should validate a simple object against a schema","duration":1.7950409999999692,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should detect missing required properties","status":"passed","title":"should detect missing required properties","duration":0.347582999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate type mismatches","status":"passed","title":"should validate type mismatches","duration":0.2397919999999658,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate nested objects","status":"passed","title":"should validate nested objects","duration":0.20720799999998007,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate arrays","status":"passed","title":"should validate arrays","duration":0.2860839999999598,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate array items","status":"passed","title":"should validate array items","duration":0.17400000000003502,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate string constraints","status":"passed","title":"should validate string constraints","duration":0.23950000000002092,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate number constraints","status":"passed","title":"should validate number constraints","duration":0.2560829999999896,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateInput"],"fullName":"validation validateInput should validate enum values","status":"passed","title":"should validate enum values","duration":0.6033329999999637,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateRequest"],"fullName":"validation validateRequest should return null for valid input","status":"passed","title":"should return null for valid input","duration":0.3194169999999872,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation","validateRequest"],"fullName":"validation validateRequest should return formatted error for invalid input","status":"passed","title":"should return formatted error for invalid input","duration":1.3685419999999908,"failureMessages":[],"meta":{}}],"startTime":1756513017466,"endTime":1756513017472.3687,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should accept boolean values","status":"passed","title":"should accept boolean values","duration":1.8770000000000095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should convert string values to booleans","status":"passed","title":"should convert string values to booleans","duration":0.3397499999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should convert numeric values to booleans","status":"passed","title":"should convert numeric values to booleans","duration":0.1209159999999656,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should reject invalid boolean values","status":"passed","title":"should reject invalid boolean values","duration":0.15449999999998454,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should accept number values","status":"passed","title":"should accept number values","duration":0.26070800000002237,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should convert string values to numbers","status":"passed","title":"should convert string values to numbers","duration":0.1342499999999518,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should convert boolean values to numbers","status":"passed","title":"should convert boolean values to numbers","duration":0.31987500000002456,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should reject invalid number values","status":"passed","title":"should reject invalid number values","duration":0.09695800000002919,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should accept string values","status":"passed","title":"should accept string values","duration":1.8027500000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert number values to strings","status":"passed","title":"should convert number values to strings","duration":1.8870829999999614,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert boolean values to strings","status":"passed","title":"should convert boolean values to strings","duration":0.17333300000001373,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert Date objects to ISO strings","status":"passed","title":"should convert Date objects to ISO strings","duration":0.30366700000001856,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should accept Date objects","status":"passed","title":"should accept Date objects","duration":0.11158399999999347,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert ISO string dates","status":"passed","title":"should convert ISO string dates","duration":0.078708000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert timestamp numbers","status":"passed","title":"should convert timestamp numbers","duration":0.06679200000002083,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should reject invalid date values","status":"passed","title":"should reject invalid date values","duration":0.06395800000001373,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Array validation"],"fullName":"Attribute Validator validateAttributeValue Array validation should accept array values","status":"passed","title":"should accept array values","duration":0.09341699999998809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Array validation"],"fullName":"Attribute Validator validateAttributeValue Array validation should convert non-array values to arrays","status":"passed","title":"should convert non-array values to arrays","duration":0.07466599999997925,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Object validation"],"fullName":"Attribute Validator validateAttributeValue Object validation should accept object values","status":"passed","title":"should accept object values","duration":0.186333999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Object validation"],"fullName":"Attribute Validator validateAttributeValue Object validation should reject non-object values","status":"passed","title":"should reject non-object values","duration":0.06291599999997288,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should accept string values","status":"passed","title":"should accept string values","duration":0.07679100000001426,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should accept array of strings","status":"passed","title":"should accept array of strings","duration":0.05837500000001228,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should convert array of non-strings to array of strings","status":"passed","title":"should convert array of non-strings to array of strings","duration":0.060625000000015916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should accept string IDs","status":"passed","title":"should accept string IDs","duration":0.07762500000001182,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should extract record_id from objects","status":"passed","title":"should extract record_id from objects","duration":0.055375000000026375,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should extract id from objects as fallback","status":"passed","title":"should extract id from objects as fallback","duration":0.05212499999998954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should process arrays of records","status":"passed","title":"should process arrays of records","duration":0.06958299999996598,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should reject invalid record references","status":"passed","title":"should reject invalid record references","duration":0.064583999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Null/undefined handling"],"fullName":"Attribute Validator validateAttributeValue Null/undefined handling should always accept null values","status":"passed","title":"should always accept null values","duration":0.0791250000000332,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Null/undefined handling"],"fullName":"Attribute Validator validateAttributeValue Null/undefined handling should always accept undefined values","status":"passed","title":"should always accept undefined values","duration":0.049458000000015545,"failureMessages":[],"meta":{}}],"startTime":1756513018585,"endTime":1756513018595.079,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/validators/attribute-validator.test.ts"},{"assertionResults":[{"ancestorTitles":["Enhanced Company Validator","validateAttributeTypes"],"fullName":"Enhanced Company Validator validateAttributeTypes should validate and convert attributes based on their types","status":"passed","title":"should validate and convert attributes based on their types","duration":7.011833999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeTypes"],"fullName":"Enhanced Company Validator validateAttributeTypes should handle null values correctly","status":"passed","title":"should handle null values correctly","duration":0.6950420000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeTypes"],"fullName":"Enhanced Company Validator validateAttributeTypes should throw an error for invalid attribute values","status":"passed","title":"should throw an error for invalid attribute values","duration":0.8467089999999757,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeTypes"],"fullName":"Enhanced Company Validator validateAttributeTypes should proceed with original value if type info cannot be determined","status":"passed","title":"should proceed with original value if type info cannot be determined","duration":0.5060410000000388,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateCreate"],"fullName":"Enhanced Company Validator validateCreate should validate required fields and enhance with type validation","status":"passed","title":"should validate required fields and enhance with type validation","duration":0.9472499999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateCreate"],"fullName":"Enhanced Company Validator validateCreate should throw MissingCompanyFieldError if name is missing","status":"passed","title":"should throw MissingCompanyFieldError if name is missing","duration":0.2879159999999956,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateUpdate"],"fullName":"Enhanced Company Validator validateUpdate should validate company ID and enhance with type validation","status":"passed","title":"should validate company ID and enhance with type validation","duration":0.36737499999998136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateUpdate"],"fullName":"Enhanced Company Validator validateUpdate should throw InvalidCompanyDataError if company ID is invalid","status":"passed","title":"should throw InvalidCompanyDataError if company ID is invalid","duration":0.176667000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeUpdate"],"fullName":"Enhanced Company Validator validateAttributeUpdate should validate a single attribute and return converted value","status":"passed","title":"should validate a single attribute and return converted value","duration":0.6878330000000119,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeUpdate"],"fullName":"Enhanced Company Validator validateAttributeUpdate should throw InvalidCompanyDataError for an invalid company ID","status":"passed","title":"should throw InvalidCompanyDataError for an invalid company ID","duration":0.21387499999997317,"failureMessages":[],"meta":{}},{"ancestorTitles":["Enhanced Company Validator","validateAttributeUpdate"],"fullName":"Enhanced Company Validator validateAttributeUpdate should throw InvalidCompanyDataError for an invalid attribute name","status":"passed","title":"should throw InvalidCompanyDataError for an invalid attribute name","duration":0.15287499999999454,"failureMessages":[],"meta":{}}],"startTime":1756513016756,"endTime":1756513016768.2139,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/validators/company-validator-enhanced.test.ts"},{"assertionResults":[{"ancestorTitles":["Company Validator","validateAttributeTypes"],"fullName":"Company Validator validateAttributeTypes should validate and convert attributes based on their types","status":"passed","title":"should validate and convert attributes based on their types","duration":2.4938750000000027,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Validator","validateAttributeTypes"],"fullName":"Company Validator validateAttributeTypes should handle null values correctly","status":"passed","title":"should handle null values correctly","duration":0.34158400000001166,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Validator","validateAttributeTypes"],"fullName":"Company Validator validateAttributeTypes should throw an error for invalid attribute values","status":"passed","title":"should throw an error for invalid attribute values","duration":0.5488339999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Validator","validateAttributeTypes"],"fullName":"Company Validator validateAttributeTypes should proceed with original value if type info cannot be determined","status":"passed","title":"should proceed with original value if type info cannot be determined","duration":0.23945799999995643,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Validator","validateAttributeUpdate integration"],"fullName":"Company Validator validateAttributeUpdate integration should validate and convert a single attribute value","status":"passed","title":"should validate and convert a single attribute value","duration":0.4739579999999819,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Validator","validateAttributeUpdate integration"],"fullName":"Company Validator validateAttributeUpdate integration should throw an error for invalid attribute value","status":"passed","title":"should throw an error for invalid attribute value","duration":0.44229100000001154,"failureMessages":[],"meta":{}}],"startTime":1756513017737,"endTime":1756513017742.4424,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/validators/company-validator.test.ts"},{"assertionResults":[{"ancestorTitles":["PersonValidator.validateCreate"],"fullName":"PersonValidator.validateCreate should reject duplicate email addresses","status":"passed","title":"should reject duplicate email addresses","duration":15.929665999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["PersonValidator.validateCreate"],"fullName":"PersonValidator.validateCreate should resolve company name to record id","status":"passed","title":"should resolve company name to record id","duration":3.5667079999999487,"failureMessages":[],"meta":{}},{"ancestorTitles":["PersonValidator.validateCreate"],"fullName":"PersonValidator.validateCreate should throw error when company name not found","status":"passed","title":"should throw error when company name not found","duration":0.6871670000000449,"failureMessages":[],"meta":{}}],"startTime":1756513015122,"endTime":1756513015141.6873,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/validators/person-validator-enhanced.test.ts"},{"assertionResults":[{"ancestorTitles":["Core Workflows – Usability Validation"],"fullName":"Core Workflows – Usability Validation evaluates usability metrics with fresh-agent scenarios","status":"passed","title":"evaluates usability metrics with fresh-agent scenarios","duration":591.7379999999999,"failureMessages":[],"meta":{}}],"startTime":1756513013645,"endTime":1756513014236.738,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/core-workflows-usability.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Shared Test Data Setup"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Shared Test Data Setup should create test companies for task and note testing","status":"passed","title":"should create test companies for task and note testing","duration":1501.7048750000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Shared Test Data Setup"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Shared Test Data Setup should create test people for task assignment and note management","status":"passed","title":"should create test people for task assignment and note management","duration":1334.219459,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Creation and Basic Operations"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Creation and Basic Operations should create a basic task","status":"passed","title":"should create a basic task","duration":1.9973329999993439,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Creation and Basic Operations"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Creation and Basic Operations should create task with assignee","status":"passed","title":"should create task with assignee","duration":1.7301250000000437,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Creation and Basic Operations"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Creation and Basic Operations should create task linked to company record","status":"passed","title":"should create task linked to company record","duration":2.490791999999601,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Creation and Basic Operations"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Creation and Basic Operations should create high priority task","status":"passed","title":"should create high priority task","duration":3.769290999999612,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Updates and Modifications"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Updates and Modifications should update task status","status":"passed","title":"should update task status","duration":2.7988329999998314,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Updates and Modifications"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Updates and Modifications should update task assignee","status":"passed","title":"should update task assignee","duration":0.9404999999997017,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Updates and Modifications"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Updates and Modifications should update multiple task fields simultaneously","status":"passed","title":"should update multiple task fields simultaneously","duration":0.9930000000003929,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Deletion and Cleanup"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Deletion and Cleanup should delete individual tasks","status":"passed","title":"should delete individual tasks","duration":0.8375420000002123,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Tasks Management - Core Operations","Task Deletion and Cleanup"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Tasks Management - Core Operations Task Deletion and Cleanup should handle deletion of non-existent task gracefully","status":"passed","title":"should handle deletion of non-existent task gracefully","duration":6.7182080000002316,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Company Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Company Notes Management should create a company note with basic content","status":"passed","title":"should create a company note with basic content","duration":1.1037919999998849,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Company Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Company Notes Management should retrieve company notes","status":"failed","title":"should retrieve company notes","duration":6.808542000000671,"failureMessages":["AssertionError: Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality\n    at Function.expectMcpSuccess (/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/utils/assertions.ts:302:71)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/core-workflows.e2e.test.ts:584:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Company Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Company Notes Management should create company note with markdown content","status":"passed","title":"should create company note with markdown content","duration":0.796332999999322,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Company Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Company Notes Management should handle company note creation with URI format","status":"passed","title":"should handle company note creation with URI format","duration":0.5216250000003129,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Person Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Person Notes Management should create a person note with basic content","status":"passed","title":"should create a person note with basic content","duration":0.46520799999962037,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Person Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Person Notes Management should retrieve person notes","status":"failed","title":"should retrieve person notes","duration":0.6970830000000205,"failureMessages":["AssertionError: Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality\n    at Function.expectMcpSuccess (/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/utils/assertions.ts:302:71)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/core-workflows.e2e.test.ts:745:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Person Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Person Notes Management should create person note with technical content","status":"passed","title":"should create person note with technical content","duration":0.5452080000004571,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Notes Management - CRUD Operations","Person Notes Management"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Notes Management - CRUD Operations Person Notes Management should create person note with markdown formatting","status":"passed","title":"should create person note with markdown formatting","duration":0.5056249999997817,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Cross-Resource Integration Workflows"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Cross-Resource Integration Workflows should create task and note for the same company record","status":"passed","title":"should create task and note for the same company record","duration":1.0718749999996362,"failureMessages":[],"meta":{}},{"ancestorTitles":["Core Workflows E2E Tests - Tasks & Notes","Cross-Resource Integration Workflows"],"fullName":"Core Workflows E2E Tests - Tasks & Notes Cross-Resource Integration Workflows should demonstrate task-note workflow integration","status":"passed","title":"should demonstrate task-note workflow integration","duration":0.5524580000001151,"failureMessages":[],"meta":{}}],"startTime":1756513007717,"endTime":1756513010589.5525,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/core-workflows.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Critical Error Handling E2E – Auth & Authorization"],"fullName":"Critical Error Handling E2E – Auth & Authorization handles authentication-like failures gracefully","status":"passed","title":"handles authentication-like failures gracefully","duration":36.4095420000001,"failureMessages":[],"meta":{}}],"startTime":1756513017637,"endTime":1756513017673.4094,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-auth.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should handle missing required parameters gracefully","status":"passed","title":"should handle missing required parameters gracefully","duration":4.076666999999816,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should validate resource_type parameter values","status":"passed","title":"should validate resource_type parameter values","duration":0.8061250000000655,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should handle invalid record IDs gracefully","status":"failed","title":"should handle invalid record IDs gracefully","duration":6.281082999999853,"failureMessages":["AssertionError: Expected MCP tool response to indicate error: expected false to be true // Object.is equality\n    at Function.expectMcpError (/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/utils/assertions.ts:365:7)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-critical.e2e.test.ts:187:21\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should validate limit parameters","status":"passed","title":"should validate limit parameters","duration":1.0417919999999867,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should handle malformed filter objects","status":"passed","title":"should handle malformed filter objects","duration":2.19854099999975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should validate email format in person creation","status":"passed","title":"should validate email format in person creation","duration":5.480250000000069,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Parameter Validation and Data Format Errors"],"fullName":"Critical Error Handling E2E Tests Parameter Validation and Data Format Errors should handle extremely long text values","status":"passed","title":"should handle extremely long text values","duration":565.209542,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Resource Not Found Scenarios"],"fullName":"Critical Error Handling E2E Tests Resource Not Found Scenarios should handle company not found errors","status":"failed","title":"should handle company not found errors","duration":2.9894169999997757,"failureMessages":["AssertionError: Expected MCP tool response to indicate error: expected false to be true // Object.is equality\n    at Function.expectMcpError (/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/utils/assertions.ts:365:7)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-critical.e2e.test.ts:261:21\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Resource Not Found Scenarios"],"fullName":"Critical Error Handling E2E Tests Resource Not Found Scenarios should handle person not found errors","status":"passed","title":"should handle person not found errors","duration":0.9325840000001335,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Resource Not Found Scenarios"],"fullName":"Critical Error Handling E2E Tests Resource Not Found Scenarios should handle task not found errors","status":"failed","title":"should handle task not found errors","duration":2.174999999999727,"failureMessages":["AssertionError: expected 'Error executing tool \\'update-record\\…' to match /(not found|does not exist|invalid|ca…/i\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-critical.e2e.test.ts:292:30\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Resource Not Found Scenarios"],"fullName":"Critical Error Handling E2E Tests Resource Not Found Scenarios should handle list not found errors","status":"passed","title":"should handle list not found errors","duration":1.61850000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Resource Not Found Scenarios"],"fullName":"Critical Error Handling E2E Tests Resource Not Found Scenarios should handle note not found errors","status":"passed","title":"should handle note not found errors","duration":0.9727090000001226,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Cross-Tool Error Propagation"],"fullName":"Critical Error Handling E2E Tests Cross-Tool Error Propagation should handle errors when linking non-existent records","status":"passed","title":"should handle errors when linking non-existent records","duration":0.9480410000001029,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Cross-Tool Error Propagation"],"fullName":"Critical Error Handling E2E Tests Cross-Tool Error Propagation should handle cascading tool failures","status":"passed","title":"should handle cascading tool failures","duration":1.3475829999997586,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Cross-Tool Error Propagation"],"fullName":"Critical Error Handling E2E Tests Cross-Tool Error Propagation should handle concurrent operation conflicts","status":"passed","title":"should handle concurrent operation conflicts","duration":7.857958999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E Tests","Cross-Tool Error Propagation"],"fullName":"Critical Error Handling E2E Tests Cross-Tool Error Propagation should handle batch operation partial failures","status":"passed","title":"should handle batch operation partial failures","duration":1.819250000000011,"failureMessages":[],"meta":{}}],"startTime":1756513009338,"endTime":1756513009944.8193,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-critical.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Critical Error Handling E2E – Data Consistency and Recovery"],"fullName":"Critical Error Handling E2E – Data Consistency and Recovery should handle incomplete transaction scenarios","status":"passed","title":"should handle incomplete transaction scenarios","duration":764.6443330000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E – Data Consistency and Recovery"],"fullName":"Critical Error Handling E2E – Data Consistency and Recovery should handle error recovery gracefully","status":"passed","title":"should handle error recovery gracefully","duration":14.631374999999935,"failureMessages":[],"meta":{}}],"startTime":1756513010429,"endTime":1756513011207.6313,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-data-recovery.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Critical Error Handling E2E – Error Message Consistency"],"fullName":"Critical Error Handling E2E – Error Message Consistency should provide consistent error formats across tools","status":"passed","title":"should provide consistent error formats across tools","duration":31.219375000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["Critical Error Handling E2E – Error Message Consistency"],"fullName":"Critical Error Handling E2E – Error Message Consistency should provide helpful error messages","status":"passed","title":"should provide helpful error messages","duration":3.981875000000059,"failureMessages":[],"meta":{}}],"startTime":1756513013422,"endTime":1756513013457.982,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-message-consistency.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Critical Error Handling E2E – Rate Limiting"],"fullName":"Critical Error Handling E2E – Rate Limiting handles rate limiting scenarios (graceful)","status":"passed","title":"handles rate limiting scenarios (graceful)","duration":46.236332999999945,"failureMessages":[],"meta":{}}],"startTime":1756513014902,"endTime":1756513014948.2363,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling-rate-limit.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Infrastructure Validation - Smoke Tests","System Health Checks"],"fullName":"Infrastructure Validation - Smoke Tests System Health Checks should validate test environment setup","status":"passed","title":"should validate test environment setup","duration":13.160291000000143,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","System Health Checks"],"fullName":"Infrastructure Validation - Smoke Tests System Health Checks should validate basic API connectivity","status":"passed","title":"should validate basic API connectivity","duration":3.749917000000096,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Configuration Smoke Tests"],"fullName":"Infrastructure Validation - Smoke Tests Configuration Smoke Tests should load E2E configuration successfully","status":"passed","title":"should load E2E configuration successfully","duration":0.22241699999995035,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Configuration Smoke Tests"],"fullName":"Infrastructure Validation - Smoke Tests Configuration Smoke Tests should validate critical configuration fields","status":"passed","title":"should validate critical configuration fields","duration":0.271541999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Configuration Smoke Tests"],"fullName":"Infrastructure Validation - Smoke Tests Configuration Smoke Tests should generate unique test identifiers","status":"passed","title":"should generate unique test identifiers","duration":0.46641700000009223,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Test Data Factory Validation"],"fullName":"Infrastructure Validation - Smoke Tests Test Data Factory Validation should create valid test company data","status":"failed","title":"should create valid test company data","duration":1.003458000000137,"failureMessages":["AssertionError: expected undefined to be defined\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/infrastructure-validation.e2e.test.ts:112:31\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Test Data Factory Validation"],"fullName":"Infrastructure Validation - Smoke Tests Test Data Factory Validation should create valid test person data","status":"failed","title":"should create valid test person data","duration":1.785584000000199,"failureMessages":["AssertionError: expected 'e2e_test_person_1756513007720_1ybo7r.…' to contain '@e2e-test.example.com'\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/infrastructure-validation.e2e.test.ts:125:41\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Test Data Factory Validation"],"fullName":"Infrastructure Validation - Smoke Tests Test Data Factory Validation should validate test data integrity","status":"failed","title":"should validate test data integrity","duration":0.3113330000001042,"failureMessages":["TypeError: E2ETestDataValidator.validateCompany is not a function\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/infrastructure-validation.e2e.test.ts:137:54\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","E2E Assertions Smoke Tests"],"fullName":"Infrastructure Validation - Smoke Tests E2E Assertions Smoke Tests should validate assertion utilities","status":"failed","title":"should validate assertion utilities","duration":1.6466670000002068,"failureMessages":["AssertionError: expected [Function] to not throw an error but 'AssertionError: Expected MCP tool res…' was thrown\n    at Proxy.<anonymous> (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/expect/dist/index.js:1420:16)\n    at Proxy.<anonymous> (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/chai/chai.js:1706:25)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/infrastructure-validation.e2e.test.ts:162:14\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Infrastructure Integration"],"fullName":"Infrastructure Validation - Smoke Tests Infrastructure Integration should validate end-to-end test pipeline readiness","status":"passed","title":"should validate end-to-end test pipeline readiness","duration":5.210499999999911,"failureMessages":[],"meta":{}},{"ancestorTitles":["Infrastructure Validation - Smoke Tests","Infrastructure Integration"],"fullName":"Infrastructure Validation - Smoke Tests Infrastructure Integration should validate minimal tool integration","status":"passed","title":"should validate minimal tool integration","duration":24.27800000000002,"failureMessages":[],"meta":{}}],"startTime":1756513007701,"endTime":1756513007753.278,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/infrastructure-validation.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Integration Boundaries E2E Tests","Cross-System API Integration"],"fullName":"Integration Boundaries E2E Tests Cross-System API Integration should handle concurrent cross-resource operations","status":"passed","title":"should handle concurrent cross-resource operations","duration":6420.4434169999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","Cross-System API Integration"],"fullName":"Integration Boundaries E2E Tests Cross-System API Integration should handle API rate limiting gracefully","status":"passed","title":"should handle API rate limiting gracefully","duration":76.19745800000055,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","Cross-System API Integration"],"fullName":"Integration Boundaries E2E Tests Cross-System API Integration should validate cross-resource data consistency","status":"passed","title":"should validate cross-resource data consistency","duration":904.8783750000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","System Integration Edge Cases"],"fullName":"Integration Boundaries E2E Tests System Integration Edge Cases should handle malformed request recovery","status":"passed","title":"should handle malformed request recovery","duration":56.88195799999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","System Integration Edge Cases"],"fullName":"Integration Boundaries E2E Tests System Integration Edge Cases should handle resource type boundaries","status":"passed","title":"should handle resource type boundaries","duration":8.59441699999934,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","System Integration Edge Cases"],"fullName":"Integration Boundaries E2E Tests System Integration Edge Cases should validate tool boundary interactions","status":"passed","title":"should validate tool boundary interactions","duration":14.908457999999882,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","External Dependency Handling"],"fullName":"Integration Boundaries E2E Tests External Dependency Handling should handle network timeout scenarios","status":"passed","title":"should handle network timeout scenarios","duration":9.373708000000079,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","External Dependency Handling"],"fullName":"Integration Boundaries E2E Tests External Dependency Handling should validate API version compatibility","status":"passed","title":"should validate API version compatibility","duration":10.34875000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","External Dependency Handling"],"fullName":"Integration Boundaries E2E Tests External Dependency Handling should handle service degradation gracefully","status":"passed","title":"should handle service degradation gracefully","duration":190.43637500000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","Integration Recovery and Resilience"],"fullName":"Integration Boundaries E2E Tests Integration Recovery and Resilience should demonstrate error recovery patterns","status":"passed","title":"should demonstrate error recovery patterns","duration":35.83520899999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["Integration Boundaries E2E Tests","Integration Recovery and Resilience"],"fullName":"Integration Boundaries E2E Tests Integration Recovery and Resilience should validate system state consistency after errors","status":"passed","title":"should validate system state consistency after errors","duration":11.674541999999747,"failureMessages":[],"meta":{}}],"startTime":1756513008121,"endTime":1756513015862.6746,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/integration-boundaries.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Record Management E2E – CRUD"],"fullName":"Record Management E2E – CRUD creates company and person records","status":"passed","title":"creates company and person records","duration":1450.976917,"failureMessages":[],"meta":{}}],"startTime":1756513010760,"endTime":1756513012210.9768,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/record-management-crud.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Record Management E2E – Relationships"],"fullName":"Record Management E2E – Relationships validates record relationships across types","status":"passed","title":"validates record relationships across types","duration":1320.561,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E – Relationships"],"fullName":"Record Management E2E – Relationships validates data consistency across operations","status":"passed","title":"validates data consistency across operations","duration":914.1767919999998,"failureMessages":[],"meta":{}}],"startTime":1756513008125,"endTime":1756513010360.1768,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/record-management-relationships.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Record Management E2E – Search"],"fullName":"Record Management E2E – Search searches records across resource types","status":"passed","title":"searches records across resource types","duration":7312.853333999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E – Search"],"fullName":"Record Management E2E – Search filters tasks with pagination","status":"passed","title":"filters tasks with pagination","duration":4.927375000000211,"failureMessages":[],"meta":{}}],"startTime":1756513008109,"endTime":1756513015427.9275,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/record-management-search.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Universal Record Operations"],"fullName":"Record Management E2E Tests - Universal Operations Universal Record Operations should create records across different resource types","status":"passed","title":"should create records across different resource types","duration":1463.4004999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Universal Record Operations"],"fullName":"Record Management E2E Tests - Universal Operations Universal Record Operations should retrieve record details across resource types","status":"failed","title":"should retrieve record details across resource types","duration":12.00545800000009,"failureMessages":["AssertionError: Expected MCP tool response to be successful - Response has error flag: expected true to be false // Object.is equality\n    at Function.expectMcpSuccess (/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/utils/assertions.ts:302:71)\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/record-management.e2e.test.ts:218:25\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Universal Record Operations"],"fullName":"Record Management E2E Tests - Universal Operations Universal Record Operations should update records with universal patterns","status":"passed","title":"should update records with universal patterns","duration":4.900040999999874,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Universal Record Operations"],"fullName":"Record Management E2E Tests - Universal Operations Universal Record Operations should handle bulk record operations","status":"passed","title":"should handle bulk record operations","duration":2182.0691669999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Advanced Task Management Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Advanced Task Management Workflows should filter tasks with pagination","status":"passed","title":"should filter tasks with pagination","duration":7720.600209,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Advanced Task Management Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Advanced Task Management Workflows should manage task relationships with records","status":"passed","title":"should manage task relationships with records","duration":1.5240000000012515,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Advanced Task Management Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Advanced Task Management Workflows should handle task lifecycle workflows","status":"passed","title":"should handle task lifecycle workflows","duration":5.797416000001249,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Advanced Task Management Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Advanced Task Management Workflows should validate task data consistency","status":"passed","title":"should validate task data consistency","duration":5.688000000000102,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Notes Validation Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Notes Validation Workflows should validate note format and content","status":"passed","title":"should validate note format and content","duration":657.4074999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Notes Validation Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Notes Validation Workflows should validate cross-resource note operations","status":"passed","title":"should validate cross-resource note operations","duration":7.939333000000261,"failureMessages":[],"meta":{}},{"ancestorTitles":["Record Management E2E Tests - Universal Operations","Notes Validation Workflows"],"fullName":"Record Management E2E Tests - Universal Operations Notes Validation Workflows should handle note retrieval and pagination validation","status":"passed","title":"should handle note retrieval and pagination validation","duration":2.693457999999737,"failureMessages":[],"meta":{}}],"startTime":1756513007711,"endTime":1756513019775.6934,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/record-management.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Regression Prevention – Relationships & Workflows"],"fullName":"Regression Prevention – Relationships & Workflows preserves core CRUD workflow integrity","status":"passed","title":"preserves core CRUD workflow integrity","duration":817.427916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Relationships & Workflows"],"fullName":"Regression Prevention – Relationships & Workflows preserves cross-resource relationship integrity","status":"passed","title":"preserves cross-resource relationship integrity","duration":3739.349208,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Relationships & Workflows"],"fullName":"Regression Prevention – Relationships & Workflows preserves data validation rules","status":"passed","title":"preserves data validation rules","duration":149.18141699999978,"failureMessages":[],"meta":{}}],"startTime":1756513010753,"endTime":1756513015459.1814,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/regression-prevention-relationships-workflows.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability handles malformed JSON-like queries gracefully","status":"passed","title":"handles malformed JSON-like queries gracefully","duration":13.531499999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability handles boundary value conditions for search safely","status":"passed","title":"handles boundary value conditions for search safely","duration":10.09899999999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability prevents infinite loops and long-running searches","status":"passed","title":"prevents infinite loops and long-running searches","duration":6.956874999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability handles resource exhaustion gracefully","status":"passed","title":"handles resource exhaustion gracefully","duration":29.49533400000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability maintains system stability under error conditions","status":"passed","title":"maintains system stability under error conditions","duration":16.779791000000046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Regression Prevention – Search & Stability"],"fullName":"Regression Prevention – Search & Stability preserves API contract consistency (search + details)","status":"passed","title":"preserves API contract consistency (search + details)","duration":1.9201249999999845,"failureMessages":[],"meta":{}}],"startTime":1756513012751,"endTime":1756513012829.9202,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/regression-prevention-search-stability.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Smoke Test Suite - Fast Validation","System Health Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation System Health Smoke Tests should validate basic API connectivity","status":"passed","title":"should validate basic API connectivity","duration":5.100250000000074,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","System Health Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation System Health Smoke Tests should validate test environment setup","status":"passed","title":"should validate test environment setup","duration":21.068750000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","System Health Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation System Health Smoke Tests should validate core resource types accessibility","status":"passed","title":"should validate core resource types accessibility","duration":6881.351625,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Core Tool Functionality Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Core Tool Functionality Smoke Tests should validate universal tool basic operations","status":"passed","title":"should validate universal tool basic operations","duration":50.180999999999585,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Core Tool Functionality Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Core Tool Functionality Smoke Tests should validate task tool basic operations","status":"passed","title":"should validate task tool basic operations","duration":7.333208999999442,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Core Tool Functionality Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Core Tool Functionality Smoke Tests should validate notes tool basic operations","status":"passed","title":"should validate notes tool basic operations","duration":1.9810410000000047,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Essential Workflow Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Essential Workflow Smoke Tests should validate basic record creation workflow","status":"passed","title":"should validate basic record creation workflow","duration":1085.8131670000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Essential Workflow Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Essential Workflow Smoke Tests should validate basic search workflow","status":"passed","title":"should validate basic search workflow","duration":41.716167000000496,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Essential Workflow Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Essential Workflow Smoke Tests should validate basic error handling workflow","status":"passed","title":"should validate basic error handling workflow","duration":5.387709000000541,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Quick Regression Detection"],"fullName":"Smoke Test Suite - Fast Validation Quick Regression Detection should detect API response structure regressions","status":"passed","title":"should detect API response structure regressions","duration":17.055334000000585,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Quick Regression Detection"],"fullName":"Smoke Test Suite - Fast Validation Quick Regression Detection should detect tool registration regressions","status":"passed","title":"should detect tool registration regressions","duration":4.956499999998414,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Quick Regression Detection"],"fullName":"Smoke Test Suite - Fast Validation Quick Regression Detection should detect basic functionality regressions","status":"passed","title":"should detect basic functionality regressions","duration":24.198166999998648,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Performance Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Performance Smoke Tests should validate acceptable response times","status":"passed","title":"should validate acceptable response times","duration":14.991125000000466,"failureMessages":[],"meta":{}},{"ancestorTitles":["Smoke Test Suite - Fast Validation","Performance Smoke Tests"],"fullName":"Smoke Test Suite - Fast Validation Performance Smoke Tests should validate system remains responsive under load","status":"passed","title":"should validate system remains responsive under load","duration":126.2678339999984,"failureMessages":[],"meta":{}}],"startTime":1756513007736,"endTime":1756513016025.2678,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/smoke-test-suite.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should handle properly wrapped arguments (standard MCP format) with universal tools","status":"passed","title":"should handle properly wrapped arguments (standard MCP format) with universal tools","duration":1.479249999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should handle unwrapped arguments (Issue #344 format) with universal tools","status":"passed","title":"should handle unwrapped arguments (Issue #344 format) with universal tools","duration":0.22299999999995634,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should handle tools with minimal arguments using universal tools","status":"passed","title":"should handle tools with minimal arguments using universal tools","duration":0.2540000000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should handle multiple unwrapped arguments with universal tools","status":"passed","title":"should handle multiple unwrapped arguments with universal tools","duration":0.20841600000005656,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should preserve properly wrapped arguments without modification using universal tools","status":"passed","title":"should preserve properly wrapped arguments without modification using universal tools","duration":0.6645409999999856,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Argument Format Normalization"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Argument Format Normalization should wrap loose arguments correctly using universal tools","status":"passed","title":"should wrap loose arguments correctly using universal tools","duration":0.31225000000006276,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Edge Cases"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Edge Cases should handle request with only name parameter using universal tools","status":"passed","title":"should handle request with only name parameter using universal tools","duration":0.14829199999996945,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Edge Cases"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Edge Cases should handle malformed requests gracefully using universal tools","status":"passed","title":"should handle malformed requests gracefully using universal tools","duration":0.11387500000000728,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Edge Cases"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Edge Cases should not wrap arguments if they already exist using universal tools","status":"passed","title":"should not wrap arguments if they already exist using universal tools","duration":1.1997089999999844,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Edge Cases"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Edge Cases should validate request structure","status":"passed","title":"should validate request structure","duration":0.48929199999997763,"failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Tool Argument Compatibility (Issue #344)","Edge Cases"],"fullName":"MCP Tool Argument Compatibility (Issue #344) Edge Cases should reject oversized arguments using universal tools","status":"passed","title":"should reject oversized arguments using universal tools","duration":11.055082999999968,"failureMessages":[],"meta":{}}],"startTime":1756513013191,"endTime":1756513013208.0552,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tools/argument-compatibility.test.ts"},{"assertionResults":[{"ancestorTitles":["Advanced Search Companies Fix","Valid filter formats"],"fullName":"Advanced Search Companies Fix Valid filter formats should handle a simple name filter","status":"passed","title":"should handle a simple name filter","duration":4.987041999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Valid filter formats"],"fullName":"Advanced Search Companies Fix Valid filter formats should handle OR logic with matchAny: true","status":"passed","title":"should handle OR logic with matchAny: true","duration":2.4244169999999485,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Valid filter formats"],"fullName":"Advanced Search Companies Fix Valid filter formats should handle AND logic by default","status":"passed","title":"should handle AND logic by default","duration":1.456957999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Invalid filter formats"],"fullName":"Advanced Search Companies Fix Invalid filter formats should handle missing filters object with clear error","status":"skipped","title":"should handle missing filters object with clear error","failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Invalid filter formats"],"fullName":"Advanced Search Companies Fix Invalid filter formats should handle empty filters object with clear error","status":"skipped","title":"should handle empty filters object with clear error","failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Invalid filter formats"],"fullName":"Advanced Search Companies Fix Invalid filter formats should handle non-array filters with clear error","status":"skipped","title":"should handle non-array filters with clear error","failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Invalid filter formats"],"fullName":"Advanced Search Companies Fix Invalid filter formats should handle invalid filter structure with clear error","status":"skipped","title":"should handle invalid filter structure with clear error","failureMessages":[],"meta":{}},{"ancestorTitles":["Advanced Search Companies Fix","Invalid filter formats"],"fullName":"Advanced Search Companies Fix Invalid filter formats should handle invalid condition with clear error","status":"skipped","title":"should handle invalid condition with clear error","failureMessages":[],"meta":{}}],"startTime":1756513019182,"endTime":1756513019190.457,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/legacy/objects/advanced-search-fix.test.js"},{"assertionResults":[{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should validate native boolean values","status":"passed","title":"should validate native boolean values","duration":2.680833000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should convert string representations to boolean values","status":"passed","title":"should convert string representations to boolean values","duration":0.5898329999999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should convert numeric values to boolean values","status":"passed","title":"should convert numeric values to boolean values","duration":0.12658400000003667,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Boolean validation"],"fullName":"Attribute Validator validateAttributeValue Boolean validation should reject unconvertible values with appropriate error messages","status":"passed","title":"should reject unconvertible values with appropriate error messages","duration":0.36258400000002666,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should validate native number values","status":"passed","title":"should validate native number values","duration":0.20420799999999417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should convert numeric strings to numbers","status":"passed","title":"should convert numeric strings to numbers","duration":0.15916600000002745,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should convert boolean values to numbers","status":"passed","title":"should convert boolean values to numbers","duration":0.09704199999998764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Number validation"],"fullName":"Attribute Validator validateAttributeValue Number validation should reject unconvertible values with appropriate error messages","status":"passed","title":"should reject unconvertible values with appropriate error messages","duration":0.25266700000003084,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should validate native string values","status":"passed","title":"should validate native string values","duration":0.7687499999999545,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert number values to strings","status":"passed","title":"should convert number values to strings","duration":0.29445900000001757,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert boolean values to strings","status":"passed","title":"should convert boolean values to strings","duration":0.2994579999999587,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should convert date objects to ISO strings","status":"passed","title":"should convert date objects to ISO strings","duration":0.31683299999997416,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","String validation"],"fullName":"Attribute Validator validateAttributeValue String validation should try to convert objects to JSON strings","status":"passed","title":"should try to convert objects to JSON strings","duration":0.08083299999998417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should validate date objects","status":"passed","title":"should validate date objects","duration":0.09545800000000781,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should reject invalid date objects","status":"passed","title":"should reject invalid date objects","duration":0.07470900000004121,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert ISO date strings to dates","status":"passed","title":"should convert ISO date strings to dates","duration":0.07079199999998309,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert various date string formats","status":"passed","title":"should convert various date string formats","duration":0.2221670000000131,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert Unix timestamps (milliseconds) to date strings","status":"passed","title":"should convert Unix timestamps (milliseconds) to date strings","duration":0.06662499999998772,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should convert Unix timestamps (seconds) to date strings","status":"passed","title":"should convert Unix timestamps (seconds) to date strings","duration":0.06037500000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Date validation"],"fullName":"Attribute Validator validateAttributeValue Date validation should reject unconvertible values with appropriate error messages","status":"passed","title":"should reject unconvertible values with appropriate error messages","duration":0.24250000000000682,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Array validation"],"fullName":"Attribute Validator validateAttributeValue Array validation should validate native array values","status":"passed","title":"should validate native array values","duration":0.10195899999996527,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Array validation"],"fullName":"Attribute Validator validateAttributeValue Array validation should convert non-array values to single-item arrays","status":"passed","title":"should convert non-array values to single-item arrays","duration":0.08995799999996734,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Object validation"],"fullName":"Attribute Validator validateAttributeValue Object validation should validate plain object values","status":"passed","title":"should validate plain object values","duration":0.08745900000002393,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Object validation"],"fullName":"Attribute Validator validateAttributeValue Object validation should reject non-object values","status":"passed","title":"should reject non-object values","duration":0.15008399999999256,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should validate string option values","status":"passed","title":"should validate string option values","duration":0.08191599999997834,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should validate array of option values","status":"passed","title":"should validate array of option values","duration":0.06112500000000409,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Select validation"],"fullName":"Attribute Validator validateAttributeValue Select validation should convert non-string values to strings in arrays","status":"passed","title":"should convert non-string values to strings in arrays","duration":0.055999999999983174,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should validate string ID values","status":"passed","title":"should validate string ID values","duration":0.09704199999998764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should extract record_id from objects","status":"passed","title":"should extract record_id from objects","duration":0.05141700000001492,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should extract id from objects as fallback","status":"passed","title":"should extract id from objects as fallback","duration":0.054874999999981355,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should handle arrays of record references","status":"passed","title":"should handle arrays of record references","duration":0.07150000000001455,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Record reference validation"],"fullName":"Attribute Validator validateAttributeValue Record reference validation should reject invalid record references","status":"passed","title":"should reject invalid record references","duration":0.14449999999999363,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Null and undefined value handling"],"fullName":"Attribute Validator validateAttributeValue Null and undefined value handling should treat null values as valid for any type","status":"passed","title":"should treat null values as valid for any type","duration":0.1550409999999829,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Null and undefined value handling"],"fullName":"Attribute Validator validateAttributeValue Null and undefined value handling should treat undefined values as valid and convert to null","status":"passed","title":"should treat undefined values as valid and convert to null","duration":0.13370800000001282,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Edge case handling"],"fullName":"Attribute Validator validateAttributeValue Edge case handling should handle empty strings appropriately by type","status":"passed","title":"should handle empty strings appropriately by type","duration":0.16599999999999682,"failureMessages":[],"meta":{}},{"ancestorTitles":["Attribute Validator","validateAttributeValue","Edge case handling"],"fullName":"Attribute Validator validateAttributeValue Edge case handling should handle whitespace strings appropriately","status":"passed","title":"should handle whitespace strings appropriately","duration":0.5927079999999592,"failureMessages":[],"meta":{}}],"startTime":1756513014765,"endTime":1756513014774.5928,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/attribute-mapping/attribute-validator.test.ts"},{"assertionResults":[{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Valid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Valid filter structures should transform a single filter with AND logic","status":"passed","title":"should transform a single filter with AND logic","duration":1.692542000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Valid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Valid filter structures should transform multiple filters with AND logic","status":"passed","title":"should transform multiple filters with AND logic","duration":0.3150410000000079,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Valid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Valid filter structures should transform multiple filters with OR logic","status":"passed","title":"should transform multiple filters with OR logic","duration":0.4457919999999831,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Valid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Valid filter structures should handle empty filters array","status":"passed","title":"should handle empty filters array","duration":0.22254200000003266,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Invalid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Invalid filter structures should return empty object for undefined filters","status":"passed","title":"should return empty object for undefined filters","duration":0.15950000000003683,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Invalid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Invalid filter structures should return empty object for non-array filters property","status":"passed","title":"should return empty object for non-array filters property","duration":0.11662499999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Invalid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Invalid filter structures should return empty object when all filters in OR condition are invalid","status":"passed","title":"should return empty object when all filters in OR condition are invalid","duration":0.19283300000000736,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Invalid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Invalid filter structures should return empty object when all filters in AND condition are invalid","status":"passed","title":"should return empty object when all filters in AND condition are invalid","duration":0.10066699999998718,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformFiltersToApiFormat","Invalid filter structures"],"fullName":"Filter Translators transformFiltersToApiFormat Invalid filter structures should throw error for invalid condition type","status":"passed","title":"should throw error for invalid condition type","duration":0.869542000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformSingleFilterToApi"],"fullName":"Filter Translators transformSingleFilterToApi should transform a single filter correctly","status":"passed","title":"should transform a single filter correctly","duration":0.19758300000000872,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Translators","transformSingleFilterToApi"],"fullName":"Filter Translators transformSingleFilterToApi should throw error for invalid filter structure","status":"passed","title":"should throw error for invalid filter structure","duration":0.14299999999997226,"failureMessages":[],"meta":{}}],"startTime":1756513018807,"endTime":1756513018811.1975,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/filters/translators.test.ts"},{"assertionResults":[{"ancestorTitles":["Filter Validation Utilities","validateFiltersObject"],"fullName":"Filter Validation Utilities validateFiltersObject should validate a valid filters object","status":"passed","title":"should validate a valid filters object","duration":1.5033750000000055,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFiltersObject"],"fullName":"Filter Validation Utilities validateFiltersObject should throw error for undefined filters with STRUCTURE category","status":"passed","title":"should throw error for undefined filters with STRUCTURE category","duration":0.27891699999997854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFiltersObject"],"fullName":"Filter Validation Utilities validateFiltersObject should throw error for filters missing filters property","status":"passed","title":"should throw error for filters missing filters property","duration":0.37779199999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFiltersObject"],"fullName":"Filter Validation Utilities validateFiltersObject should throw error for non-array filters property","status":"passed","title":"should throw error for non-array filters property","duration":0.26079200000003766,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should return empty array for valid filters","status":"passed","title":"should return empty array for valid filters","duration":0.45479199999999764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should detect missing attribute","status":"passed","title":"should detect missing attribute","duration":0.14658299999996416,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should detect missing attribute.slug","status":"passed","title":"should detect missing attribute.slug","duration":0.22183300000000372,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should detect missing condition","status":"passed","title":"should detect missing condition","duration":0.11183299999999008,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should detect invalid condition when validation is enabled","status":"passed","title":"should detect invalid condition when validation is enabled","duration":0.5137080000000083,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","collectInvalidFilters"],"fullName":"Filter Validation Utilities collectInvalidFilters should not validate condition when validation is disabled","status":"passed","title":"should not validate condition when validation is disabled","duration":0.5726669999999672,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","formatInvalidFiltersError"],"fullName":"Filter Validation Utilities formatInvalidFiltersError should return empty string for empty array","status":"passed","title":"should return empty string for empty array","duration":0.23129199999999628,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","formatInvalidFiltersError"],"fullName":"Filter Validation Utilities formatInvalidFiltersError should format a single error correctly","status":"passed","title":"should format a single error correctly","duration":0.09399999999999409,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","formatInvalidFiltersError"],"fullName":"Filter Validation Utilities formatInvalidFiltersError should format multiple errors correctly","status":"passed","title":"should format multiple errors correctly","duration":0.07358300000004192,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFilters"],"fullName":"Filter Validation Utilities validateFilters should validate a valid filters object","status":"passed","title":"should validate a valid filters object","duration":0.2044999999999959,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFilters"],"fullName":"Filter Validation Utilities validateFilters should accept empty filters array","status":"passed","title":"should accept empty filters array","duration":0.13150000000001683,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","validateFilters"],"fullName":"Filter Validation Utilities validateFilters should throw detailed error when all filters are invalid with appropriate category","status":"passed","title":"should throw detailed error when all filters are invalid with appropriate category","duration":0.2637499999999591,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect null filter","status":"passed","title":"should detect null filter","duration":0.14933300000001282,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect non-object filter","status":"passed","title":"should detect non-object filter","duration":1.292665999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect missing attribute","status":"passed","title":"should detect missing attribute","duration":0.11404100000004291,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect missing attribute.slug","status":"passed","title":"should detect missing attribute.slug","duration":0.14024999999998045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect missing condition","status":"passed","title":"should detect missing condition","duration":0.05791700000003175,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getInvalidFilterReason"],"fullName":"Filter Validation Utilities getInvalidFilterReason should detect invalid condition","status":"passed","title":"should detect invalid condition","duration":0.05629200000004175,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getFilterExample"],"fullName":"Filter Validation Utilities getFilterExample should return simple example by default","status":"passed","title":"should return simple example by default","duration":0.08287500000000136,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getFilterExample"],"fullName":"Filter Validation Utilities getFilterExample should return OR logic example when requested","status":"passed","title":"should return OR logic example when requested","duration":0.6513749999999732,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validation Utilities","getFilterExample"],"fullName":"Filter Validation Utilities getFilterExample should return multiple conditions example when requested","status":"passed","title":"should return multiple conditions example when requested","duration":0.34566699999999173,"failureMessages":[],"meta":{}}],"startTime":1756513018638,"endTime":1756513018646.6514,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/filters/validation-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return true for valid filter structure","status":"passed","title":"should return true for valid filter structure","duration":2.073583000000042,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return false for null or undefined filter","status":"passed","title":"should return false for null or undefined filter","duration":0.1990830000000301,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return false when attribute is missing","status":"passed","title":"should return false when attribute is missing","duration":0.1661659999999756,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return false when attribute.slug is missing","status":"passed","title":"should return false when attribute.slug is missing","duration":0.125,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return false when condition is missing","status":"passed","title":"should return false when condition is missing","duration":0.15791600000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterStructure"],"fullName":"Filter Validators validateFilterStructure should return true even if value is missing (some conditions don't need values)","status":"passed","title":"should return true even if value is missing (some conditions don't need values)","duration":0.10495899999995117,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterCondition"],"fullName":"Filter Validators validateFilterCondition should return the condition for valid condition types","status":"passed","title":"should return the condition for valid condition types","duration":1.7617499999999495,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterCondition"],"fullName":"Filter Validators validateFilterCondition should throw error for empty condition","status":"passed","title":"should throw error for empty condition","duration":0.9785420000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterCondition"],"fullName":"Filter Validators validateFilterCondition should throw error for invalid condition","status":"passed","title":"should throw error for invalid condition","duration":0.6722499999999627,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterWithConditions"],"fullName":"Filter Validators validateFilterWithConditions should not throw for valid filter and valid condition","status":"passed","title":"should not throw for valid filter and valid condition","duration":0.3017920000000345,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterWithConditions"],"fullName":"Filter Validators validateFilterWithConditions should throw for invalid filter structure","status":"passed","title":"should throw for invalid filter structure","duration":0.21075000000001864,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterWithConditions"],"fullName":"Filter Validators validateFilterWithConditions should throw for invalid condition when validation is enabled","status":"passed","title":"should throw for invalid condition when validation is enabled","duration":1.0905840000000353,"failureMessages":[],"meta":{}},{"ancestorTitles":["Filter Validators","validateFilterWithConditions"],"fullName":"Filter Validators validateFilterWithConditions should not throw for invalid condition when validation is disabled","status":"passed","title":"should not throw for invalid condition when validation is disabled","duration":0.21554099999997334,"failureMessages":[],"meta":{}}],"startTime":1756513019507,"endTime":1756513019516.2156,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/filters/validators.test.ts"},{"assertionResults":[{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create valid AttioTask with Issue #480 compatibility","status":"passed","title":"should create valid AttioTask with Issue #480 compatibility","duration":5.073499999999967,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create task with both content and title for E2E compatibility","status":"passed","title":"should create task with both content and title for E2E compatibility","duration":0.3961669999999913,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create multiple tasks with valid structure","status":"passed","title":"should create multiple tasks with valid structure","duration":0.6667079999999714,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create high priority task","status":"passed","title":"should create high priority task","duration":0.13591599999995196,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create completed task","status":"passed","title":"should create completed task","duration":0.16395900000003394,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create task with assignee","status":"passed","title":"should create task with assignee","duration":0.37829199999998764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","TaskMockFactory"],"fullName":"Mock Factories Validation TaskMockFactory should create task with linked records","status":"passed","title":"should create task with linked records","duration":0.29000000000002046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","CompanyMockFactory"],"fullName":"Mock Factories Validation CompanyMockFactory should create valid AttioRecord for company","status":"passed","title":"should create valid AttioRecord for company","duration":0.3133330000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","CompanyMockFactory"],"fullName":"Mock Factories Validation CompanyMockFactory should create technology company","status":"passed","title":"should create technology company","duration":0.5780419999999822,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","CompanyMockFactory"],"fullName":"Mock Factories Validation CompanyMockFactory should create multiple companies with valid structure","status":"passed","title":"should create multiple companies with valid structure","duration":0.4163330000000087,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","PersonMockFactory"],"fullName":"Mock Factories Validation PersonMockFactory should create valid AttioRecord for person","status":"passed","title":"should create valid AttioRecord for person","duration":0.3850830000000087,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","PersonMockFactory"],"fullName":"Mock Factories Validation PersonMockFactory should create executive person","status":"passed","title":"should create executive person","duration":0.11733399999997118,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","PersonMockFactory"],"fullName":"Mock Factories Validation PersonMockFactory should create person with company association","status":"passed","title":"should create person with company association","duration":0.09162500000002183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","ListMockFactory"],"fullName":"Mock Factories Validation ListMockFactory should create valid AttioList","status":"passed","title":"should create valid AttioList","duration":0.21291700000000446,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","ListMockFactory"],"fullName":"Mock Factories Validation ListMockFactory should create company list","status":"passed","title":"should create company list","duration":0.40995900000001484,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","ListMockFactory"],"fullName":"Mock Factories Validation ListMockFactory should create list entry","status":"passed","title":"should create list entry","duration":0.19462499999997362,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","Test Environment Detection"],"fullName":"Mock Factories Validation Test Environment Detection should detect test environment","status":"passed","title":"should detect test environment","duration":0.41308300000002873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","UniversalMockFactory"],"fullName":"Mock Factories Validation UniversalMockFactory should create mock data for all supported resource types","status":"passed","title":"should create mock data for all supported resource types","duration":0.2243750000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","UniversalMockFactory"],"fullName":"Mock Factories Validation UniversalMockFactory should support all expected resource types","status":"passed","title":"should support all expected resource types","duration":0.9740830000000074,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","MockDataInjector"],"fullName":"Mock Factories Validation MockDataInjector should inject mock data in test environment","status":"passed","title":"should inject mock data in test environment","duration":0.63312499999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","MockDataInjector"],"fullName":"Mock Factories Validation MockDataInjector should create task using TaskMockInjector","status":"passed","title":"should create task using TaskMockInjector","duration":0.7117920000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","Compatibility with Existing E2E Patterns"],"fullName":"Mock Factories Validation Compatibility with Existing E2E Patterns should be compatible with existing E2ETaskFactory patterns","status":"passed","title":"should be compatible with existing E2ETaskFactory patterns","duration":0.20970800000003464,"failureMessages":[],"meta":{}},{"ancestorTitles":["Mock Factories Validation","Compatibility with Existing E2E Patterns"],"fullName":"Mock Factories Validation Compatibility with Existing E2E Patterns should maintain Issue #480 task_id preservation","status":"passed","title":"should maintain Issue #480 task_id preservation","duration":0.172916999999984,"failureMessages":[],"meta":{}}],"startTime":1756513017238,"endTime":1756513017251.2097,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/utils/mock-factories/mock-factories-validation.test.ts"},{"assertionResults":[{"ancestorTitles":["error-response-utils","createFieldValidationError"],"fullName":"error-response-utils createFieldValidationError should create a field validation error with suggestions","status":"passed","title":"should create a field validation error with suggestions","duration":1.5747920000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createFieldValidationError"],"fullName":"error-response-utils createFieldValidationError should create a field validation error without suggestions","status":"passed","title":"should create a field validation error without suggestions","duration":0.15529199999997445,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createSelectOptionError"],"fullName":"error-response-utils createSelectOptionError should create a select option error with valid options","status":"passed","title":"should create a select option error with valid options","duration":0.6139999999999759,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createSelectOptionError"],"fullName":"error-response-utils createSelectOptionError should handle few options without truncation","status":"passed","title":"should handle few options without truncation","duration":0.10775000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createMultiSelectOptionError"],"fullName":"error-response-utils createMultiSelectOptionError should create a multi-select option error","status":"passed","title":"should create a multi-select option error","duration":0.2449579999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createReadOnlyFieldError"],"fullName":"error-response-utils createReadOnlyFieldError should create a read-only field error for single field","status":"passed","title":"should create a read-only field error for single field","duration":0.2582919999999831,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createReadOnlyFieldError"],"fullName":"error-response-utils createReadOnlyFieldError should create a read-only field error for multiple fields","status":"passed","title":"should create a read-only field error for multiple fields","duration":0.19045799999997826,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createUnknownFieldError"],"fullName":"error-response-utils createUnknownFieldError should create an unknown field error with suggestions","status":"passed","title":"should create an unknown field error with suggestions","duration":0.18895800000001373,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createUnknownFieldError"],"fullName":"error-response-utils createUnknownFieldError should create an unknown field error without suggestions","status":"passed","title":"should create an unknown field error without suggestions","duration":0.5243749999999636,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createFieldTypeMismatchError"],"fullName":"error-response-utils createFieldTypeMismatchError should create a field type mismatch error","status":"passed","title":"should create a field type mismatch error","duration":0.2630839999999921,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createRequiredFieldError"],"fullName":"error-response-utils createRequiredFieldError should create a required field error for single field","status":"passed","title":"should create a required field error for single field","duration":0.144457999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createRequiredFieldError"],"fullName":"error-response-utils createRequiredFieldError should create a required field error for multiple fields","status":"passed","title":"should create a required field error for multiple fields","duration":0.09300000000001774,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","formatEnhancedErrorResponse"],"fullName":"error-response-utils formatEnhancedErrorResponse should format an enhanced error response with all components","status":"passed","title":"should format an enhanced error response with all components","duration":0.20483300000000781,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","formatEnhancedErrorResponse"],"fullName":"error-response-utils formatEnhancedErrorResponse should format an error response without suggestions","status":"passed","title":"should format an error response without suggestions","duration":0.0795840000000112,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","formatEnhancedErrorResponse"],"fullName":"error-response-utils formatEnhancedErrorResponse should include help URL when provided","status":"passed","title":"should include help URL when provided","duration":0.060000000000002274,"failureMessages":[],"meta":{}},{"ancestorTitles":["error-response-utils","createErrorResponse"],"fullName":"error-response-utils createErrorResponse should create a simple error response","status":"passed","title":"should create a simple error response","duration":0.13179200000001856,"failureMessages":[],"meta":{}}],"startTime":1756513018057,"endTime":1756513018063.1318,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/utils/error-response-utils.test.ts"},{"assertionResults":[{"ancestorTitles":["validation-utils","getResourceAttributes"],"fullName":"validation-utils getResourceAttributes should fetch and cache resource attributes","status":"passed","title":"should fetch and cache resource attributes","duration":17.06816699999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","getResourceAttributes"],"fullName":"validation-utils getResourceAttributes should handle API errors gracefully","status":"passed","title":"should handle API errors gracefully","duration":5.965582999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateSelectField"],"fullName":"validation-utils validateSelectField should validate valid select option","status":"passed","title":"should validate valid select option","duration":0.6143339999999853,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateSelectField"],"fullName":"validation-utils validateSelectField should reject invalid select option with helpful message","status":"passed","title":"should reject invalid select option with helpful message","duration":3.7475840000000176,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateSelectField"],"fullName":"validation-utils validateSelectField should pass validation for non-select fields","status":"passed","title":"should pass validation for non-select fields","duration":1.3764170000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateSelectField"],"fullName":"validation-utils validateSelectField should handle missing field gracefully","status":"passed","title":"should handle missing field gracefully","duration":1.4189170000000217,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateMultiSelectField"],"fullName":"validation-utils validateMultiSelectField should validate valid multi-select options","status":"passed","title":"should validate valid multi-select options","duration":0.37879099999997834,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateMultiSelectField"],"fullName":"validation-utils validateMultiSelectField should reject invalid multi-select options","status":"passed","title":"should reject invalid multi-select options","duration":0.5710419999999772,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateReadOnlyFields"],"fullName":"validation-utils validateReadOnlyFields should pass validation when no read-only fields are updated","status":"passed","title":"should pass validation when no read-only fields are updated","duration":0.5835840000000303,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateReadOnlyFields"],"fullName":"validation-utils validateReadOnlyFields should reject updates to single read-only field","status":"passed","title":"should reject updates to single read-only field","duration":1.688666000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateReadOnlyFields"],"fullName":"validation-utils validateReadOnlyFields should reject updates to multiple read-only fields","status":"passed","title":"should reject updates to multiple read-only fields","duration":0.28300000000001546,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","suggestFieldName"],"fullName":"validation-utils suggestFieldName should suggest similar field names for typos","status":"passed","title":"should suggest similar field names for typos","duration":2.4168750000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","suggestFieldName"],"fullName":"validation-utils suggestFieldName should suggest field names based on similarity","status":"passed","title":"should suggest field names based on similarity","duration":0.3557910000000106,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","suggestFieldName"],"fullName":"validation-utils suggestFieldName should return empty array for very dissimilar names","status":"passed","title":"should return empty array for very dissimilar names","duration":0.1927919999999972,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","suggestFieldName"],"fullName":"validation-utils suggestFieldName should handle exact matches","status":"passed","title":"should handle exact matches","duration":0.5726669999999672,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateFieldExistence"],"fullName":"validation-utils validateFieldExistence should validate existing fields","status":"passed","title":"should validate existing fields","duration":0.5978339999999776,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateFieldExistence"],"fullName":"validation-utils validateFieldExistence should reject unknown fields with suggestions","status":"passed","title":"should reject unknown fields with suggestions","duration":1.859041999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateFieldExistence"],"fullName":"validation-utils validateFieldExistence should handle multiple field validation","status":"passed","title":"should handle multiple field validation","duration":0.25816700000001447,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateRecordFields"],"fullName":"validation-utils validateRecordFields should validate valid record fields for creation","status":"passed","title":"should validate valid record fields for creation","duration":0.20633299999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateRecordFields"],"fullName":"validation-utils validateRecordFields should validate valid record fields for update","status":"passed","title":"should validate valid record fields for update","duration":0.10495800000001054,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateRecordFields"],"fullName":"validation-utils validateRecordFields should reject read-only fields in updates","status":"passed","title":"should reject read-only fields in updates","duration":0.10483299999998508,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateRecordFields"],"fullName":"validation-utils validateRecordFields should reject invalid select options","status":"passed","title":"should reject invalid select options","duration":0.10658399999999801,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation-utils","validateRecordFields"],"fullName":"validation-utils validateRecordFields should reject unknown fields","status":"passed","title":"should reject unknown fields","duration":0.15850000000000364,"failureMessages":[],"meta":{}}],"startTime":1756513016940,"endTime":1756513016982.2063,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/utils/validation-utils.test.ts"},{"assertionResults":[],"startTime":1756513006047,"endTime":1756513006047,"status":"failed","message":"No test suite found in file /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/cross-tool-errors.test.ts","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/cross-tool-errors.test.ts"},{"assertionResults":[],"startTime":1756513006047,"endTime":1756513006047,"status":"failed","message":"No test suite found in file /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/resource-not-found.test.ts","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/resource-not-found.test.ts"},{"assertionResults":[],"startTime":1756513006047,"endTime":1756513006047,"status":"failed","message":"No test suite found in file /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/validation-errors.test.ts","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/error-handling/validation-errors.test.ts"},{"assertionResults":[{"ancestorTitles":["Company Notes Formatter","Content Extraction"],"fullName":"Company Notes Formatter Content Extraction should extract content from standard note structure","status":"passed","title":"should extract content from standard note structure","duration":11.420709000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Extraction"],"fullName":"Company Notes Formatter Content Extraction should extract content from nested data structure","status":"passed","title":"should extract content from nested data structure","duration":0.22062499999998408,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Extraction"],"fullName":"Company Notes Formatter Content Extraction should extract content from values structure (Attio-style)","status":"passed","title":"should extract content from values structure (Attio-style)","duration":0.24279100000001108,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Extraction"],"fullName":"Company Notes Formatter Content Extraction should handle alternative content field names","status":"passed","title":"should handle alternative content field names","duration":0.1275410000000079,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Extraction"],"fullName":"Company Notes Formatter Content Extraction should handle body field as content source","status":"passed","title":"should handle body field as content source","duration":0.17916700000000674,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Fallback Handling"],"fullName":"Company Notes Formatter Fallback Handling should show \"No content\" when no content fields are present","status":"passed","title":"should show \"No content\" when no content fields are present","duration":0.11612500000001091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Fallback Handling"],"fullName":"Company Notes Formatter Fallback Handling should handle missing title gracefully","status":"passed","title":"should handle missing title gracefully","duration":0.0941670000000272,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Fallback Handling"],"fullName":"Company Notes Formatter Fallback Handling should handle missing timestamp gracefully","status":"passed","title":"should handle missing timestamp gracefully","duration":0.09433400000000347,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Truncation"],"fullName":"Company Notes Formatter Content Truncation should truncate long content at 200 characters","status":"passed","title":"should truncate long content at 200 characters","duration":0.5142920000000117,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Content Truncation"],"fullName":"Company Notes Formatter Content Truncation should not truncate short content","status":"passed","title":"should not truncate short content","duration":0.1629169999999931,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Multiple Notes"],"fullName":"Company Notes Formatter Multiple Notes should handle multiple notes with different structures","status":"passed","title":"should handle multiple notes with different structures","duration":1.192542000000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Edge Cases"],"fullName":"Company Notes Formatter Edge Cases should handle empty notes array","status":"passed","title":"should handle empty notes array","duration":1.3749159999999847,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Edge Cases"],"fullName":"Company Notes Formatter Edge Cases should handle null notes","status":"passed","title":"should handle null notes","duration":0.12341700000001765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Company Notes Formatter","Edge Cases"],"fullName":"Company Notes Formatter Edge Cases should handle undefined notes","status":"passed","title":"should handle undefined notes","duration":0.07441599999998516,"failureMessages":[],"meta":{}}],"startTime":1756513017943,"endTime":1756513017959.375,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/companies/notes.test.ts"},{"assertionResults":[{"ancestorTitles":["Notes CRUD Operations E2E Tests","Test Data Setup"],"fullName":"Notes CRUD Operations E2E Tests Test Data Setup should create test companies for note testing","status":"passed","title":"should create test companies for note testing","duration":736.6430829999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Test Data Setup"],"fullName":"Notes CRUD Operations E2E Tests Test Data Setup should create test people for note testing","status":"passed","title":"should create test people for note testing","duration":552.54825,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Company Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Company Notes Management should create a company note with basic content","status":"passed","title":"should create a company note with basic content","duration":1.5422919999998612,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Company Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Company Notes Management should retrieve company notes","status":"passed","title":"should retrieve company notes","duration":3.7071670000000267,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Company Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Company Notes Management should create company note with markdown content","status":"passed","title":"should create company note with markdown content","duration":1.03449999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Company Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Company Notes Management should handle company note creation with URI format","status":"passed","title":"should handle company note creation with URI format","duration":1.5474589999998898,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Company Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Company Notes Management should handle pagination for company notes","status":"passed","title":"should handle pagination for company notes","duration":0.9847919999999704,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Person Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Person Notes Management should create a person note with basic content","status":"passed","title":"should create a person note with basic content","duration":3.379707999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Person Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Person Notes Management should retrieve person notes","status":"passed","title":"should retrieve person notes","duration":1.937167000000045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Person Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Person Notes Management should create person note with technical content","status":"passed","title":"should create person note with technical content","duration":2.058665999999903,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes CRUD Operations E2E Tests","Person Notes Management"],"fullName":"Notes CRUD Operations E2E Tests Person Notes Management should create person note with markdown formatting","status":"passed","title":"should create person note with markdown formatting","duration":0.672416000000112,"failureMessages":[],"meta":{}}],"startTime":1756513010238,"endTime":1756513011544.6724,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/notes-management/notes-crud.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Note Content and Format Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Note Content and Format Validation should handle notes with special characters","status":"failed","title":"should handle notes with special characters","duration":14.914416999999958,"failureMessages":["AssertionError: expected 'Note with special characters: áéíóú ñ…' to contain 'Cupcake chocolate bear claw chocolate…'\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/notes-management/notes-validation.e2e.test.ts:79:37\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Note Content and Format Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Note Content and Format Validation should handle notes with Unicode and emoji","status":"passed","title":"should handle notes with Unicode and emoji","duration":1.2192910000003394,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Note Content and Format Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Note Content and Format Validation should handle long content notes","status":"passed","title":"should handle long content notes","duration":0.8241249999996398,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Note Content and Format Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Note Content and Format Validation should handle HTML formatted content","status":"failed","title":"should handle HTML formatted content","duration":1.4647500000000946,"failureMessages":["AssertionError: expected 'HTML Content Test This note contains …' to contain '<h2>HTML Content Test</h2>'\n    at /Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/notes-management/notes-validation.e2e.test.ts:196:37\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///Users/kesslerio/GDrive/Projects/attio-mcp-server/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Note Content and Format Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Note Content and Format Validation should handle minimal content notes","status":"passed","title":"should handle minimal content notes","duration":0.7190420000001723,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Complex Note Scenarios"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Complex Note Scenarios should create a complete sales process note set","status":"passed","title":"should create a complete sales process note set","duration":1.5677499999997053,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Complex Note Scenarios"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Complex Note Scenarios should create customer success journey notes","status":"passed","title":"should create customer success journey notes","duration":0.9649170000002414,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Complex Note Scenarios"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Complex Note Scenarios should create project management notes with markdown","status":"passed","title":"should create project management notes with markdown","duration":0.6814580000000205,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Error Handling and Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Error Handling and Validation should handle invalid company ID gracefully","status":"passed","title":"should handle invalid company ID gracefully","duration":0.8160840000000462,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Error Handling and Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Error Handling and Validation should handle invalid person ID gracefully","status":"passed","title":"should handle invalid person ID gracefully","duration":0.4066250000000764,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Error Handling and Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Error Handling and Validation should validate required fields for company notes","status":"passed","title":"should validate required fields for company notes","duration":5.467707999999675,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Error Handling and Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Error Handling and Validation should handle notes retrieval for non-existent records","status":"passed","title":"should handle notes retrieval for non-existent records","duration":0.9120419999999285,"failureMessages":[],"meta":{}},{"ancestorTitles":["Notes Validation and Complex Scenarios E2E Tests","Error Handling and Validation"],"fullName":"Notes Validation and Complex Scenarios E2E Tests Error Handling and Validation should handle empty content gracefully","status":"passed","title":"should handle empty content gracefully","duration":0.5163750000001528,"failureMessages":[],"meta":{}}],"startTime":1756513009439,"endTime":1756513009469.912,"status":"failed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/e2e/suites/notes-management/notes-validation.e2e.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle batch create operations","status":"passed","title":"should handle batch create operations","duration":2.1342500000000086,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle batch update operations","status":"passed","title":"should handle batch update operations","duration":0.3768749999999841,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle batch delete operations","status":"passed","title":"should handle batch delete operations","duration":0.3195410000000152,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle batch get operations","status":"passed","title":"should handle batch get operations","duration":0.2443749999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle batch search operations","status":"passed","title":"should handle batch search operations","duration":0.7938330000000065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should validate batch size limits","status":"passed","title":"should validate batch size limits","duration":1.0956669999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should format batch results correctly","status":"passed","title":"should format batch results correctly","duration":0.47341599999998607,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should format batch search results correctly","status":"passed","title":"should format batch search results correctly","duration":0.1744579999999587,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","batch-operations tool"],"fullName":"Universal Advanced Operations - Batch Tests batch-operations tool should handle missing records/record_ids for batch operations","status":"passed","title":"should handle missing records/record_ids for batch operations","duration":1.0473749999999882,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","Error handling and edge cases"],"fullName":"Universal Advanced Operations - Batch Tests Error handling and edge cases should handle validation errors in batch operations","status":"passed","title":"should handle validation errors in batch operations","duration":0.3117080000000101,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","Error handling and edge cases"],"fullName":"Universal Advanced Operations - Batch Tests Error handling and edge cases should handle empty results gracefully for batch operations","status":"passed","title":"should handle empty results gracefully for batch operations","duration":0.14612499999998363,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","Concurrency and performance"],"fullName":"Universal Advanced Operations - Batch Tests Concurrency and performance should handle batch operations with controlled concurrency","status":"passed","title":"should handle batch operations with controlled concurrency","duration":124.20845800000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Batch Tests","Concurrency and performance"],"fullName":"Universal Advanced Operations - Batch Tests Concurrency and performance should add delays between batch chunks","status":"passed","title":"should add delays between batch chunks","duration":201.53437499999995,"failureMessages":[],"meta":{}}],"startTime":1756513010879,"endTime":1756513011212.5344,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/advanced-operations-batch.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should search companies by notes content","status":"passed","title":"should search companies by notes content","duration":116.57825,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should search people by notes content","status":"passed","title":"should search people by notes content","duration":1.3359159999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should search people by activity content","status":"passed","title":"should search people by activity content","duration":0.8385000000000105,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should handle unsupported interaction content search","status":"passed","title":"should handle unsupported interaction content search","duration":0.8312919999999622,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should format content search results correctly","status":"passed","title":"should format content search results correctly","duration":0.6918329999999742,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-content tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-content tool should handle invalid resource types in content search","status":"passed","title":"should handle invalid resource types in content search","duration":0.5850419999999872,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should search people by creation date","status":"passed","title":"should search people by creation date","duration":0.630292000000054,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should search people by modification date","status":"passed","title":"should search people by modification date","duration":1.0892089999999826,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should search people by last interaction with date validation","status":"passed","title":"should search people by last interaction with date validation","duration":1.3196250000000305,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should handle missing date range for last interaction","status":"passed","title":"should handle missing date range for last interaction","duration":0.49791699999997263,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should handle unsupported timeframe for companies","status":"passed","title":"should handle unsupported timeframe for companies","duration":0.3334159999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","search-by-timeframe tool"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests search-by-timeframe tool should format timeframe results with date info","status":"passed","title":"should format timeframe results with date info","duration":28.460375,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","Content and Timeframe validation and edge cases"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests Content and Timeframe validation and edge cases should handle validation errors in content and timeframe tools","status":"passed","title":"should handle validation errors in content and timeframe tools","duration":0.9290409999999838,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Content & Timeframe Tests","Content and Timeframe validation and edge cases"],"fullName":"Universal Advanced Operations - Content & Timeframe Tests Content and Timeframe validation and edge cases should handle empty results gracefully","status":"passed","title":"should handle empty results gracefully","duration":0.3386250000000359,"failureMessages":[],"meta":{}}],"startTime":1756513011919,"endTime":1756513012074.3386,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/advanced-operations-content.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Advanced Operations - Search Tests","advanced-search tool"],"fullName":"Universal Advanced Operations - Search Tests advanced-search tool should perform advanced search successfully","status":"passed","title":"should perform advanced search successfully","duration":125.54154199999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","advanced-search tool"],"fullName":"Universal Advanced Operations - Search Tests advanced-search tool should format advanced search results with context","status":"passed","title":"should format advanced search results with context","duration":0.5870409999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","advanced-search tool"],"fullName":"Universal Advanced Operations - Search Tests advanced-search tool should handle advanced search errors","status":"passed","title":"should handle advanced search errors","duration":0.9356250000000159,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","search-by-relationship tool"],"fullName":"Universal Advanced Operations - Search Tests search-by-relationship tool should search company to people relationships","status":"passed","title":"should search company to people relationships","duration":0.36470800000000736,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","search-by-relationship tool"],"fullName":"Universal Advanced Operations - Search Tests search-by-relationship tool should search people to company relationships","status":"passed","title":"should search people to company relationships","duration":0.7383339999999521,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","search-by-relationship tool"],"fullName":"Universal Advanced Operations - Search Tests search-by-relationship tool should handle unsupported task relationships with helpful error","status":"passed","title":"should handle unsupported task relationships with helpful error","duration":0.4512919999999667,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","search-by-relationship tool"],"fullName":"Universal Advanced Operations - Search Tests search-by-relationship tool should format relationship results correctly","status":"passed","title":"should format relationship results correctly","duration":0.4162499999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","Search tool validation and edge cases"],"fullName":"Universal Advanced Operations - Search Tests Search tool validation and edge cases should handle validation errors in search tools","status":"passed","title":"should handle validation errors in search tools","duration":0.8498329999999896,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Advanced Operations - Search Tests","Search tool validation and edge cases"],"fullName":"Universal Advanced Operations - Search Tests Search tool validation and edge cases should handle empty search results gracefully","status":"passed","title":"should handle empty search results gracefully","duration":3.525874999999985,"failureMessages":[],"meta":{}}],"startTime":1756513011517,"endTime":1756513011650.526,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/advanced-operations-search.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Core Operations Attributes Tests","get-attributes tool"],"fullName":"Universal Core Operations Attributes Tests get-attributes tool should get attributes successfully","status":"passed","title":"should get attributes successfully","duration":2.786375000000021,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","get-attributes tool"],"fullName":"Universal Core Operations Attributes Tests get-attributes tool should format array attributes correctly","status":"passed","title":"should format array attributes correctly","duration":0.41008399999998346,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","get-attributes tool"],"fullName":"Universal Core Operations Attributes Tests get-attributes tool should format object attributes correctly","status":"passed","title":"should format object attributes correctly","duration":0.8152500000000487,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","discover-attributes tool"],"fullName":"Universal Core Operations Attributes Tests discover-attributes tool should discover attributes successfully","status":"passed","title":"should discover attributes successfully","duration":0.9044170000000236,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","discover-attributes tool"],"fullName":"Universal Core Operations Attributes Tests discover-attributes tool should format discovered attributes correctly","status":"passed","title":"should format discovered attributes correctly","duration":0.4300000000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","get-detailed-info tool"],"fullName":"Universal Core Operations Attributes Tests get-detailed-info tool should get detailed info successfully","status":"passed","title":"should get detailed info successfully","duration":0.7065420000000131,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","get-detailed-info tool"],"fullName":"Universal Core Operations Attributes Tests get-detailed-info tool should format detailed info with values correctly","status":"passed","title":"should format detailed info with values correctly","duration":0.7475000000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","get-detailed-info tool"],"fullName":"Universal Core Operations Attributes Tests get-detailed-info tool should format detailed info as object correctly","status":"passed","title":"should format detailed info as object correctly","duration":0.6706249999999727,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","search-records formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) search-records formatResult for tasks should display task content when available","status":"passed","title":"should display task content when available","duration":0.5263329999999655,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","search-records formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) search-records formatResult for tasks should fallback to Unnamed for tasks without content","status":"passed","title":"should fallback to Unnamed for tasks without content","duration":0.18687499999998636,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","search-records formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) search-records formatResult for tasks should handle tasks with empty content values","status":"passed","title":"should handle tasks with empty content values","duration":0.5741659999999911,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","search-records formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) search-records formatResult for tasks should prioritize other fields over content for non-task records","status":"passed","title":"should prioritize other fields over content for non-task records","duration":2.081209000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","get-record-details formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) get-record-details formatResult for tasks should display task content when available","status":"passed","title":"should display task content when available","duration":0.3558330000000183,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","get-record-details formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) get-record-details formatResult for tasks should fallback to Unnamed for tasks without content","status":"passed","title":"should fallback to Unnamed for tasks without content","duration":0.1700829999999769,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Attributes Tests","Task Display Formatting (Issue #472)","get-record-details formatResult for tasks"],"fullName":"Universal Core Operations Attributes Tests Task Display Formatting (Issue #472) get-record-details formatResult for tasks should handle mixed field priority correctly","status":"passed","title":"should handle mixed field priority correctly","duration":0.19637500000004593,"failureMessages":[],"meta":{}}],"startTime":1756513018622,"endTime":1756513018634.1963,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/core-operations-attributes.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Core Operations CRUD Tests","create-record tool"],"fullName":"Universal Core Operations CRUD Tests create-record tool should create company successfully","status":"passed","title":"should create company successfully","duration":2.1887500000000273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","create-record tool"],"fullName":"Universal Core Operations CRUD Tests create-record tool should create person successfully","status":"passed","title":"should create person successfully","duration":1.4900409999999624,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","create-record tool"],"fullName":"Universal Core Operations CRUD Tests create-record tool should format create result correctly","status":"passed","title":"should format create result correctly","duration":0.505375000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","update-record tool"],"fullName":"Universal Core Operations CRUD Tests update-record tool should update company successfully","status":"passed","title":"should update company successfully","duration":0.8482079999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","update-record tool"],"fullName":"Universal Core Operations CRUD Tests update-record tool should format update result correctly","status":"passed","title":"should format update result correctly","duration":0.2895000000000323,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","delete-record tool"],"fullName":"Universal Core Operations CRUD Tests delete-record tool should delete record successfully","status":"passed","title":"should delete record successfully","duration":1.2245829999999955,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","delete-record tool"],"fullName":"Universal Core Operations CRUD Tests delete-record tool should format successful delete result correctly","status":"passed","title":"should format successful delete result correctly","duration":0.9874590000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations CRUD Tests","delete-record tool"],"fullName":"Universal Core Operations CRUD Tests delete-record tool should format failed delete result correctly","status":"passed","title":"should format failed delete result correctly","duration":0.5530830000000151,"failureMessages":[],"meta":{}}],"startTime":1756513017989,"endTime":1756513017997.553,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/core-operations-crud.test.ts"},{"assertionResults":[{"ancestorTitles":["Universal Core Operations Search Tests","search-records tool"],"fullName":"Universal Core Operations Search Tests search-records tool should search companies successfully","status":"passed","title":"should search companies successfully","duration":15.036749999999984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","search-records tool"],"fullName":"Universal Core Operations Search Tests search-records tool should search people successfully","status":"passed","title":"should search people successfully","duration":2.3979170000000067,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","search-records tool"],"fullName":"Universal Core Operations Search Tests search-records tool should handle search errors properly","status":"passed","title":"should handle search errors properly","duration":1.1757499999999936,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","search-records tool"],"fullName":"Universal Core Operations Search Tests search-records tool should format search results correctly","status":"passed","title":"should format search results correctly","duration":0.40462500000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","search-records tool"],"fullName":"Universal Core Operations Search Tests search-records tool should handle empty search results","status":"passed","title":"should handle empty search results","duration":0.1669170000000122,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","get-record-details tool"],"fullName":"Universal Core Operations Search Tests get-record-details tool should get company details successfully","status":"passed","title":"should get company details successfully","duration":0.40608399999996436,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","get-record-details tool"],"fullName":"Universal Core Operations Search Tests get-record-details tool should get person details successfully","status":"passed","title":"should get person details successfully","duration":3.1326669999999694,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","get-record-details tool"],"fullName":"Universal Core Operations Search Tests get-record-details tool should format record details correctly","status":"passed","title":"should format record details correctly","duration":0.9446250000000873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","Cross-resource type validation"],"fullName":"Universal Core Operations Search Tests Cross-resource type validation should handle all resource types for search","status":"passed","title":"should handle all resource types for search","duration":2.425542000000064,"failureMessages":[],"meta":{}},{"ancestorTitles":["Universal Core Operations Search Tests","Cross-resource type validation"],"fullName":"Universal Core Operations Search Tests Cross-resource type validation should handle all resource types for CRUD operations","status":"passed","title":"should handle all resource types for CRUD operations","duration":0.3135409999999865,"failureMessages":[],"meta":{}}],"startTime":1756513016289,"endTime":1756513016315.4255,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/core-operations-search.test.ts"},{"assertionResults":[{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from EnhancedApiError (which has getContextualMessage)","status":"passed","title":"should extract message from EnhancedApiError (which has getContextualMessage)","duration":1.3571250000000532,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from AttioApiError using message property (CRITICAL FIX)","status":"passed","title":"should extract message from AttioApiError using message property (CRITICAL FIX)","duration":0.1634999999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from UniversalValidationError using message property (CRITICAL FIX)","status":"passed","title":"should extract message from UniversalValidationError using message property (CRITICAL FIX)","duration":0.21454199999999446,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from AuthenticationError using message property","status":"passed","title":"should extract message from AuthenticationError using message property","duration":0.2673330000000078,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from ResourceNotFoundError using message property","status":"passed","title":"should extract message from ResourceNotFoundError using message property","duration":0.17787500000002865,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should extract message from generic Error using message property","status":"passed","title":"should extract message from generic Error using message property","duration":0.11195800000001555,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should fallback to string representation for unknown error types","status":"passed","title":"should fallback to string representation for unknown error types","duration":0.146000000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should fallback to string representation when error has no message","status":"passed","title":"should fallback to string representation when error has no message","duration":0.12954200000001492,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should handle null and undefined errors","status":"passed","title":"should handle null and undefined errors","duration":0.49212499999998727,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.getErrorMessage() - The Core Fix"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.getErrorMessage() - The Core Fix should NEVER CRASH when extracting error messages - CORE FIX FOR ISSUE #425","status":"passed","title":"should NEVER CRASH when extracting error messages - CORE FIX FOR ISSUE #425","duration":1.59295800000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should return already enhanced errors unchanged","status":"passed","title":"should return already enhanced errors unchanged","duration":0.15491600000001426,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should convert AttioApiError to EnhancedApiError","status":"passed","title":"should convert AttioApiError to EnhancedApiError","duration":0.4119999999999777,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should convert generic error with status properties","status":"passed","title":"should convert generic error with status properties","duration":0.1796250000000441,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should handle error with alternative status property name","status":"passed","title":"should handle error with alternative status property name","duration":0.1333750000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should use defaults for minimal error objects","status":"passed","title":"should use defaults for minimal error objects","duration":0.12433300000003555,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","ErrorEnhancer.ensureEnhanced() - Error Conversion"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction ErrorEnhancer.ensureEnhanced() - Error Conversion should handle error without message","status":"passed","title":"should handle error without message","duration":0.08883300000002237,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Real-world error handling scenarios"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Real-world error handling scenarios should demonstrate the Issue #425 fix in action","status":"passed","title":"should demonstrate the Issue #425 fix in action","duration":0.22104200000001129,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Real-world error handling scenarios"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Real-world error handling scenarios should handle non-existent record scenarios without crashes","status":"passed","title":"should handle non-existent record scenarios without crashes","duration":0.1739170000000172,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Real-world error handling scenarios"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Real-world error handling scenarios should properly enhance errors before throwing","status":"passed","title":"should properly enhance errors before throwing","duration":0.1392500000000041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Real-world error handling scenarios"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Real-world error handling scenarios should handle mixed error types in batch scenarios","status":"passed","title":"should handle mixed error types in batch scenarios","duration":0.6703330000000278,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Error message consistency and reliability"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Error message consistency and reliability should provide consistent error messages for the same error type","status":"passed","title":"should provide consistent error messages for the same error type","duration":0.15999999999996817,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Error message consistency and reliability"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Error message consistency and reliability should handle edge cases in error message extraction","status":"passed","title":"should handle edge cases in error message extraction","duration":0.22470799999996416,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Error message consistency and reliability"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Error message consistency and reliability should preserve original error information during enhancement","status":"passed","title":"should preserve original error information during enhancement","duration":0.320541999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Issue #425 Regression Prevention"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Issue #425 Regression Prevention should prevent the original crash scenario from lines 776 and 788","status":"passed","title":"should prevent the original crash scenario from lines 776 and 788","duration":0.9638330000000224,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Issue #425 Regression Prevention"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Issue #425 Regression Prevention should handle all error types mentioned in the issue description","status":"passed","title":"should handle all error types mentioned in the issue description","duration":0.203708000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Issue #425: Error Handling Fixes - Safe Error Message Extraction","Issue #425 Regression Prevention"],"fullName":"Issue #425: Error Handling Fixes - Safe Error Message Extraction Issue #425 Regression Prevention should validate the fix works in the actual error handling pattern used","status":"passed","title":"should validate the fix works in the actual error handling pattern used","duration":0.12666600000000017,"failureMessages":[],"meta":{}}],"startTime":1756513015224,"endTime":1756513015233.2036,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/error-handling.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – categories and domain checks","validateCategories()"],"fullName":"field-mapper – categories and domain checks validateCategories() validates category strings","status":"passed","title":"validates category strings","duration":2.5924160000000143,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","validateCategories()"],"fullName":"field-mapper – categories and domain checks validateCategories() validates category arrays","status":"passed","title":"validates category arrays","duration":0.6113749999999527,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","validateCategories()"],"fullName":"field-mapper – categories and domain checks validateCategories() handles empty input","status":"passed","title":"handles empty input","duration":0.1908329999999978,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","processCategories()"],"fullName":"field-mapper – categories and domain checks processCategories() processes string categories with warnings","status":"passed","title":"processes string categories with warnings","duration":0.20650000000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","processCategories()"],"fullName":"field-mapper – categories and domain checks processCategories() processes array categories","status":"passed","title":"processes array categories","duration":0.22912500000001046,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","processCategories()"],"fullName":"field-mapper – categories and domain checks processCategories() handles empty input gracefully","status":"passed","title":"handles empty input gracefully","duration":0.13308299999999917,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","getValidCategories()"],"fullName":"field-mapper – categories and domain checks getValidCategories() returns array of valid category names","status":"passed","title":"returns array of valid category names","duration":0.1702919999999608,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","checkDomainConflict()"],"fullName":"field-mapper – categories and domain checks checkDomainConflict() checks domain conflicts","status":"passed","title":"checks domain conflicts","duration":0.3753330000000119,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","checkDomainConflict()"],"fullName":"field-mapper – categories and domain checks checkDomainConflict() handles empty domain","status":"passed","title":"handles empty domain","duration":0.5303749999999923,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – categories and domain checks","checkDomainConflict()"],"fullName":"field-mapper – categories and domain checks checkDomainConflict() returns additional info when conflict exists (if any)","status":"passed","title":"returns additional info when conflict exists (if any)","duration":0.1566670000000272,"failureMessages":[],"meta":{}}],"startTime":1756513019187,"endTime":1756513019192.5303,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-categories-and-domain.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – mappings and basics","FIELD_MAPPINGS constant"],"fullName":"field-mapper – mappings and basics FIELD_MAPPINGS constant contains mappings for all resource types","status":"passed","title":"contains mappings for all resource types","duration":1.3707499999999868,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","FIELD_MAPPINGS constant"],"fullName":"field-mapper – mappings and basics FIELD_MAPPINGS constant has proper structure per mapping","status":"passed","title":"has proper structure per mapping","duration":0.6766659999999831,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","FIELD_MAPPINGS constant"],"fullName":"field-mapper – mappings and basics FIELD_MAPPINGS constant maps common company field variations","status":"passed","title":"maps common company field variations","duration":0.18208299999997735,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","FIELD_MAPPINGS constant"],"fullName":"field-mapper – mappings and basics FIELD_MAPPINGS constant maps common people field variations","status":"passed","title":"maps common people field variations","duration":0.11720900000000256,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","FIELD_MAPPINGS constant"],"fullName":"field-mapper – mappings and basics FIELD_MAPPINGS constant maps common task field variations","status":"passed","title":"maps common task field variations","duration":0.1143329999999878,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() returns original field when no mapping exists","status":"passed","title":"returns original field when no mapping exists","duration":0.1377080000000035,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() maps incorrect field names","status":"passed","title":"maps incorrect field names","duration":0.1332089999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() respects available attributes (keeps original if present)","status":"passed","title":"respects available attributes (keeps original if present)","duration":0.09499999999999886,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() maps when original not present in attributes","status":"passed","title":"maps when original not present in attributes","duration":0.4663749999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() handles case-insensitive mapping","status":"passed","title":"handles case-insensitive mapping","duration":0.1316669999999931,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","mapFieldName()"],"fullName":"field-mapper – mappings and basics mapFieldName() returns original when mapped field missing in attributes","status":"passed","title":"returns original when mapped field missing in attributes","duration":0.07754099999999653,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","getValidResourceTypes()"],"fullName":"field-mapper – mappings and basics getValidResourceTypes() returns string of valid resource types","status":"passed","title":"returns string of valid resource types","duration":0.18420900000000984,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","getValidFields()"],"fullName":"field-mapper – mappings and basics getValidFields() returns valid fields for resource type","status":"passed","title":"returns valid fields for resource type","duration":0.42070799999999053,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – mappings and basics","getValidFields()"],"fullName":"field-mapper – mappings and basics getValidFields() differs across resource types","status":"passed","title":"differs across resource types","duration":0.3177919999999972,"failureMessages":[],"meta":{}}],"startTime":1756513014245,"endTime":1756513014249.4207,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-mappings-and-basics.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – record mapping & collisions","detectFieldCollisions()"],"fullName":"field-mapper – record mapping & collisions detectFieldCollisions() detects no collisions for distinct targets","status":"passed","title":"detects no collisions for distinct targets","duration":1.9522079999999846,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","detectFieldCollisions()"],"fullName":"field-mapper – record mapping & collisions detectFieldCollisions() detects collisions when fields map to same target","status":"passed","title":"detects collisions when fields map to same target","duration":0.46383300000002237,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","detectFieldCollisions()"],"fullName":"field-mapper – record mapping & collisions detectFieldCollisions() ignores null-mapped fields","status":"passed","title":"ignores null-mapped fields","duration":0.17933299999998553,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","mapRecordFields()"],"fullName":"field-mapper – record mapping & collisions mapRecordFields() maps all fields from record data","status":"passed","title":"maps all fields from record data","duration":0.44675000000000864,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","mapRecordFields()"],"fullName":"field-mapper – record mapping & collisions mapRecordFields() returns warnings for mapped fields","status":"passed","title":"returns warnings for mapped fields","duration":0.314707999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","mapRecordFields()"],"fullName":"field-mapper – record mapping & collisions mapRecordFields() detects and reports field collisions","status":"passed","title":"detects and reports field collisions","duration":0.16354200000000674,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – record mapping & collisions","mapRecordFields()"],"fullName":"field-mapper – record mapping & collisions mapRecordFields() preserves non-mapped fields","status":"passed","title":"preserves non-mapped fields","duration":0.23504199999996445,"failureMessages":[],"meta":{}}],"startTime":1756513019353,"endTime":1756513019357.3147,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-record-mapping-and-collisions.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – transform + task mapping","transformFieldValue()"],"fullName":"field-mapper – transform + task mapping transformFieldValue() transforms boolean-ish values for tasks","status":"passed","title":"transforms boolean-ish values for tasks","duration":5.252250000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","transformFieldValue()"],"fullName":"field-mapper – transform + task mapping transformFieldValue() transforms various boolean-ish inputs","status":"passed","title":"transforms various boolean-ish inputs","duration":0.9130000000000109,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","transformFieldValue()"],"fullName":"field-mapper – transform + task mapping transformFieldValue() handles arrays for assignees field","status":"passed","title":"handles arrays for assignees field","duration":0.16170899999997346,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","transformFieldValue()"],"fullName":"field-mapper – transform + task mapping transformFieldValue() returns original when no transformation needed","status":"passed","title":"returns original when no transformation needed","duration":0.15949999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","transformFieldValue()"],"fullName":"field-mapper – transform + task mapping transformFieldValue() handles date transformations","status":"passed","title":"handles date transformations","duration":0.5096660000000384,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() synthesizes content from title during create","status":"passed","title":"synthesizes content from title during create","duration":0.43304200000000037,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() does not synthesize content during update","status":"passed","title":"does not synthesize content during update","duration":0.15975000000003092,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() preserves existing content during create","status":"passed","title":"preserves existing content during create","duration":0.1063750000000141,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() handles missing fields gracefully","status":"passed","title":"handles missing fields gracefully","duration":0.6949579999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() preserves unmapped fields","status":"passed","title":"preserves unmapped fields","duration":0.27845800000000054,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – transform + task mapping","mapTaskFields()"],"fullName":"field-mapper – transform + task mapping mapTaskFields() handles both operations correctly","status":"passed","title":"handles both operations correctly","duration":0.10008399999998119,"failureMessages":[],"meta":{}}],"startTime":1756513019708,"endTime":1756513019718.1,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-transform-and-task-mapping.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – uniqueness error enhancement"],"fullName":"field-mapper – uniqueness error enhancement returns original message when no attribute ID pattern found","status":"passed","title":"returns original message when no attribute ID pattern found","duration":2.1409160000000043,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – uniqueness error enhancement"],"fullName":"field-mapper – uniqueness error enhancement returns original message when field cannot be extracted","status":"passed","title":"returns original message when field cannot be extracted","duration":1.4205840000000194,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – uniqueness error enhancement"],"fullName":"field-mapper – uniqueness error enhancement attempts enhancement with attribute ID pattern","status":"passed","title":"attempts enhancement with attribute ID pattern","duration":0.5259999999999536,"failureMessages":[],"meta":{}}],"startTime":1756513020211,"endTime":1756513020215.526,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-uniqueness-errors.test.ts"},{"assertionResults":[{"ancestorTitles":["field-mapper – validation and suggestions","validateResourceType()"],"fullName":"field-mapper – validation and suggestions validateResourceType() validates correct resource types","status":"passed","title":"validates correct resource types","duration":8.76687499999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateResourceType()"],"fullName":"field-mapper – validation and suggestions validateResourceType() corrects invalid resource types","status":"passed","title":"corrects invalid resource types","duration":0.34695799999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateResourceType()"],"fullName":"field-mapper – validation and suggestions validateResourceType() handles typos in resource types","status":"passed","title":"handles typos in resource types","duration":0.2587499999999636,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateResourceType()"],"fullName":"field-mapper – validation and suggestions validateResourceType() provides suggestion for unknown types","status":"passed","title":"provides suggestion for unknown types","duration":0.4583329999999819,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","getFieldSuggestions()"],"fullName":"field-mapper – validation and suggestions getFieldSuggestions() suggests close field names","status":"passed","title":"suggests close field names","duration":0.6372079999999869,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","getFieldSuggestions()"],"fullName":"field-mapper – validation and suggestions getFieldSuggestions() suggests partial matches","status":"passed","title":"suggests partial matches","duration":0.155791000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","getFieldSuggestions()"],"fullName":"field-mapper – validation and suggestions getFieldSuggestions() provides fallback message for poor matches","status":"passed","title":"provides fallback message for poor matches","duration":0.179458000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","getFieldSuggestions()"],"fullName":"field-mapper – validation and suggestions getFieldSuggestions() handles known common mistakes","status":"passed","title":"handles known common mistakes","duration":0.13720900000004121,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","getFieldSuggestions()"],"fullName":"field-mapper – validation and suggestions getFieldSuggestions() handles unsupported resource types","status":"passed","title":"handles unsupported resource types","duration":0.6079579999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateFields()"],"fullName":"field-mapper – validation and suggestions validateFields() validates correct fields","status":"passed","title":"validates correct fields","duration":0.6154999999999973,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateFields()"],"fullName":"field-mapper – validation and suggestions validateFields() detects invalid fields","status":"passed","title":"detects invalid fields","duration":0.4703339999999798,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateFields()"],"fullName":"field-mapper – validation and suggestions validateFields() provides suggestions for invalid fields","status":"passed","title":"provides suggestions for invalid fields","duration":2.4834999999999923,"failureMessages":[],"meta":{}},{"ancestorTitles":["field-mapper – validation and suggestions","validateFields()"],"fullName":"field-mapper – validation and suggestions validateFields() handles empty field objects","status":"passed","title":"handles empty field objects","duration":0.1962909999999738,"failureMessages":[],"meta":{}}],"startTime":1756513018741,"endTime":1756513018757.1963,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/handlers/tool-configs/universal/field-mapper-validation-and-suggestions.test.ts"},{"assertionResults":[{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"notanemail\"","status":"passed","title":"should reject invalid email \"notanemail\"","duration":1.7486660000000143,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"@example.com\"","status":"passed","title":"should reject invalid email \"@example.com\"","duration":0.21525000000002592,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@\"","status":"passed","title":"should reject invalid email \"user@\"","duration":0.12558400000000347,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@.com\"","status":"passed","title":"should reject invalid email \"user@.com\"","duration":0.40066699999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@example\"","status":"passed","title":"should reject invalid email \"user@example\"","duration":0.27804200000002766,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user @example.com\"","status":"passed","title":"should reject invalid email \"user @example.com\"","duration":0.11612500000001091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@example .com\"","status":"passed","title":"should reject invalid email \"user@example .com\"","duration":0.08154199999995626,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@@example.com\"","status":"passed","title":"should reject invalid email \"user@@example.com\"","duration":0.07495799999998098,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user.example.com\"","status":"passed","title":"should reject invalid email \"user.example.com\"","duration":0.5000840000000153,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"\"","status":"passed","title":"should reject invalid email \"\"","duration":0.11929199999997309,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \" \"","status":"passed","title":"should reject invalid email \" \"","duration":0.06466699999998582,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Invalid Email Rejection"],"fullName":"Email Validation Function Invalid Email Rejection should reject invalid email \"user@ex ample.com\"","status":"passed","title":"should reject invalid email \"user@ex ample.com\"","duration":0.05054200000000719,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user@example.com\"","status":"passed","title":"should accept valid email \"user@example.com\"","duration":0.06945799999999736,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user.name@example.com\"","status":"passed","title":"should accept valid email \"user.name@example.com\"","duration":0.051250000000038654,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user+tag@example.com\"","status":"passed","title":"should accept valid email \"user+tag@example.com\"","duration":0.0464579999999728,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user123@example.com\"","status":"passed","title":"should accept valid email \"user123@example.com\"","duration":0.09637499999996635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user_name@example.com\"","status":"passed","title":"should accept valid email \"user_name@example.com\"","duration":0.048458999999979824,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user-name@example.com\"","status":"passed","title":"should accept valid email \"user-name@example.com\"","duration":0.047917000000040844,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user@subdomain.example.com\"","status":"passed","title":"should accept valid email \"user@subdomain.example.com\"","duration":0.04487499999999045,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"user@example.co.uk\"","status":"passed","title":"should accept valid email \"user@example.co.uk\"","duration":0.041249999999990905,"failureMessages":[],"meta":{}},{"ancestorTitles":["Email Validation Function","Valid Email Acceptance"],"fullName":"Email Validation Function Valid Email Acceptance should accept valid email \"User@Example.Com\"","status":"passed","title":"should accept valid email \"User@Example.Com\"","duration":0.07612499999999045,"failureMessages":[],"meta":{}}],"startTime":1756513020044,"endTime":1756513020049.0762,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/handlers/universal/email-validation-simple.test.ts"},{"assertionResults":[{"ancestorTitles":["Tasks Attribute Discovery Fix - Issue #417"],"fullName":"Tasks Attribute Discovery Fix - Issue #417 should discover task attributes without calling /objects/tasks/attributes","status":"passed","title":"should discover task attributes without calling /objects/tasks/attributes","duration":2.518374999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Attribute Discovery Fix - Issue #417"],"fullName":"Tasks Attribute Discovery Fix - Issue #417 should return task attributes via universal get-attributes without record ID","status":"passed","title":"should return task attributes via universal get-attributes without record ID","duration":0.6979580000000851,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Attribute Discovery Fix - Issue #417"],"fullName":"Tasks Attribute Discovery Fix - Issue #417 should include proper field mappings for common task field names","status":"passed","title":"should include proper field mappings for common task field names","duration":0.2659170000000586,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Attribute Discovery Fix - Issue #417"],"fullName":"Tasks Attribute Discovery Fix - Issue #417 should provide helpful field descriptions for task attributes","status":"passed","title":"should provide helpful field descriptions for task attributes","duration":0.24691700000005312,"failureMessages":[],"meta":{}}],"startTime":1756513019190,"endTime":1756513019194.2659,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/handlers/universal/tasks-attribute-discovery.test.ts"},{"assertionResults":[{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should map common task field variations to correct field names","status":"passed","title":"should map common task field variations to correct field names","duration":8.812665999999979,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should handle camelCase field variations correctly","status":"passed","title":"should handle camelCase field variations correctly","duration":1.5220410000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should validate required fields for tasks","status":"passed","title":"should validate required fields for tasks","duration":13.24429200000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should provide helpful suggestions for unknown task fields","status":"passed","title":"should provide helpful suggestions for unknown task fields","duration":5.096500000000049,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should prevent field mapping collisions","status":"passed","title":"should prevent field mapping collisions","duration":0.38504199999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["Tasks Field Mapping Fix - Issue #417"],"fullName":"Tasks Field Mapping Fix - Issue #417 should include all expected valid fields","status":"passed","title":"should include all expected valid fields","duration":0.23545799999999417,"failureMessages":[],"meta":{}}],"startTime":1756513018960,"endTime":1756513018989.2354,"status":"passed","message":"","name":"/Users/kesslerio/GDrive/Projects/attio-mcp-server/test/unit/handlers/universal/tasks-field-mapping.test.ts"}]}
